// Package zenduty provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package zenduty

import (
	"bytes"
	"context"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/nullable"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// AccountCustomRole Account Custom Role object's schema
type AccountCustomRole struct {
	// Description A string that represents the description for Account Custom Role object
	Description *string `json:"description,omitempty"`

	// Name A string that represents the unique name for Account Custom Role object
	Name *string `json:"name,omitempty"`

	// Permissions An array of account level permissions
	Permissions *string `json:"permissions,omitempty"`

	// UniqueID A system generated string that represents the Account Custom Role object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// AccountCustomRolePayload Payload schema for the Account Custom Role object
type AccountCustomRolePayload struct {
	// Description A string that represents the description for Account Custom Role object
	Description *string `json:"description,omitempty"`

	// Name A string that represents the unique name for Account Custom Role object
	Name *string `json:"name,omitempty"`

	// Permissions An array of account level permissions
	Permissions []string `json:"permissions"`
}

// AccountCustomRolePostAndPutResponse Account Custom Role object's put and post response schema
type AccountCustomRolePostAndPutResponse struct {
	// Description A string that represents the description for Account Custom Role object
	Description *string `json:"description,omitempty"`

	// Name A string that represents the unique name for Account Custom Role object
	Name *string `json:"name,omitempty"`

	// UniqueID A system generated string that represents the Account Custom Role object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// AccountMember Account Member object schema
type AccountMember struct {
	// IsVerified A boolean flag that represents the Account Member object's verification
	IsVerified *bool `json:"is_verified,omitempty"`

	// JoiningDate A formatted string that represents the Account Member object's joining_date
	JoiningDate *string `json:"joining_date,omitempty"`

	// Role An integer that represents the Account Member object's role. 1 is owner, 2 is admin and 3 is user
	Role *int `json:"role,omitempty"`

	// TimeZone A formatted string that represents the Account Member object's time zone. You can check out the time zone list here https://timezonedb.com/time-zones
	TimeZone *string `json:"time_zone,omitempty"`

	// UniqueID A system-generated string that represents the Account Member object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`

	// User User object schema
	User *User `json:"user,omitempty"`
}

// AccountMemberPayload Payload schema for the Account Member object
type AccountMemberPayload struct {
	// Role An integer that represents the Account Member object's role. 1 is owner, 2 is admin and 3 is user
	Role *int `json:"role,omitempty"`

	// TimeZone A formatted string that represents the Account Member object's time zone. You can check out the time zone list here https://timezonedb.com/time-zones
	TimeZone *string `json:"time_zone,omitempty"`

	// User User object schema
	User User `json:"user"`
}

// AlertStatus Alert Status object schema
type AlertStatus struct {
	// Alert unique_id of an alert object
	Alert *string `json:"alert,omitempty"`

	// Error short error message if any error in alert creation
	Error *string `json:"error,omitempty"`

	// Incident Incident schema for Alert Status object
	Incident *AlertStatusIncident `json:"incident,omitempty"`

	// Integration Integration schema for Alert Status object
	Integration *AlertStatusIntegration `json:"integration,omitempty"`

	// IsIncidentCreated A boolean flag that represents whether the Incident Alert object created an incident or not.
	IsIncidentCreated *bool `json:"is_incident_created,omitempty"`

	// Status Status of an Alert. Possible statuses are queued, completed and failed
	Status *string `json:"status,omitempty"`

	// Suppressed A boolean flag that represents whether the Event object is suppressed or not
	Suppressed *bool `json:"suppressed,omitempty"`
}

// AlertStatusIncident Incident schema for Alert Status object
type AlertStatusIncident struct {
	// IncidentNumber A integer that represents the number of an Incident object
	IncidentNumber *int `json:"incident_number,omitempty"`

	// UniqueID A string that represents the unique_id of an Incident object
	UniqueID *string `json:"unique_id,omitempty"`
}

// AlertStatusIntegration Integration schema for Alert Status object
type AlertStatusIntegration struct {
	// Name A string that represents the name of an Integration object
	Name *string `json:"name,omitempty"`
}

// AlertTransformer Alert Transformer Action object schema
type AlertTransformer struct {
	// Actions An array of Alert Transformer Action objects
	Actions *[]AlertTransformerAction `json:"actions,omitempty"`

	// Description A string that represents the Alert Transformer object's description
	Description *string `json:"description,omitempty"`

	// RuleJSON A string that represents the all the conditions of the alert rule
	RuleJSON *string `json:"rule_json,omitempty"`

	// UniqueID A system-generated string that represents the Alert Transformer unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// AlertTransformerAction Alert Transformer Action object schema
type AlertTransformerAction struct {
	// ActionType An integer that represents the Alert Transformer Action object's action_type in an Alert Rule
	ActionType *int `json:"action_type,omitempty"`

	// AssignTo A system-generated string that represents the User object's username
	AssignTo *string `json:"assign_to,omitempty"`

	// AssignToName A string that represents the name of the assignee
	AssignToName *string `json:"assign_to_name,omitempty"`

	// EscalationPolicy A system-generated string that represents the Escalation Policy object's unique_id
	EscalationPolicy *string `json:"escalation_policy,omitempty"`

	// EscalationPolicyName A string that represents the Escalation Policy object's name
	EscalationPolicyName *string `json:"escalation_policy_name,omitempty"`

	// Key A string that represents the Alert Transformer Action object's key
	Key *string `json:"key,omitempty"`

	// Schedule A system-generated string that represents the Schedule object's unique_id
	Schedule *string `json:"schedule,omitempty"`

	// SLA A system-generated string that represents the Team SLA object's unique_id
	SLA *string `json:"sla,omitempty"`

	// TaskTemplate A system-generated string that represents the Task Template object's unique_id
	TaskTemplate *string `json:"task_template,omitempty"`

	// TeamPriority A system-generated string that represents the Team Priority object's unique_id
	TeamPriority *string `json:"team_priority,omitempty"`

	// UniqueID A system-generated string that represents the Alert Transformer Action object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`

	// Value A system-generated string that represents the User object username or Schedule object unique_id
	Value *string `json:"value,omitempty"`

	// ValueReferenceName A string that represents the name of the responder(user or schedule)
	ValueReferenceName *string `json:"value_reference_name,omitempty"`
}

// AlertTransformerActionPayload Alert Transformer Action payload object schema
type AlertTransformerActionPayload struct {
	// ActionType An integer that represents the Alert Transformer Action object's action_type in an Alert Rule
	ActionType *int `json:"action_type,omitempty"`

	// AssignTo A system-generated string that represents the User object's username
	AssignTo *string `json:"assign_to,omitempty"`

	// AssignToName A string that represents the name of the assignee
	AssignToName *string `json:"assign_to_name,omitempty"`

	// EscalationPolicy A system-generated string that represents the Escalation Policy object's unique_id
	EscalationPolicy *string `json:"escalation_policy,omitempty"`

	// EscalationPolicyName A string that represents the Escalation Policy object's name
	EscalationPolicyName *string `json:"escalation_policy_name,omitempty"`

	// Key A string that represents the Alert Transformer Action object's key
	Key *string `json:"key,omitempty"`

	// Schedule A system-generated string that represents the Schedule object's unique_id
	Schedule *string `json:"schedule,omitempty"`

	// SLA A system-generated string that represents the Team SLA object's unique_id
	SLA *string `json:"sla,omitempty"`

	// TaskTemplate A system-generated string that represents the Task Template object's unique_id
	TaskTemplate *string `json:"task_template,omitempty"`

	// TeamPriority A system-generated string that represents the Team Priority object's unique_id
	TeamPriority *string `json:"team_priority,omitempty"`

	// Value A system-generated string that represents the User object username or Schedule object unique_id
	Value *string `json:"value,omitempty"`

	// ValueReferenceName A string that represents the name of the responder(user or schedule)
	ValueReferenceName *string `json:"value_reference_name,omitempty"`
}

// AlertTransformerPayload Alert Transformer Action object payload schema
type AlertTransformerPayload struct {
	// Actions An array of Alert Transformer Action objects
	Actions *[]AlertTransformerActionPayload `json:"actions,omitempty"`

	// Description A string that represents the Alert Transformer object's description
	Description *string `json:"description,omitempty"`

	// RuleJSON A string that represents the all the conditions of the alert rule
	RuleJSON *string `json:"rule_json,omitempty"`
}

// Application Application object schema
type Application struct {
	// ApplicationType An integer that represents Application object's application_type 0 for alert and 1 for outbound
	ApplicationType *int `json:"application_type,omitempty"`

	// AvailabilityPlanID An integer that represents Application object's availability_plan_id
	AvailabilityPlanID *int `json:"availability_plan_id,omitempty"`

	// Categories A string that represents Application object's categories
	Categories *string `json:"categories,omitempty"`

	// Description A string that represents Application object's description
	Description *string `json:"description,omitempty"`

	// DocumentationLink A string that represents Application object's documentation_link
	DocumentationLink *string `json:"documentation_link,omitempty"`

	// Extension A string that represents Application object's extension
	Extension *string `json:"extension,omitempty"`

	// IconURL A string that represents Application object's icon_url
	IconURL *string `json:"icon_url,omitempty"`

	// Name A string that represents Application object's name
	Name *string `json:"name,omitempty"`

	// SetupInstructions A string that represents Application object's setup_instructions
	SetupInstructions *string `json:"setup_instructions,omitempty"`

	// Summary A string that represents Application object's summary
	Summary *string `json:"summary,omitempty"`

	// UniqueID A system-generated string that represents Application object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// DeleteUserPayload Payload schema for the Delete User object
type DeleteUserPayload struct {
	// Username A system-generated string that represents the User object's username
	Username string `json:"username"`
}

// EP Escalation Policy object schema
type EP struct {
	// Description A string that represents the Escalation Policy object's description
	Description *string `json:"description,omitempty"`

	// GlobalEp A boolean flag that represents whether the Escalation Policy is global or not.
	GlobalEp *bool `json:"global_ep,omitempty"`

	// MoveToNext A boolean flag that represents whether to move to the next Escalation Rule if no user is found on the current Escalation Rule
	MoveToNext *bool `json:"move_to_next,omitempty"`

	// Name A string that represents the Escalation Policy object's name
	Name *string `json:"name,omitempty"`

	// RepeatPolicy An integer that represents the Escalation Policy object's repeat_policy
	RepeatPolicy *int `json:"repeat_policy,omitempty"`

	// Rules Escalation Policy Rule object schema
	Rules *EPRule `json:"rules,omitempty"`

	// Summary A string that represents the Escalation Policy object's summary
	Summary *string `json:"summary,omitempty"`

	// Team A system-generated string that represents the Team object's unique_id
	Team *string `json:"team,omitempty"`

	// UniqueID A string that represents the Escalation Policy object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// EPPayload Payload schema for the Escalation Policy object
type EPPayload struct {
	// Description A string that represents the Escalation Policy object's description
	Description *string `json:"description,omitempty"`

	// Name A string that represents the Escalation Policy object's name
	Name string `json:"name"`

	// Rules Escalation Policy Rule Payload object schema
	Rules EPRulePayload `json:"rules"`

	// Summary A string that represents the Escalation Policy object's summary
	Summary *string `json:"summary,omitempty"`
}

// EPRule Escalation Policy Rule object schema
type EPRule struct {
	// Delay An integer that represents the amount of time before the escalation of the Escalation Policy object after the incident object is created. For example, t=0 is When an incident is created, if delay=5, then this Escalation Policy Rule object will be escalated at t=5.
	Delay int `json:"delay"`

	// Position An integer that represents the Escalation Policy Rule object's position
	Position *int `json:"position,omitempty"`

	// Target Escalation Policy Rule Target object schema
	Target *struct {
		// TargetID A system-generated string that represents Escalation Policy Rule Target object's target_id. If target_type is 1 then target_id is Schedule object's unique_id and if target_type is 2 then target_id is User object's username
		TargetID *string `json:"target_id,omitempty"`

		// TargetType An integer that represents the Escalation Policy Rule Target object's target_type. 1 for Schedule and 2 for User
		TargetType *int `json:"target_type,omitempty"`
	} `json:"target,omitempty"`

	// UniqueID A system-generated string that represents Escalation Policy Rule object's unique_id.
	UniqueID *string `json:"unique_id,omitempty"`
}

// EPRulePayload Escalation Policy Rule Payload object schema
type EPRulePayload struct {
	// Delay An integer that represents the amount of time before the escalation of the Escalation Policy object after the incident object is created. For example, t=0 is When an incident is created, if delay=5, then this Escalation Policy Rule object will be escalated at t=5.
	Delay int `json:"delay"`

	// Position An integer that represents the Escalation Policy Rule object's position
	Position *int `json:"position,omitempty"`

	// Target Escalation Policy Rule Target object schema
	Target *struct {
		// TargetID A system-generated string that represents Escalation Policy Rule Target object's target_id. If target_type is 1 then target_id is Schedule object's unique_id and if target_type is 2 then target_id is User object's username
		TargetID *string `json:"target_id,omitempty"`

		// TargetType An integer that represents the Escalation Policy Rule Target object's target_type. 1 for Schedule and 2 for User
		TargetType *int `json:"target_type,omitempty"`
	} `json:"target,omitempty"`
}

// EscalationPolicyOnCallV1 Team OnCall object schema v1
type EscalationPolicyOnCallV1 struct {
	// EscalationPolicy Escalation Policy object schema for OnCall object schema.
	EscalationPolicy *struct {
		// Description A string that represents the Escalation Policy object's description
		Description *string `json:"description,omitempty"`

		// MoveToNext A boolean flag that represents whether to move to the next Escalation Policy Rule if no User is found within the Escalation Policy Rule
		MoveToNext *bool `json:"move_to_next,omitempty"`

		// Name A string that represents the Escalation Policy object's name
		Name *string `json:"name,omitempty"`

		// RepeatPolicy An integer that represents the Escalation Policy object's repeat_policy
		RepeatPolicy *int `json:"repeat_policy,omitempty"`

		// Summary A string that represents the Escalation Policy object's summary
		Summary *string `json:"summary,omitempty"`

		// UniqueID A system-generated string that represents the Escalation Policy object's unique_id
		UniqueID *string `json:"unique_id,omitempty"`
	} `json:"escalation_policy,omitempty"`

	// Team Team object schema for OnCall object schema
	Team *struct {
		// Name A string that represents the Team object's name
		Name *string `json:"name,omitempty"`

		// UniqueID A system-generated string that represents the Team object's unique_id
		UniqueID *string `json:"unique_id,omitempty"`
	} `json:"team,omitempty"`

	// User User object schema
	User *User `json:"user,omitempty"`
}

// EscalationPolicyOnCallV2 Team OnCall object schema v2
type EscalationPolicyOnCallV2 struct {
	// Name A string that represents the Escalation Policy object's name
	Name *string `json:"name,omitempty"`

	// Oncalls An array of Escalation Policy Rule OnCall objects
	Oncalls *[]EscalationPolicyRuleOnCall `json:"oncalls,omitempty"`

	// UniqueID A system-generated string that represents the Escalation Policy object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// EscalationPolicyRuleOnCall Escalation Policy OnCall object schema
type EscalationPolicyRuleOnCall struct {
	// Delay An integer that represents the Escalation Policy Rule object's delay in an Escalation Policy
	Delay *int `json:"delay,omitempty"`

	// EpRule A system-generated string that represents the Escalation Policy object's unique_id
	EpRule *string `json:"ep_rule,omitempty"`

	// Oncalls An array of User objects who is on call in an Escalation Policy Rule
	Oncalls *[]User `json:"oncalls,omitempty"`

	// Position An integer that represents the Escalation Policy Rule object's position in an Escalation Policy
	Position *int `json:"position,omitempty"`
}

// Event Event object schema
type Event struct {
	// AlertType An integer that represents the Event object's alert_type. 0 is for info, 1 is for warning, 2 for error, 3 is  for critical, 4 is for acknowledged and 5 is for resolved.
	AlertType *int `json:"alert_type,omitempty"`

	// CreationDate A formatted string that represents the Event object's creation_date
	CreationDate *time.Time `json:"creation_date,omitempty"`

	// EntityID A system-generated string that represents the Event object's entitiy_id
	EntityID *string       `json:"entity_id,omitempty"`
	Images   *[]EventImage `json:"images,omitempty"`

	// Incident An integer that represents the Incident object's incident_number
	Incident *int `json:"incident,omitempty"`

	// IncidentCreated A boolean flag that represents whether the Incident Alert object created an incident or not.
	IncidentCreated *bool `json:"incident_created,omitempty"`

	// Integration A string that represents the Integration object's unique_id
	Integration *string `json:"integration,omitempty"`

	// IntegrationObject Integration object schema for Event object schema
	IntegrationObject *struct {
		// CreationDate A formatted string that represents the Integration object's creation_date
		CreationDate *time.Time `json:"creation_date,omitempty"`

		// IntegrationKey A system-generated string that represents the Integration object's integration_key
		IntegrationKey *string `json:"integration_key,omitempty"`

		// IntegrationType An integer that represents the Integration object's integration_type. 0 is alert and 1 is outbound.
		IntegrationType *int `json:"integration_type,omitempty"`

		// IsEnabled A boolean flag that represents whether an Integration is enabled or not
		IsEnabled *bool `json:"is_enabled,omitempty"`

		// Name A string that represents the Integration object's name
		Name *string `json:"name,omitempty"`

		// Service A system-generated string that represents the Service object's unique_id
		Service *string `json:"service,omitempty"`

		// Summary A string that represents the Integration object's summary
		Summary *string `json:"summary,omitempty"`

		// Team A system-generated string that represents the Team object's unique_id
		Team *string `json:"team,omitempty"`

		// UniqueID A system-generated string that represents the Integration object's unique_id
		UniqueID *string `json:"unique_id,omitempty"`
	} `json:"integration_object,omitempty"`

	// Message A string that represents the Event object's message
	Message *string      `json:"message,omitempty"`
	Notes   *[]EventNote `json:"notes,omitempty"`

	// Payload Additional payload of the Event object
	Payload *map[string]interface{} `json:"payload,omitempty"`

	// Summary A string that represents the Event object's summary
	Summary *string `json:"summary,omitempty"`

	// Suppressed A boolean flag that represents whether the Event object is suppressed or not
	Suppressed *bool `json:"suppressed,omitempty"`

	// UniqueID A system-generated string that represents the Event object's unique_id
	UniqueID *string     `json:"unique_id,omitempty"`
	Urls     *[]EventURL `json:"urls,omitempty"`
}

// EventImage Event Image object schema
type EventImage struct {
	// ImageSrc A string that represents the Event Image object's image_src
	ImageSrc *string `json:"image_src,omitempty"`

	// ImageText A string that represents the Event Image object's image_text
	ImageText *string `json:"image_text,omitempty"`

	// ImageURL A string that represents the Event Image object's image_url
	ImageURL *string `json:"image_url,omitempty"`
}

// EventNote Event Note object schema
type EventNote struct {
	// NoteText A string that represents the Event Note object's note_text
	NoteText *string `json:"note_text,omitempty"`

	// NoteTitle A string that represents the Event Note object's note_title
	NoteTitle *string `json:"note_title,omitempty"`
}

// EventPayload Payload schema for the Event object
type EventPayload struct {
	// AlertType A pre-defined string that represents the Event object's alert_type. Choices - `critical`, `acknowledged`, `resolved`, `error`, `warning`, `info`.
	AlertType string `json:"alert_type"`

	// EntityID A unique id for the alert. If not provided, the Zenduty API will create one.
	EntityID *string `json:"entity_id,omitempty"`

	// Message A string that represents the Event object's message
	Message string `json:"message"`

	// Payload A JSON payload containing additional information about the alert.
	Payload *map[string]interface{} `json:"payload,omitempty"`

	// Summary A string that represents the Event object's summary
	Summary *string `json:"summary,omitempty"`

	// Urls An array containing JSON schema of urls related to alerts.
	Urls *[]string `json:"urls,omitempty"`
}

// EventURL Event URL object schema
type EventURL struct {
	// LinkText A string that represents the Event URL object's link_text
	LinkText *string `json:"link_text,omitempty"`

	// LinkURL A string that represents the Event URL object's link_url
	LinkURL *string `json:"link_url,omitempty"`
}

// EventV3 Event object schema
type EventV3 struct {
	// Message success if alert processed successfully
	Message *string `json:"message,omitempty"`

	// TraceID unique id to trace an alert
	TraceID *string `json:"trace_id,omitempty"`
}

// GlobalRouter Global Router object schema
type GlobalRouter struct {
	// Account A system-generated string that represents the Account object's unique_id
	Account *string `json:"account,omitempty"`

	// Description A string that represents the Global Router object's description
	Description *string `json:"description,omitempty"`

	// IntegrationKey A system-generated string that represents the Integration object's integration_key
	IntegrationKey *string `json:"integration_key,omitempty"`

	// IsEnabled A boolean tag that represents weather the Global Router object's is enabled or not
	IsEnabled *bool `json:"is_enabled,omitempty"`

	// Name A string that represents the Global Router object's name
	Name *string `json:"name,omitempty"`

	// UniqueID A system-generated string that represents the Global Router object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// GlobalRouterPayload Payload schema for the Global Router object
type GlobalRouterPayload struct {
	// Description A string that represents the Global Router object's description
	Description *string `json:"description,omitempty"`

	// Name A string that represents the Global Router object's name
	Name *string `json:"name,omitempty"`
}

// GlobalRouterRule Global Router Rule object schema
type GlobalRouterRule struct {
	// Actions An array of Global Router Rule Action objects
	Actions *[]GlobalRouterRuleAction `json:"actions,omitempty"`

	// Name A string that represents the Global Router Rule object's name
	Name *string `json:"name,omitempty"`

	// Position An integer that represents the Global Router Rule object's position
	Position *int `json:"position,omitempty"`

	// Router A system-generated string that represents the Global Router object's unique_id
	Router *string `json:"router,omitempty"`

	// RuleJSON A string that represents the rule json of Global Router Rule object
	RuleJSON *string `json:"rule_json,omitempty"`

	// UniqueID A system-generated string that represents the Global Router Rule object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// GlobalRouterRuleAction Global Router Rule Action object schema
type GlobalRouterRuleAction struct {
	// ActionType An integer that represents the action type of the Global Router Rule Action object
	ActionType *int `json:"action_type,omitempty"`

	// IntegrationObj Integration object for Global Router Rule Action object
	IntegrationObj *struct {
		// Name A string that represents name of the Integration object
		Name *string `json:"name,omitempty"`

		// UniqueID A system generated string that represents the unique_id of the Integration object
		UniqueID *string `json:"unique_id,omitempty"`
	} `json:"integration_obj,omitempty"`

	// Service Service object for Global Router Rule Action object
	Service *struct {
		// Name A string that represents name of the Service object
		Name *string `json:"name,omitempty"`

		// UniqueID A system generated string that represents the unique_id of the Service object
		UniqueID *string `json:"unique_id,omitempty"`
	} `json:"service,omitempty"`

	// Team Team object for Global Router Rule Action object
	Team *struct {
		// Name A string that represents name of the Team object
		Name *string `json:"name,omitempty"`

		// UniqueID A system generated string that represents the unique_id of the Team object
		UniqueID *string `json:"unique_id,omitempty"`
	} `json:"team,omitempty"`

	// UniqueID A system generated string that represents the unique id of Global Router Rule object
	UniqueID *string `json:"unique_id,omitempty"`
}

// GlobalRouterRuleActionPayload Payload schema for Global Router Rule Action object
type GlobalRouterRuleActionPayload struct {
	// ActionType An integer that represents the action type of the Global Router Rule Action object
	ActionType *int `json:"action_type,omitempty"`

	// Integration A system generated string that represents the unique id of the integration object
	Integration *string `json:"integration,omitempty"`
}

// GlobalRouterRulePayload Payload schema for Global Router Rule object
type GlobalRouterRulePayload struct {
	// Actions An array of Global Router Rule Action objects
	Actions *[]GlobalRouterRuleActionPayload `json:"actions,omitempty"`

	// Name A string that represents the Global Router Rule object's name
	Name *string `json:"name,omitempty"`

	// RuleJSON A string that represents the rule json of Global Router Rule object
	RuleJSON *string `json:"rule_json,omitempty"`
}

// GlobalRouterRulePositionPayload Payload schema for the Global Router Rule position update object
type GlobalRouterRulePositionPayload struct {
	// Position An integer that represents that position of the Global Router Rule object
	Position *int `json:"position,omitempty"`

	// Rule A system generated string that represents the unique id of the Global Router Rule object
	Rule *string `json:"rule,omitempty"`
}

// IRPayload Payload schema for the Incident Role object
type IRPayload struct {
	// Description An arbitary string that represents the Incident Role object's description
	Description *string `json:"description,omitempty"`

	// Rank An integer that represents the Incident Role object's rank
	Rank *int `json:"rank,omitempty"`

	// Title An arbitary string that represents the Incident Role object's title
	Title string `json:"title"`
}

// Incident Incident object schema
type Incident struct {
	// AcknowledgedDate A formatted string that represents the Incident object's acknowledged_date
	AcknowledgedDate *time.Time `json:"acknowledged_date,omitempty"`

	// AssignedTo A system-generated string that represents the User object's username
	AssignedTo *string `json:"assigned_to,omitempty"`

	// AssignedToName A string that represents the User object's full name
	AssignedToName *string `json:"assigned_to_name,omitempty"`

	// ContextWindowEnd A formatted string that represents the Incident object's context_window_end date
	ContextWindowEnd *time.Time `json:"context_window_end,omitempty"`

	// ContextWindowStart A formatted string that represents the Incident object's context_window_start date
	ContextWindowStart *time.Time `json:"context_window_start,omitempty"`

	// CreationDate A formatted string that represents the Incident object's creation_date
	CreationDate *time.Time `json:"creation_date,omitempty"`

	// EscalationPolicy A system-generated string that represents the Escalation Policy object's unique_id
	EscalationPolicy *string `json:"escalation_policy,omitempty"`

	// EscalationPolicyObject Escalation Policy object schema for Incident object schema
	EscalationPolicyObject *struct {
		// Name A string that represents the Escalation Policy object's name
		Name *string `json:"name,omitempty"`

		// UniqueID A system-generated string that represents the Escalation Policy object's unique_id
		UniqueID *string `json:"unique_id,omitempty"`
	} `json:"escalation_policy_object,omitempty"`

	// IncidentKey A system-generated string that represents the Incident object's incident_key
	IncidentKey *string `json:"incident_key,omitempty"`

	// IncidentNumber An integer that represents the Incident object's incident_number
	IncidentNumber *int `json:"incident_number,omitempty"`
	MergedWith     *int `json:"merged_with,omitempty"`

	// ResolvedDate A formatted string that represents the Incident object's resolved_date
	ResolvedDate *time.Time `json:"resolved_date,omitempty"`

	// Service A system-generated string that represents the Service object's unique_id
	Service *string `json:"service,omitempty"`

	// ServiceObject Service object schema for Create and Update
	ServiceObject *ServicePostPut `json:"service_object,omitempty"`

	// SLA A system-generated string that represents the SLA object's unique_id
	SLA *string `json:"sla,omitempty"`

	// SLAObject SLA object schema for Incident object schema
	SLAObject *struct {
		// AcknowledgeTime An integer that represents the SLA object's acknowledge_time
		AcknowledgeTime *int `json:"acknowledge_time,omitempty"`

		// CreationDate A formatted string that represents the SLA object's creation_date
		CreationDate *time.Time `json:"creation_date,omitempty"`

		// IsActive A boolean flag that represents whether the SLA object is active or not.
		IsActive *bool `json:"is_active,omitempty"`

		// Name A string that represents the SLA object's name
		Name *string `json:"name,omitempty"`

		// ResolveTime An integer that represents the SLA object's resolve_time
		ResolveTime *int `json:"resolve_time,omitempty"`

		// UniqueID A system-generated string that represents the SLA object's unique_id
		UniqueID *string `json:"unique_id,omitempty"`
	} `json:"sla_object,omitempty"`

	// Status An integer that represents the Incident object's status. 1 is triggered, 2 is acknowledged and 3 is resolved
	Status *int `json:"status,omitempty"`

	// Summary A string that represents the Incident object's summary
	Summary *string `json:"summary,omitempty"`

	// Tags An array of Incident Tag objects
	Tags *[]struct {
		// Color A string that represents the Tag object's color
		Color *string `json:"color,omitempty"`

		// CreationDate A formatted string that represents the Tag object's creation_date
		CreationDate *time.Time `json:"creation_date,omitempty"`

		// Incident An integer that represents the the Incident object's incident_number
		Incident *int `json:"incident,omitempty"`

		// Name A string that represents the Tag object's name
		Name *string `json:"name,omitempty"`

		// TagID A system-generated string that represents the Tag object's unique_id
		TagID *string `json:"tag_id,omitempty"`

		// TeamTag A system-generated string that represents the Tag object's unique_id
		TeamTag *string `json:"team_tag,omitempty"`

		// UniqueID A system-generated string that represents the Incident Tag object's unique_id
		UniqueID *string `json:"unique_id,omitempty"`
	} `json:"tags,omitempty"`

	// TeamPriority A system-generated string that represents the Priority object's unique_id
	TeamPriority *string `json:"team_priority,omitempty"`

	// TeamPriorityObject Priority object schema for Incident object schema
	TeamPriorityObject *struct {
		// Color A string that represents the Priority object's color
		Color *string `json:"color,omitempty"`

		// Description A string that represents the Priority object's description
		Description *string `json:"description,omitempty"`

		// Name A string that represents the Priority object's name
		Name *string `json:"name,omitempty"`

		// UniqueID A system-generated string that represents the Priority object's unique_id
		UniqueID *string `json:"unique_id,omitempty"`
	} `json:"team_priority_object,omitempty"`

	// Title A string that represents the Incident object's title
	Title *string `json:"title,omitempty"`

	// UniqueID A system-generated string that represents the Incident object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`

	// Urgency A integer that represents the Incident object's urgency 0 for low and 1 for high
	Urgency *int `json:"urgency,omitempty"`
}

// IncidentAlert Incident Alert object schema
type IncidentAlert struct {
	// AlertType An integer that represents the Incident Alert object's type. 0 is info, 1 is warning, 2 is error, 3 is critical, 4 is acknowledged and 5 is resolved
	AlertType *int `json:"alert_type,omitempty"`

	// CreationDate A formatted string that represents the Incident Alert object's creation_date
	CreationDate *time.Time `json:"creation_date,omitempty"`

	// EntityID A system-generated string that represents the Incident Alert object's entity_id
	EntityID *string       `json:"entity_id,omitempty"`
	Images   *[]EventImage `json:"images,omitempty"`

	// Incident An integer that represents the Incident object's incident_number
	Incident *int `json:"incident,omitempty"`

	// Integration A system-generated string that represents the Integration object's unique_id
	Integration *string `json:"integration,omitempty"`

	// IntegrationObject Integration object schema
	IntegrationObject *Integration `json:"integration_object,omitempty"`

	// Message A string that represents the Incident Alert object's message
	Message *string      `json:"message,omitempty"`
	Notes   *[]EventNote `json:"notes,omitempty"`

	// Summary A string that represents the Incident Alert object's summary
	Summary *string `json:"summary,omitempty"`

	// Suppressed A boolean flag that represents whether the Incident Alert object is suppressed or not.
	Suppressed *bool `json:"suppressed,omitempty"`

	// UniqueID A system-generated string that represents the Incident Alert object's unique_id
	UniqueID *string     `json:"unique_id,omitempty"`
	Urls     *[]EventURL `json:"urls,omitempty"`
}

// IncidentFilter Incident filter object schema
type IncidentFilter struct {
	// Count Please note -> this filed will always be null and will be removed in future version. For pagination, please use the `next` and `previous` fields.
	Count nullable.Nullable[int] `json:"count,omitempty"`

	// Next Link to the next page.
	Next nullable.Nullable[string] `json:"next,omitempty"`

	// Previous Link to the previous page.
	Previous nullable.Nullable[string] `json:"previous,omitempty"`

	// Results A list of filtered incident objects.
	Results *[]IncidentFilterObject `json:"results,omitempty"`
}

// IncidentFilterObject Incident object schema
type IncidentFilterObject struct {
	// AcknowledgedDate A formatted string that represents the Incident object's acknowledged_date
	AcknowledgedDate *time.Time `json:"acknowledged_date,omitempty"`

	// AssignedTo A system-generated string that represents the User object's username
	AssignedTo *string `json:"assigned_to,omitempty"`

	// AssignedToName A string that represents the User object's full name
	AssignedToName *string `json:"assigned_to_name,omitempty"`

	// CreationDate A formatted string that represents the Incident object's creation_date
	CreationDate *time.Time `json:"creation_date,omitempty"`

	// IncidentNumber An integer that represents the Incident object's incident_number
	IncidentNumber *int `json:"incident_number,omitempty"`

	// IsChildIncident A boolean flag that represents whether the Incident has a child incident or not.
	IsChildIncident *bool `json:"is_child_incident,omitempty"`

	// IsParentIncident A boolean flag that represents whether the Incident has a parent incident or not.
	IsParentIncident *bool `json:"is_parent_incident,omitempty"`

	// Postmortems A list of postmortems objects.
	Postmortems *[]IncidentFilterPostmortemObject `json:"postmortems,omitempty"`

	// ResolvedDate A formatted string that represents the Incident object's resolved_date
	ResolvedDate *time.Time `json:"resolved_date,omitempty"`

	// ServiceObject Service object schema for Create and Update
	ServiceObject *ServicePostPut `json:"service_object,omitempty"`

	// SLA A system-generated string that represents the SLA object's unique_id
	SLA *string `json:"sla,omitempty"`

	// SLAObject SLA object schema for Incident object schema
	SLAObject *struct {
		// AcknowledgeTime An integer that represents the SLA object's acknowledge_time
		AcknowledgeTime *int `json:"acknowledge_time,omitempty"`

		// CreationDate A formatted string that represents the SLA object's creation_date
		CreationDate *time.Time `json:"creation_date,omitempty"`

		// IsActive A boolean flag that represents whether the SLA object is active or not.
		IsActive *bool `json:"is_active,omitempty"`

		// Name A string that represents the SLA object's name
		Name *string `json:"name,omitempty"`

		// ResolveTime An integer that represents the SLA object's resolve_time
		ResolveTime *int `json:"resolve_time,omitempty"`

		// UniqueID A system-generated string that represents the SLA object's unique_id
		UniqueID *string `json:"unique_id,omitempty"`
	} `json:"sla_object,omitempty"`

	// SnoozeTime A formatted string that represents the Incident object's snooze_time
	SnoozeTime nullable.Nullable[time.Time] `json:"snooze_time,omitempty"`

	// SnoozedTill A formatted string that represents till when the Incident object's will be snoozed
	SnoozedTill nullable.Nullable[time.Time] `json:"snoozed_till,omitempty"`

	// Status An integer that represents the Incident object's status. 1 is triggered, 2 is acknowledged and 3 is resolved
	Status *int `json:"status,omitempty"`

	// Tags An array of Incident Tag objects
	Tags *[]struct {
		// Color A string that represents the Tag object's color
		Color *string `json:"color,omitempty"`

		// CreationDate A formatted string that represents the Tag object's creation_date
		CreationDate *time.Time `json:"creation_date,omitempty"`

		// Incident An integer that represents the the Incident object's incident_number
		Incident *int `json:"incident,omitempty"`

		// Name A string that represents the Tag object's name
		Name *string `json:"name,omitempty"`

		// TagID A system-generated string that represents the Tag object's unique_id
		TagID *string `json:"tag_id,omitempty"`

		// TeamTag A system-generated string that represents the Tag object's unique_id
		TeamTag *string `json:"team_tag,omitempty"`

		// UniqueID A system-generated string that represents the Incident Tag object's unique_id
		UniqueID *string `json:"unique_id,omitempty"`
	} `json:"tags,omitempty"`

	// TeamPriorityObject Priority object schema for Incident object schema
	TeamPriorityObject *struct {
		// Color A string that represents the Priority object's color
		Color *string `json:"color,omitempty"`

		// Description A string that represents the Priority object's description
		Description *string `json:"description,omitempty"`

		// Name A string that represents the Priority object's name
		Name *string `json:"name,omitempty"`

		// UniqueID A system-generated string that represents the Priority object's unique_id
		UniqueID *string `json:"unique_id,omitempty"`
	} `json:"team_priority_object,omitempty"`

	// Title A string that represents the Incident object's title
	Title *string `json:"title,omitempty"`

	// UniqueID A system-generated string that represents the Incident object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// IncidentFilterPayload Payload schema for the Incident object
type IncidentFilterPayload struct {
	// AllTeams This query parameter can be `0` or `1`. To filter incidents based on all teams use `1` and to filter incidents based on the teams the requesting user belongs to, use `0`. example - `all_teams=1`
	AllTeams *int `json:"all_teams,omitempty"`

	// EscalationPolicyIds A list of escalation policy unique ids
	EscalationPolicyIds *[]string `json:"escalation_policy_ids,omitempty"`

	// FromDate Represents from_date and filters incidents whose creation_date is greater than the specified from_date. example - `from_date="2023-02-01"`
	FromDate *string `json:"from_date,omitempty"`

	// PostmortemFilter An integer that represents weather the postmortem is attached to the incident or not
	PostmortemFilter *int `json:"postmortem_filter,omitempty"`

	// PriorityIds A list of Team Priority unique ids
	PriorityIds *[]string `json:"priority_ids,omitempty"`

	// PriorityName Name of the Team priroty object
	PriorityName *string `json:"priority_name,omitempty"`

	// ServiceIds A list of Service unique ids
	ServiceIds *[]string `json:"service_ids,omitempty"`

	// SLAIds A list of Team SLA unique ids
	SLAIds *[]string `json:"sla_ids,omitempty"`

	// Status Status of the Incident object. For open incidents(triggered and acknowledged) use `-1`, for all incidents(triggered, acknowledged and resolved) use `0`, for triggered incidents use `1`, for acknowledged incidents use `2` and for resolved incidents use `3`. example - `status=1`
	Status *int `json:"status,omitempty"`

	// TagIds A list of Team Tag unique ids
	TagIds *[]string `json:"tag_ids,omitempty"`

	// TeamIds A list of Team unique ids
	TeamIds *[]string `json:"team_ids,omitempty"`

	// ToDate Represents to_date and filters incidents whose creation_date is lesser than the specified to_date. example - `to_date="2023-02-01"`
	ToDate *string `json:"to_date,omitempty"`

	// UserIds A list of User usernames
	UserIds *[]string `json:"user_ids,omitempty"`
}

// IncidentFilterPostmortemObject Postmortem object schema
type IncidentFilterPostmortemObject struct {
	// Title A string that represents the Postmortem object's title
	Title *string `json:"title,omitempty"`

	// UniqueID A system-generated string that represents the Postmortem object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// IncidentNote Incident Note object schema
type IncidentNote struct {
	// CreationDate A formatted string that represents the Incident Note object's creation_date
	CreationDate *time.Time `json:"creation_date,omitempty"`

	// Incident An integer that represents the Incident object's incident_number
	Incident *int `json:"incident,omitempty"`

	// Note A string that represents the Incident Note object's note data
	Note *string `json:"note,omitempty"`

	// UniqueID A system-generated string that represents the Incident Note object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`

	// User A system-generated string that represents the User object's username
	User *string `json:"user,omitempty"`

	// UserName A string that represents the User object's full name
	UserName *string `json:"user_name,omitempty"`
}

// IncidentNotePayload Payload schema for the Incident Note object
type IncidentNotePayload struct {
	// Note A string that represents the Incident Note object's note data
	Note *string `json:"note,omitempty"`
}

// IncidentPayload Payload schema for the Incident object
type IncidentPayload struct {
	// AssignedTo A system-generated string that represents the User object's username
	AssignedTo *string `json:"assigned_to,omitempty"`

	// EscalationPolicy A system-generated string that represents the Escalation Policy object's unique_id
	EscalationPolicy *string `json:"escalation_policy,omitempty"`

	// Service A system-generated string that represents the Service object's unique_id
	Service string `json:"service"`

	// SLA A system-generated string that represents the SLA object's unique_id
	SLA *string `json:"sla,omitempty"`

	// Status An integer that represents the Incident object's status. 1 is triggered, 2 is acknowledged and 3 is resolved
	Status *int `json:"status,omitempty"`

	// Summary A string that represents the Incident object's summary
	Summary *string `json:"summary,omitempty"`

	// TeamPriority A system-generated string that represents the Priority object's unique_id
	TeamPriority *string `json:"team_priority,omitempty"`

	// Title A string that represents the Incident object's title
	Title string `json:"title"`
}

// IncidentResponderPayload defines model for IncidentResponderPayload.
type IncidentResponderPayload struct {
	// User Unique identifier of the User object
	User *string `json:"user,omitempty"`
}

// IncidentResponderResponse defines model for IncidentResponderResponse.
type IncidentResponderResponse struct {
	// Count Total count of Incident Responders
	Count *int `json:"count,omitempty"`

	// Next URL to the next page of results, if any
	Next *string `json:"next,omitempty"`

	// Previous URL to the previous page of results, if any
	Previous *string `json:"previous,omitempty"`
	Results  *[]struct {
		// CreationDate Date and time when the Incident Responder was added
		CreationDate *time.Time `json:"creation_date,omitempty"`

		// Incident Unique identifier of the Incident
		Incident *int `json:"incident,omitempty"`

		// Message Message from the Incident Responder
		Message *string `json:"message,omitempty"`

		// Subject Subject of the Incident Responder's message
		Subject *string `json:"subject,omitempty"`

		// UniqueID Unique identifier of the Incident Responder
		UniqueID *string `json:"unique_id,omitempty"`

		// User Unique identifier of the User
		User *string `json:"user,omitempty"`

		// UserName Name of the Incident Responder
		UserName *string `json:"user_name,omitempty"`
	} `json:"results,omitempty"`
}

// IncidentResponders Incident Responders object schema
type IncidentResponders struct {
	// Incident A system-generated string that represents the Incident object's unique_id
	Incident *string `json:"incident,omitempty"`

	// UniqueID A system-generated string that represents the Incident Responders object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`

	// User A system-generated string that represents the User object's username
	User *string `json:"user,omitempty"`
}

// IncidentRoleGet Incident Role object schema
type IncidentRoleGet struct {
	// CreationDate A formatted string that represents the Incident Role object's creation_date
	CreationDate *time.Time `json:"creation_date,omitempty"`

	// Description An arbitary string that represents the Incident Role object's description
	Description *string `json:"description,omitempty"`

	// Rank An integer that represents the Incident Role object's rank
	Rank *int `json:"rank,omitempty"`

	// Team A system-generated string that represents the Team object's unique_id
	Team *string `json:"team,omitempty"`

	// Title An arbitary string that represents the Incident Role object's title
	Title *string `json:"title,omitempty"`

	// UniqueID A system-generated string that represents the Incident Role object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// IncidentRolePostPut Incident Role object schema
type IncidentRolePostPut struct {
	// CreationDate A formatted string that represents the Incident Role object's creation_date
	CreationDate *time.Time `json:"creation_date,omitempty"`

	// Description An arbitary string that represents the Incident Role object's description
	Description *string `json:"description,omitempty"`

	// Rank An integer that represents the Incident Role object's rank
	Rank *int `json:"rank,omitempty"`

	// Title An arbitary string that represents the Incident Role object's title
	Title *string `json:"title,omitempty"`

	// UniqueID A system-generated string that represents the Incident Role object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// IncidentTag Incident Tag object schema
type IncidentTag struct {
	// Color A string that represents the Incident Tag object's color
	Color *string `json:"color,omitempty"`

	// CreationDate A formatted string that represents the Incident Tag object's creation_date
	CreationDate *time.Time `json:"creation_date,omitempty"`

	// Incident An integer that represents the Incident object's incident_number
	Incident *int `json:"incident,omitempty"`

	// Name A string that represents the Incident Tag object's name
	Name *string `json:"name,omitempty"`

	// TagID A system-generated string that represents the Team Tag object's unique_id
	TagID *string `json:"tag_id,omitempty"`

	// TeamTag A system-generated string that represents the Team Tag object's unique_id
	TeamTag *string `json:"team_tag,omitempty"`

	// UniqueID A system-generated string that represents the Incident Tag object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// IncidentTagPayload Payload schema for the Incident Tag object
type IncidentTagPayload struct {
	// TeamTag A system-generated string that represents the Team Tag object's unique_id
	TeamTag *string `json:"team_tag,omitempty"`
}

// Integration Integration object schema
type Integration struct {
	// Application A system-generated string that represents the Application object's unique_id
	Application *string `json:"application,omitempty"`

	// ApplicationReference Application object schema
	ApplicationReference *Application `json:"application_reference,omitempty"`

	// CreateIncidentsFor An integer that represents the type of the Incidents this Integration object will create. 0 is do not create incidents. 1 is critical, 2 is critical and errors, and 3 is critical, errors and warnings.
	CreateIncidentsFor *int `json:"create_incidents_for,omitempty"`

	// CreatedBy A system-generated string that represents the User object's username
	CreatedBy *string `json:"created_by,omitempty"`

	// CreationDate A formatted string that represents the Integration object's creation_date
	CreationDate *time.Time `json:"creation_date,omitempty"`

	// DefaultUrgency An integer that represents the Integration object's default_urgency. 0 is low and 1 is high.
	DefaultUrgency *int `json:"default_urgency,omitempty"`

	// IntegrationKey A system-generated string that represents the Integration object's integration_key
	IntegrationKey *string `json:"integration_key,omitempty"`

	// IntegrationType An integer that represents the Integration object's integration_type. 0 is alert and 1 is outbound.
	IntegrationType *int `json:"integration_type,omitempty"`

	// IsEnabled A boolean flag that represents whether an Integration is enabled or not
	IsEnabled *bool `json:"is_enabled,omitempty"`

	// Name A string that represents the Integration object's name
	Name *string `json:"name,omitempty"`

	// Service A system-generated string that represents the Service object's unique_id
	Service *string `json:"service,omitempty"`

	// Summary A string that represents the Integration object's summary
	Summary *string `json:"summary,omitempty"`

	// UniqueID A system-generated string that represents the Integration object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`

	// WebhookURL A system-generated string that represents the Integration object's webhook url
	WebhookURL *string `json:"webhook_url,omitempty"`
}

// IntegrationAlert Integration Alert object schema
type IntegrationAlert struct {
	// AlertType An integer that represents the Integration Alert object's alert_type. 0 is for info, 1 is for warning, 2 for error, 3 is  for critical, 4 is for acknowledged and 5 is for resolved.
	AlertType *int `json:"alert_type,omitempty"`

	// CreationDate A formatted string that represents the Integration Alert object's creation_date
	CreationDate *time.Time `json:"creation_date,omitempty"`

	// EntityID A system-generated string that represents the Integration Alert object's entitiy_id
	EntityID *string       `json:"entity_id,omitempty"`
	Images   *[]EventImage `json:"images,omitempty"`

	// Incident An integer that represents the Incident object's incident_number
	Incident *int `json:"incident,omitempty"`

	// Integration A string that represents the Integration object's unique_id
	Integration *string `json:"integration,omitempty"`

	// IntegrationObject Integration object schema for Integration Alert object schema
	IntegrationObject *struct {
		// CreationDate A formatted string that represents the Integration object's creation_date
		CreationDate *time.Time `json:"creation_date,omitempty"`

		// IntegrationKey A system-generated string that represents the Integration object's integration_key
		IntegrationKey *string `json:"integration_key,omitempty"`

		// IntegrationType An integer that represents the Integration object's integration_type. 0 is alert and 1 is outbound.
		IntegrationType *int `json:"integration_type,omitempty"`

		// IsEnabled A boolean flag that represents whether an Integration is enabled or not
		IsEnabled *bool `json:"is_enabled,omitempty"`

		// Name A string that represents the Integration object's name
		Name *string `json:"name,omitempty"`

		// Service A system-generated string that represents the Service object's unique_id
		Service *string `json:"service,omitempty"`

		// Summary A string that represents the Integration object's summary
		Summary *string `json:"summary,omitempty"`

		// Team A system-generated string that represents the Team object's unique_id
		Team *string `json:"team,omitempty"`

		// UniqueID A system-generated string that represents the Integration object's unique_id
		UniqueID *string `json:"unique_id,omitempty"`
	} `json:"integration_object,omitempty"`

	// Message A string that represents the Integration Alert object's message
	Message *string      `json:"message,omitempty"`
	Notes   *[]EventNote `json:"notes,omitempty"`

	// Summary A string that represents the Integration Alert object's summary
	Summary *string `json:"summary,omitempty"`

	// Suppressed A boolean flag that represents whether the Integration Alert object is suppressed or not
	Suppressed *bool `json:"suppressed,omitempty"`

	// UniqueID A system-generated string that represents the Integration Alert object's unique_id
	UniqueID *string     `json:"unique_id,omitempty"`
	Urls     *[]EventURL `json:"urls,omitempty"`
}

// IntegrationKeyRegenerationPayload Payload schema for the regenerating the key of the Integration
type IntegrationKeyRegenerationPayload struct {
	// IntegrationUniqueID A string that represents the relevant Integration's unique ID
	IntegrationUniqueID *string `json:"integration_unique_id,omitempty"`
}

// IntegrationPayload Payload schema for the Integration object
type IntegrationPayload struct {
	// Application A system-generated string that represents the Application object's unique_id. To get application id, vist https://www.zenduty.com/api/account/applications/ and get unique_id of the application.
	Application string `json:"application"`

	// CreateIncidentsFor An integer that represents the type of the Incidents this Integration object will create. 0 is do not create incidents. 1 is critical, 2 is critical and errors, and 3 is critical, errors and warnings.
	CreateIncidentsFor *int `json:"create_incidents_for,omitempty"`

	// DefaultUrgency An integer that represents the Integration object's default_urgency. 0 is low and 1 is high.
	DefaultUrgency *int `json:"default_urgency,omitempty"`

	// IntegrationType An integer that represents the Integration object's integration_type. 0 is alert and 1 is outbound.
	IntegrationType *int `json:"integration_type,omitempty"`

	// IsEnabled A boolean flag that represents whether an Integration is enabled or not
	IsEnabled *bool `json:"is_enabled,omitempty"`

	// Name A string that represents the Integration object's name
	Name *string `json:"name,omitempty"`

	// Summary A string that represents the Integration object's summary
	Summary *string `json:"summary,omitempty"`
}

// InviteUserPayload Payload schema for the Invite User object
type InviteUserPayload struct {
	// Team A system-generated string that represents the Team object's unique_id
	Team string `json:"team"`

	// UserDetail User object schema
	UserDetail struct {
		// Email A string that represents the User object's email
		Email *string `json:"email,omitempty"`

		// FirstName A string that represents the User object's first_name
		FirstName *string `json:"first_name,omitempty"`

		// LastName A string that represents the User object's last_name
		LastName *string `json:"last_name,omitempty"`

		// Role An integer that represents the Account Member object's role
		Role *int `json:"role,omitempty"`
	} `json:"user_detail"`
}

// PostmortemGet Postmortem object schema
type PostmortemGet struct {
	// AmazonLink An hyperlink string to AWS
	AmazonLink *string `json:"amazon_link,omitempty"`

	// Author A system-generated string that represents the User object's username
	Author *string `json:"author,omitempty"`

	// AuthorName A string that represents the User object's full name
	AuthorName *string `json:"author_name,omitempty"`

	// CreationDate A formatted string that represents the Postmortem object's creation_date
	CreationDate *time.Time `json:"creation_date,omitempty"`

	// DownloadStatus An integer that represents the Postmortem object's download_status. 1 is uninitiated, 2 is initiated, 3 is finished and 4 is error
	DownloadStatus *int `json:"download_status,omitempty"`

	// Incidents An array of Postmortem Incident objects
	Incidents *[]struct {
		// Incident Incident object schema for a Postmortem object schema
		Incident *struct {
			// IncidentNumber An integer that represents the Incident object's incident_number
			IncidentNumber *int `json:"incident_number,omitempty"`

			// Title A string that represents the Incident object's title
			Title *string `json:"title,omitempty"`

			// UniqueID A system-generated string that represents the Incident object's unique_id
			UniqueID *string `json:"unique_id,omitempty"`
		} `json:"incident,omitempty"`

		// UniqueID A system-generated string that represents the Postmortem Incident object's unique_id
		UniqueID *string `json:"unique_id,omitempty"`
	} `json:"incidents,omitempty"`

	// PostmortemData A string that represents the Postmortem object's postmortem_data
	PostmortemData *string `json:"postmortem_data,omitempty"`

	// Status A string that represents the Postmortem object's status
	Status *string `json:"status,omitempty"`

	// Title A string that represents the Postmortem object's title
	Title *string `json:"title,omitempty"`

	// UniqueID A system-generated string that represents the Postmortem object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// PostmortemPayload Payload schema for the Postmortem object
type PostmortemPayload struct {
	// Author A system-generated string that represents the User object's username
	Author string `json:"author"`

	// DownloadStatus An integer that represents the Postmortem object's download_status. 1 is uninitiated, 2 is initiated, 3 is finished and 4 is error
	DownloadStatus *int `json:"download_status,omitempty"`

	// Incidents An array of Postmortem Incident objects
	Incidents []struct {
		// Incident Incident object schema for a Postmortem object schema
		Incident *struct {
			// IncidentNumber An integer that represents the Incident object's incident_number
			IncidentNumber *int `json:"incident_number,omitempty"`

			// Title A string that represents the Incident object's title
			Title *string `json:"title,omitempty"`

			// UniqueID A system-generated string that represents the Incident object's unique_id
			UniqueID *string `json:"unique_id,omitempty"`
		} `json:"incident,omitempty"`
	} `json:"incidents"`

	// PostmortemData A string that represents the Postmortem object's postmortem_data
	PostmortemData *string `json:"postmortem_data,omitempty"`

	// Status A string that represents the Postmortem object's status
	Status *string `json:"status,omitempty"`

	// Title A string that represents the Postmortem object's title
	Title *string `json:"title,omitempty"`
}

// PostmortemPostPut Postmortem object schema
type PostmortemPostPut struct {
	// Author A system-generated string that represents the User object's username
	Author *string `json:"author,omitempty"`

	// AuthorName A string that represents the User object's full name
	AuthorName *string `json:"author_name,omitempty"`

	// DownloadStatus An integer that represents the Postmortem object's download_status. 1 is uninitiated, 2 is initiated, 3 is finished and 4 is error
	DownloadStatus *int `json:"download_status,omitempty"`

	// Incidents An array of Postmortem Incident objects
	Incidents *[]struct {
		// Incident A system-generated string that represents the Incident object's unique_id
		Incident *string `json:"incident,omitempty"`

		// UniqueID A system-generated string that represents the Postmortem Incident object's unique_id
		UniqueID *string `json:"unique_id,omitempty"`
	} `json:"incidents,omitempty"`

	// PostmortemData A string that represents the Postmortem object's postmortem_data
	PostmortemData *string `json:"postmortem_data,omitempty"`

	// Status A string that represents the Postmortem object's status
	Status *string `json:"status,omitempty"`

	// Title A string that represents the Postmortem object's title
	Title *string `json:"title,omitempty"`

	// UniqueID A system-generated string that represents the Postmortem object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// PriorityGet Priority object schema
type PriorityGet struct {
	// Color A string that represents the Priority object's color
	Color *string `json:"color,omitempty"`

	// CreationDate A formatted string that represents the Priority object's creation_date
	CreationDate *time.Time `json:"creation_date,omitempty"`

	// Description A string that represents the Priority object's description
	Description *string `json:"description,omitempty"`

	// Name A string that represents the Priority object's name
	Name *string `json:"name,omitempty"`

	// Team A system-generated string that represents the Team object's unique_id
	Team *string `json:"team,omitempty"`

	// UniqueID A system-generated string that represents the Priority object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// PriorityPayload Payload schema for the Priority object
type PriorityPayload struct {
	// Color A string that represents the Priority object's color
	Color *string `json:"color,omitempty"`

	// Description A string that represents the Priority object's description
	Description *string `json:"description,omitempty"`

	// Name A string that represents the Priority object's name
	Name *string `json:"name,omitempty"`
}

// PriorityPostPut Priority object schema
type PriorityPostPut struct {
	// Color A string that represents the Priority object's color
	Color *string `json:"color,omitempty"`

	// CreationDate A formatted string that represents the Priority object's creation_date
	CreationDate *time.Time `json:"creation_date,omitempty"`

	// Description A string that represents the Priority object's description
	Description *string `json:"description,omitempty"`

	// Name A string that represents the Priority object's name
	Name *string `json:"name,omitempty"`

	// Team An integer that represents the Team object's id
	Team *int `json:"team,omitempty"`

	// UniqueID A system-generated string that represents the Priority object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// SLAGet SLA object schema
type SLAGet struct {
	// AcknowledgeTime An integer that represents the SLA object's acknowledge_time
	AcknowledgeTime *int `json:"acknowledge_time,omitempty"`

	// CreationDate A formatted string that represents the SLA object's creation_date
	CreationDate *time.Time `json:"creation_date,omitempty"`

	// IsActive A boolean flag that represents whether the SLA object is active or not
	IsActive *bool `json:"is_active,omitempty"`

	// Name An arbitary string that represents the SLA object's name
	Name *string `json:"name,omitempty"`

	// ResolveTime An integer that represents the SLA object's resolve_time
	ResolveTime *int `json:"resolve_time,omitempty"`

	// UniqueID A system-generated string that represents the SLA object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// SLAPayload Payload schema for the SLA object
type SLAPayload struct {
	// AcknowledgeTime An integer that represents the SLA object's acknowledge_time
	AcknowledgeTime *int `json:"acknowledge_time,omitempty"`

	// Escalations An array of SLA Escalation objects
	Escalations []SLAEscalation `json:"escalations"`

	// IsActive A boolean flag that represents whether the SLA object is active or not
	IsActive *bool `json:"is_active,omitempty"`

	// Name An arbitary string that represents the SLA object's name
	Name *string `json:"name,omitempty"`

	// ResolveTime An integer that represents the SLA object's resolve_time
	ResolveTime *int `json:"resolve_time,omitempty"`
}

// SLAPostPut SLA object schema
type SLAPostPut struct {
	// AcknowledgeTime An integer that represents the SLA object's acknowledge_time
	AcknowledgeTime *int `json:"acknowledge_time,omitempty"`

	// Conditions Additional conditions object to create or update the SLA object
	Conditions *map[string]interface{} `json:"conditions,omitempty"`

	// Description An arbitary string that represents the SLA object's description
	Description *string `json:"description,omitempty"`

	// Escalations An array of SLA Escalation object
	Escalations *[]SLAEscalation `json:"escalations,omitempty"`

	// IsActive A boolean flag that represents whether the SLA object is active or not
	IsActive *bool `json:"is_active,omitempty"`

	// Name An arbitary string that represents the SLA object's name
	Name *string `json:"name,omitempty"`

	// ResolveTime An integer that represents the SLA object's resolve_time
	ResolveTime *int `json:"resolve_time,omitempty"`

	// Team An integer that respresents the Team object's id
	Team *int `json:"team,omitempty"`

	// UniqueID A system-generated string that represents the SLA object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// SLAEscalation SLA Escalation object schema
type SLAEscalation struct {
	// Responder An array of Responder objects
	Responder *[]struct {
		// User A system-generated string that represents the User object's username
		User *string `json:"user,omitempty"`
	} `json:"responder,omitempty"`

	// Time An integer that represents the SLA Escalation object's time. The value will be -ve before sla breach and +ve after sla breach
	Time *int `json:"time,omitempty"`

	// Type An integer that represents the SLA Escalation object's type. 1 for acknowledge SLA escalation and 2 for resolve SLA escalation
	Type *int `json:"type,omitempty"`

	// UniqueID A system-generated string that represents the SLA Escalation object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// Schedule Schedule object schema
type Schedule struct {
	// Description A string that represents the Schedule object's description
	Description *string `json:"description,omitempty"`

	// Layers An array of Schedule Layer objects
	Layers *[]ScheduleLayer `json:"layers,omitempty"`

	// Name A string that represents the Schedule object's name
	Name *string `json:"name,omitempty"`

	// Overrides An array of Schedule Overrides objects
	Overrides *[]ScheduleOverride `json:"overrides,omitempty"`

	// Summary A string that represents the Schedule object's summary
	Summary *string `json:"summary,omitempty"`

	// Team A system-generated string that represents the Team object's unique_id
	Team *string `json:"team,omitempty"`

	// TimeZone A formatted string that represents the Schedule object's time zone. You can check out the time zone list here https://timezonedb.com/time-zones
	TimeZone *string `json:"time_zone,omitempty"`

	// UniqueID A system-generated string that represents the Schedule object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// ScheduleLayer Schedule Layer object schema
type ScheduleLayer struct {
	// IsActive A boolean flag that represents whether the Schedule Layer is active or not
	IsActive *bool `json:"is_active,omitempty"`

	// LastEdited A formatted string that represents the Schedule Layer object's last_edited
	LastEdited *time.Time `json:"last_edited,omitempty"`

	// Name A string that represents the Schedule Layer object's name
	Name *string `json:"name,omitempty"`

	// RestrictionType An integer that represents Schedule Layer object's restriction_type. 0 for no restriction, 1 for daily restrictions and 2 for weekly restrictions
	RestrictionType *int `json:"restriction_type,omitempty"`

	// Restrictions An array of Schedule Layer Restriction objects
	Restrictions *[]ScheduleLayerRestriction `json:"restrictions,omitempty"`

	// RotationEndTime A formatted string that represents the Schedule Layer object's rotation_end_time
	RotationEndTime *time.Time `json:"rotation_end_time,omitempty"`

	// RotationStartTime A formatted string that represents the Schedule Layer object's rotation_start_time
	RotationStartTime *time.Time `json:"rotation_start_time,omitempty"`

	// ShiftLength An integer that represents the Schedule Layer object's shift_length
	ShiftLength *int `json:"shift_length,omitempty"`

	// UniqueID A system-generated string that represents the Schedule Layer object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`

	// Users An array of Schedule Layer User objects
	Users *[]ScheduleLayerUser `json:"users,omitempty"`
}

// ScheduleLayerPayload Schedule Layer Payload object schema
type ScheduleLayerPayload struct {
	// Name A string that represents the Schedule Layer object's name
	Name *string `json:"name,omitempty"`

	// RestrictionType An integer that represents Schedule Layer object's restriction_type. 0 for no restriction, 1 for daily restrictions and 2 for weekly restrictions
	RestrictionType *int `json:"restriction_type,omitempty"`

	// Restrictions An array of Schedule Layer Restriction objects
	Restrictions *[]ScheduleLayerRestrictionPayload `json:"restrictions,omitempty"`

	// RotationEndTime A formatted string that represents the Schedule Layer object's rotation_end_time
	RotationEndTime *time.Time `json:"rotation_end_time,omitempty"`

	// RotationStartTime A formatted string that represents the Schedule Layer object's rotation_start_time
	RotationStartTime *time.Time `json:"rotation_start_time,omitempty"`

	// ShiftLength An integer that represents the Schedule Layer object's shift_length
	ShiftLength *int `json:"shift_length,omitempty"`

	// Users An array of Schedule Layer User objects
	Users *[]ScheduleLayerUserPayload `json:"users,omitempty"`
}

// ScheduleLayerRestriction Schedule Layer Restriction object schema
type ScheduleLayerRestriction struct {
	// Duration An integer that represents the Schedule Layer Restriction objects's duration in seconds
	Duration *int `json:"duration,omitempty"`

	// StartDayOfWeek An integer that represents the Schedule Layer Restriction objects's start_day_of_week. 0 is daily and 1-7 is sunday to saturday
	StartDayOfWeek *int `json:"start_day_of_week,omitempty"`

	// StartTimeOfDay A formatted string that represents the Schedule Layer Restriction objects's start_time_of_day
	StartTimeOfDay *string `json:"start_time_of_day,omitempty"`

	// UniqueID A system-generated string that represents the Schedule Layer Restriction objects's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// ScheduleLayerRestrictionPayload Schedule Layer Restriction Payload object schema
type ScheduleLayerRestrictionPayload struct {
	// Duration An integer that represents the Schedule Layer Restriction objects's duration in seconds
	Duration *int `json:"duration,omitempty"`

	// StartDayOfWeek An integer that represents the Schedule Layer Restriction objects's start_day_of_week. 0 is daily and 1-7 is sunday to saturday
	StartDayOfWeek *int `json:"start_day_of_week,omitempty"`

	// StartTimeOfDay A formatted string that represents the Schedule Layer Restriction objects's start_time_of_day
	StartTimeOfDay *string `json:"start_time_of_day,omitempty"`
}

// ScheduleLayerUser Schedule Layer User object schema
type ScheduleLayerUser struct {
	// Position An integer that represents the Schedule Layer User objects's position
	Position *int `json:"position,omitempty"`

	// UniqueID A system-generated string that represents the Schedule Layer User objects's unique_id
	UniqueID *string `json:"unique_id,omitempty"`

	// User A system-generated string that represents the User object's username
	User *string `json:"user,omitempty"`
}

// ScheduleLayerUserPayload Schedule Layer User Payload object schema
type ScheduleLayerUserPayload struct {
	// Position An integer that represents the Schedule Layer User objects's position
	Position *int `json:"position,omitempty"`

	// User A system-generated string that represents the User object's username
	User *string `json:"user,omitempty"`
}

// ScheduleOverride Schedule Override object schema
type ScheduleOverride struct {
	// EndTime A fromatted string that represents the Schedule Overrides object's end_time
	EndTime *string `json:"end_time,omitempty"`

	// Name A string that represents the Schedule Overrides object's name
	Name *string `json:"name,omitempty"`

	// StartTime A fromatted string that represents the Schedule Overrides object's start_time
	StartTime *string `json:"start_time,omitempty"`

	// UniqueID A system-generated string that represents the Schedule Overrides object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`

	// User A string that represents the User object's username
	User *string `json:"user,omitempty"`
}

// ScheduleOverrideList Schedule Override List object schema
type ScheduleOverrideList struct {
	// EndTime A fromatted string that represents the Schedule Overrides object's end_time
	EndTime *string `json:"end_time,omitempty"`

	// Name A string that represents the Schedule Overrides object's name
	Name *string `json:"name,omitempty"`

	// OverriddenDetails A string that represents the Overridden details of the Schedule Overrides object
	OverriddenDetails *string `json:"overridden_details,omitempty"`

	// StartTime A fromatted string that represents the Schedule Overrides object's start_time
	StartTime *string `json:"start_time,omitempty"`

	// UniqueID A system-generated string that represents the Schedule Overrides object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`

	// User A string that represents the User object's username
	User *string `json:"user,omitempty"`
}

// ScheduleOverridePayload Schedule Override Payload object schema
type ScheduleOverridePayload struct {
	// EndTime A fromatted string that represents the Schedule Overrides object's end_time
	EndTime *string `json:"end_time,omitempty"`

	// Name A string that represents the Schedule Overrides object's name
	Name *string `json:"name,omitempty"`

	// StartTime A fromatted string that represents the Schedule Overrides object's start_time
	StartTime *string `json:"start_time,omitempty"`

	// User A string that represents the User object's username
	User *string `json:"user,omitempty"`
}

// SchedulePayload Payload schema for the Schedule object
type SchedulePayload struct {
	// Description A string that represents the Schedule object's description
	Description *string `json:"description,omitempty"`

	// Layers An array of Schedule Layer objects
	Layers *[]ScheduleLayerPayload `json:"layers,omitempty"`

	// Name A string that represents the Schedule object's name
	Name string `json:"name"`

	// Overrides An array of Schedule Overrides objects
	Overrides *[]ScheduleOverridePayload `json:"overrides,omitempty"`

	// Summary A string that represents the Schedule object's summary
	Summary *string `json:"summary,omitempty"`

	// TimeZone A formatted string that represents the Schedule object's time zone. You can check out the time zone list here https://timezonedb.com/time-zones
	TimeZone *string `json:"time_zone,omitempty"`
}

// ServiceGet Service object schema for List and Retrieve
type ServiceGet struct {
	// AcknowlegementTimeout An integer that represents the timeout for acknowledging an Incident
	AcknowlegementTimeout *int `json:"acknowlegement_timeout,omitempty"`

	// AutoResolveTimeout An integer that represents the timeout for automatically resolving an Incident
	AutoResolveTimeout *int `json:"auto_resolve_timeout,omitempty"`

	// Collation An integer that represents the Service object's collation type. 0 is off, 1 is time-based.
	Collation *int `json:"collation,omitempty"`

	// CollationTime An integer that represents the Service object's collation_time. When collation is turned on it needs to be greater than 1 minute & less than 1440 minutes.
	CollationTime *int `json:"collation_time,omitempty"`

	// CreatedBy A system-generated string that represents the User object's username
	CreatedBy *string `json:"created_by,omitempty"`

	// CreationDate A formatted string that represents the Service object's creation_date
	CreationDate *time.Time `json:"creation date,omitempty"`

	// Description A string that represents the Service object's description
	Description *string `json:"description,omitempty"`

	// EscalationPolicy A system-generated string that represents the Escalation Policy object's unique_id
	EscalationPolicy *string `json:"escalation_policy,omitempty"`

	// Name A string that represents the Service object's name
	Name *string `json:"name,omitempty"`

	// SLA A system-generated string that represents the SLA object's unique_id
	SLA *string `json:"sla,omitempty"`

	// Status An integer that represents the Service object's status 0 is disabled, 1 is active, 2 is a warning, 3 is critical, and 4 is under maintenance
	Status *int `json:"status,omitempty"`

	// Summary A string that represents the Service object's summary
	Summary *string `json:"summary,omitempty"`

	// TaskTemplate A system-generated string that represents the Task Template object's unique_id
	TaskTemplate *string `json:"task_template,omitempty"`

	// Team A system-generated string that represents the Team object's unique_id
	Team *string `json:"team,omitempty"`

	// TeamPriority A system-generated string that represents the Priority object's unique_id
	TeamPriority *string `json:"team_priority,omitempty"`

	// UnderMaintenance A boolean flag that represents whether the service object is under maintenance or not
	UnderMaintenance *bool `json:"under_maintenance,omitempty"`

	// UniqueID A system-generated string that represents the Service object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// ServicePayload Payload schema for the the Service object
type ServicePayload struct {
	// AcknowledgementTimeout An integer that represents the acknowledgement timeout value in seconds. If an incident is acknowledged and unresolved within this time window, the incident will be retriggered. This value must be above 600 seconds.
	AcknowledgementTimeout *int `json:"acknowledgement_timeout,omitempty"`

	// AcknowledgementTimeoutEnabled An boolean flag that represents whether a service has acknowledgement timeout is enabled. If true, the "acknowledgement_timeout" field value needs to be set
	AcknowledgementTimeoutEnabled *bool `json:"acknowledgement_timeout_enabled,omitempty"`

	// AutoResolveTimeout An integer that represents the timeout for automatically resolving an Incident
	AutoResolveTimeout *int `json:"auto_resolve_timeout,omitempty"`

	// Collation An integer that represents the Service object's collation type. 0 is off, 1 is time-based.
	Collation *int `json:"collation,omitempty"`

	// CollationTime An integer that represents the Service object's collation_time. When collation is turned on it needs to be greater than 1 minute & less than 1440 minutes.
	CollationTime *int `json:"collation_time,omitempty"`

	// Description A string that represents the Service object's description
	Description *string `json:"description,omitempty"`

	// EscalationPolicy A system-generated string that represents the Escalation Policy object's unique_id
	EscalationPolicy string `json:"escalation_policy"`

	// Name A string that represents the Service object's name
	Name *string `json:"name,omitempty"`

	// SLA A system-generated string that represents the SLA object's unique_id
	SLA string `json:"sla"`

	// Status An integer that represents the Service object's status 0 is disabled, 1 is active, 2 is a warning, 3 is critical, and 4 is under maintenance
	Status *int `json:"status,omitempty"`

	// Summary A string that represents the Service object's summary
	Summary *string `json:"summary,omitempty"`

	// TaskTemplate A system-generated string that represents the Task Template object's unique_id
	TaskTemplate *string `json:"task_template,omitempty"`

	// TeamPriority A system-generated string that represents the Priority object's unique_id
	TeamPriority string `json:"team_priority"`

	// UnderMaintenance A boolean flag that represents whether the service object is under maintenance or not
	UnderMaintenance *bool `json:"under_maintenance,omitempty"`
}

// ServicePostPut Service object schema for Create and Update
type ServicePostPut struct {
	// AcknowlegementTimeout An integer that represents the timeout for acknowledging an Incident
	AcknowlegementTimeout *int `json:"acknowlegement_timeout,omitempty"`

	// AutoResolveTimeout An integer that represents the timeout for automatically resolving an Incident
	AutoResolveTimeout *int `json:"auto_resolve_timeout,omitempty"`

	// Collation An integer that represents the Service object's collation type. 0 is off, 1 is time-based.
	Collation *int `json:"collation,omitempty"`

	// CollationTime An integer that represents the Service object's collation_time. When collation is turned on it needs to be greater than 1 minute & less than 1440 minutes.
	CollationTime *int `json:"collation_time,omitempty"`

	// CreatedBy A system-generated string that represents the User object's username
	CreatedBy *string `json:"created_by,omitempty"`

	// CreationDate A formatted string that represents the Service object's creation_date
	CreationDate *time.Time `json:"creation date,omitempty"`

	// Description A string that represents the Service object's description
	Description *string `json:"description,omitempty"`

	// EscalationPolicy A system-generated string that represents the Escalation Policy object's unique_id
	EscalationPolicy *string `json:"escalation_policy,omitempty"`

	// Name A string that represents the Service object's name
	Name *string `json:"name,omitempty"`

	// SLA A system-generated string that represents the SLA object's unique_id
	SLA *string `json:"sla,omitempty"`

	// Status An integer that represents the Service object's status 0 is disabled, 1 is active, 2 is a warning, 3 is critical, and 4 is under maintenance
	Status *int `json:"status,omitempty"`

	// Summary A string that represents the Service object's summary
	Summary *string `json:"summary,omitempty"`

	// TaskTemplate A system-generated string that represents the Task Template object's unique_id
	TaskTemplate *string `json:"task_template,omitempty"`

	// Team A system-generated string that represents the Team object's unique_id
	Team *string `json:"team,omitempty"`

	// TeamPriority A system-generated string that represents the Priority object's unique_id
	TeamPriority *string `json:"team_priority,omitempty"`

	// UnderMaintenance A boolean flag that represents whether the service object is under maintenance or not
	UnderMaintenance *bool `json:"under_maintenance,omitempty"`

	// UniqueID A system-generated string that represents the Service object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// TMM Team Maintenance Mode object schema
type TMM struct {
	// CreationDate A formatted string that represents the Team Maintenance Mode object's creation_date
	CreationDate *time.Time `json:"creation_date,omitempty"`

	// EndTime A formatted string that represents the Team Maintenance Mode object's end_time
	EndTime *time.Time `json:"end_time,omitempty"`

	// Name A string that represents the Team Maintenance Mode object's name
	Name *string `json:"name,omitempty"`

	// RepeatInterval An integer that represents the Team Maintenance Mode object's repeat_interval
	RepeatInterval *int `json:"repeat_interval,omitempty"`

	// RepeatUntil A formatted string that represents the Team Maintenance Mode object's repeat_until
	RepeatUntil *time.Time `json:"repeat_until,omitempty"`

	// Services Array of Service objects
	Services *[]struct {
		// Service A system-generated string that represents the Service object's unique_id
		Service *string `json:"service,omitempty"`

		// UniqueID A system-generated string that represents the Team Maintenance Mode Service object's unique_id
		UniqueID *string `json:"unique_id,omitempty"`
	} `json:"services,omitempty"`

	// StartTime A formatted string that represents the Team Maintenance Mode object's start_time
	StartTime *time.Time `json:"start_time,omitempty"`

	// TimeZone A formatted string that represents the Team Maintenance Mode object's time_zone. You can check out the time zone list here https://timezonedb.com/time-zones
	TimeZone *string `json:"time_zone,omitempty"`

	// UniqueID A system-generated string that represents the Team Maintenance Mode object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// TMMPayload Payload schema for the Team Maintenance Mode object
type TMMPayload struct {
	// EndTime A formatted string that represents the Team Maintenance Mode object's end_time
	EndTime time.Time `json:"end_time"`

	// Name A string that represents the Team Maintenance Mode object's name
	Name *string `json:"name,omitempty"`

	// RepeatInterval An integer that represents the Team Maintenance Mode object's repeat_interval
	RepeatInterval *int `json:"repeat_interval,omitempty"`

	// RepeatUntil A formatted string that represents the Team Maintenance Mode object's repeat_until
	RepeatUntil *time.Time `json:"repeat_until,omitempty"`

	// Services Array of Service objects
	Services []struct {
		// Service A system-generated string that represents the Service object's unique_id
		Service *string `json:"service,omitempty"`
	} `json:"services"`

	// StartTime A formatted string that represents the Team Maintenance Mode object's start_time
	StartTime time.Time `json:"start_time"`

	// TimeZone A formatted string that represents the Team Maintenance Mode object's time_zone. You can check out the time zone list here https://timezonedb.com/time-zones
	TimeZone *string `json:"time_zone,omitempty"`
}

// TTPayload Payload schema for the Task Template object
type TTPayload struct {
	// DueImmediately An integer that represents whether the Task Template object is due immediately or not. 0 is false and 1 is true.
	DueImmediately *int `json:"due_immediately,omitempty"`

	// Name A string that represents the Task Template object's name
	Name string `json:"name"`

	// Summary A string that represents the Task Template object's summary
	Summary *string `json:"summary,omitempty"`
}

// TagGet Tag object schema
type TagGet struct {
	// Color A string that represents the Tag object's color
	Color *string `json:"color,omitempty"`

	// CreationDate A formatted string that represents the Tag object's creation_date
	CreationDate *time.Time `json:"creation_date,omitempty"`

	// Name A string that represents the Tag object's name
	Name *string `json:"name,omitempty"`

	// Team A system-generated string that represents the Team object's unique_id
	Team *string `json:"team,omitempty"`

	// UniqueID A system-generated string that represents the Tag object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// TagPayload Payload schema for the Tag object
type TagPayload struct {
	// Color A string that represents the Tag object's color
	Color *string `json:"color,omitempty"`

	// Name A string that represents the Tag object's name
	Name *string `json:"name,omitempty"`
}

// TagPostPut Tag object schema
type TagPostPut struct {
	// Color A string that represents the Tag object's color
	Color *string `json:"color,omitempty"`

	// CreationDate A formatted string that represents the Tag object's creation_date
	CreationDate *time.Time `json:"creation_date,omitempty"`

	// Name A string that represents the Tag object's name
	Name *string `json:"name,omitempty"`

	// Team An integer that represents the Team object's id
	Team *int `json:"team,omitempty"`

	// UniqueID A system-generated string that represents the Tag object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// TaskTemplateGet Task Template object schema
type TaskTemplateGet struct {
	// CreationDate A formatted string that represents the Task Template object's creation_date
	CreationDate *time.Time `json:"creation_date,omitempty"`

	// DueImmediately An integer that represents whether the Task Template object is due immediately or not. 0 is false and 1 is true.
	DueImmediately *int `json:"due_immediately,omitempty"`

	// Name A string that represents the Task Template object's name
	Name *string `json:"name,omitempty"`

	// Summary A string that represents the Task Template object's summary
	Summary *string `json:"summary,omitempty"`

	// Team A system-generated string that represents the Team object's unique_id
	Team *string `json:"team,omitempty"`

	// UniqueID A system-generated string that represents the Task Template object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// TaskTemplatePostPut Task Template object schema
type TaskTemplatePostPut struct {
	// CreationDate A formatted string that represents the Task Template object's creation_date
	CreationDate *time.Time `json:"creation_date,omitempty"`

	// DueImmediately An integer that represents whether the Task Template object is due immediately or not. 0 is false and 1 is true.
	DueImmediately *int `json:"due_immediately,omitempty"`

	// Name A string that represents the Task Template object's name
	Name *string `json:"name,omitempty"`

	// Summary A string that represents the Task Template object's summary
	Summary *string `json:"summary,omitempty"`

	// UniqueID A system-generated string that represents the Task Template object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// Team Team object schema
type Team struct {
	// Account A system-generated string that represents the Account object's unique_id
	Account *string `json:"account,omitempty"`

	// CreationDate A formatted string that represents the Team object's creation_date
	CreationDate *time.Time `json:"creation_date,omitempty"`

	// Members Team Member object schema
	Members *TeamMember `json:"members,omitempty"`

	// Name A that represents the Team object's name
	Name *string `json:"name,omitempty"`

	// Owner A system-generated string that represents the User object's username
	Owner *string `json:"owner,omitempty"`

	// Roles Incident Role object schema
	Roles *IncidentRoleGet `json:"roles,omitempty"`

	// UniqueID A system-generated string that represents the Team object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// TeamMember Team Member object schema
type TeamMember struct {
	// JoiningDate A formatted string that represents the Team Member object's joining_date
	JoiningDate *string `json:"joining_date,omitempty"`

	// Role An integer that represents the Team Member object's role. 1 is manager and 2 is user
	Role *int `json:"role,omitempty"`

	// Team A system-generated string that represents the Team object's unique_id
	Team *string `json:"team,omitempty"`

	// UniqueID A system-generated string that represents the Team Member object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`

	// User User object schema
	User *User `json:"user,omitempty"`
}

// TeamMemberPayload Payload schema for the Team Member object
type TeamMemberPayload struct {
	// Role An integer that represents the Team Member object's role. 1 is manager and 2 is user
	Role *int `json:"role,omitempty"`

	// User A string that represents the User's username
	User string `json:"user"`
}

// TeamPayload Payload schema for the Team object
type TeamPayload struct {
	// Name A that represents the Team object's name
	Name string `json:"name"`
}

// TeamPermission Team Permission object's schema
type TeamPermission struct {
	// AccountPermissions An array of team level permissions
	AccountPermissions *[]string `json:"account_permissions,omitempty"`

	// UniqueID A system generated string that represents the Team object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`
}

// TeamPermissionPayload Payload schema for the Team Permission object
type TeamPermissionPayload struct {
	// AccountPermissions An array of team level permissions
	AccountPermissions []string `json:"account_permissions"`
}

// User User object schema
type User struct {
	// Email A string that represents the User object's email
	Email *string `json:"email,omitempty"`

	// FirstName A string that represents the User object's first_name
	FirstName *string `json:"first_name,omitempty"`

	// LastName A string that represents the User object's last_name
	LastName *string `json:"last_name,omitempty"`

	// Username A system-generated string that represents the User object's username
	Username *string `json:"username,omitempty"`
}

// UserContactMethod User Contact Method object's schema
type UserContactMethod struct {
	// ContactType An integer that represents the User Contact Method object's contact_type field. 1 is for Email, 2 is for SMS, 3 is for Phone Call, 4 is for Slack, 5 is for MS Teams and 6 is for Google Chat
	ContactType *int `json:"contact_type,omitempty"`

	// CreationDate A formatted string that represents the User Contact Method object's creation_date
	CreationDate *time.Time `json:"creation_date,omitempty"`

	// Name A string that represents the User Contact Method object's name field
	Name *string `json:"name,omitempty"`

	// UniqueID A system-generated string that represents the User Contact Method object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`

	// Value A formatted string that represents the User Contact Method object's value field. value can be Email ID, Phone Number, Slack ID, Microsoft ID, Google Chat ID.
	Value *string `json:"value,omitempty"`
}

// UserContactMethodPayload Payload schema for the User Contact Methods object
type UserContactMethodPayload struct {
	// ContactType An integer that represents the User Contact Method object's contact_type field. 1 is for Email, 2 is for SMS, 3 is for Phone Call, 4 is for Slack, 5 is for MS Teams and 6 is for Google Chat
	ContactType int `json:"contact_type"`

	// Name A string that represents the User Contact Method object's name field
	Name string `json:"name"`

	// Value A formatted string that represents the User Contact Method object's value field. value can be Email ID, Phone Number, Slack ID, Microsoft ID, Google Chat ID.
	Value string `json:"value"`
}

// UserCustomRole User Custom Role object's schema
type UserCustomRole struct {
	// CustomRole A system generated string that represents the Account Custom Role object's unique_id
	CustomRole *string `json:"custom_role,omitempty"`

	// CustomRoleDetails Custom Role detail's object schema
	CustomRoleDetails *struct {
		// Name A string that represents the name for Account Custom Role object
		Name *string `json:"name,omitempty"`
	} `json:"custom_role_details,omitempty"`

	// User A system generated string that represents the user object's username
	User *string `json:"user,omitempty"`
}

// UserCustomRolePayload Payload schema for the User Custom Role object
type UserCustomRolePayload struct {
	// CustomRole A system-generated string that represents the User Custom Role object's unique_id
	CustomRole string `json:"custom_role"`
}

// UserForwardingRule User Forwarding Rule object's schema
type UserForwardingRule struct {
	// CreatedBy A system-generated string that represents the User object's username
	CreatedBy *string `json:"created_by,omitempty"`

	// CreationDate A formatted string that represents the User Forwarding Rule object's creation_date
	CreationDate *time.Time `json:"creation_date,omitempty"`

	// FromDate A formatted string that represents the User Forwarding Rule object's from_date field
	FromDate *time.Time `json:"from_date,omitempty"`

	// TimeZone A formatted string that represents the User Forwarding Rule object's time zone. You can check out the time zone list here https://timezonedb.com/time-zones
	TimeZone *string `json:"time_zone,omitempty"`

	// ToDate A formatted string that represents the User Forwarding Rule object's to_date field
	ToDate *time.Time `json:"to_date,omitempty"`

	// ToUser A system-generated string that represents the User object's username
	ToUser *string `json:"to_user,omitempty"`

	// UniqueID A system-generated string that represents the User Forwarding Rule object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`

	// User A system-generated string that represents the User object's username
	User *string `json:"user,omitempty"`
}

// UserForwardingRulePayload Payload schema for the User Forwarding Rules object
type UserForwardingRulePayload struct {
	// FromDate A formatted string that represents the User Forwarding Rule object's from_date field
	FromDate time.Time `json:"from_date"`

	// TimeZone A formatted string that represents the User Forwarding Rule object's time zone. You can check out the time zone list here https://timezonedb.com/time-zones
	TimeZone *string `json:"time_zone,omitempty"`

	// ToDate A formatted string that represents the User Forwarding Rule object's to_date field
	ToDate time.Time `json:"to_date"`

	// ToUser A system-generated string that represents the User object's username
	ToUser string `json:"to_user"`
}

// UserNotificationRule User Notification Rules object's schema
type UserNotificationRule struct {
	// Contact A system-generated string that represents the User Contact Method object's unique_id
	Contact *string `json:"contact,omitempty"`

	// CreationDate A formatted string that represents the User Notification Rules object's creation_date
	CreationDate *time.Time `json:"creation_date,omitempty"`

	// StartDelay An integer that represents the User Notification Rules object's delay field in minutes.
	StartDelay *int `json:"start_delay,omitempty"`

	// Type A string that represents the User Notification Rules object's type
	Type *string `json:"type,omitempty"`

	// UniqueID A system-generated string that represents the User Notification Rules object's unique_id
	UniqueID *string `json:"unique_id,omitempty"`

	// Urgency An integer that represents the User Notification Rules object's urgency field. 1 is for high urgency incidents and 0 is for low urgency incidents.
	Urgency *int `json:"urgency,omitempty"`
}

// UserNotificationRulePayload Payload schema for the User Notification Rules object
type UserNotificationRulePayload struct {
	// Contact A system-generated string that represents the User Contact Method object's unique_id
	Contact string `json:"contact"`

	// StartDelay An integer that represents the User Notification Rules object's delay field in minutes.
	StartDelay *int `json:"start_delay,omitempty"`

	// Urgency An integer that represents the User Notification Rules object's urgency field. 1 is for high urgency incidents and 0 is for low urgency incidents.
	Urgency *int `json:"urgency,omitempty"`
}

// PostAPIIncidentsFilterParams defines parameters for PostAPIIncidentsFilter.
type PostAPIIncidentsFilterParams struct {
	// Page pagination page number. example - `page=1`
	Page *int `form:"page,omitempty" json:"page,omitempty"`
}

// PostAPIAccountAPIInviteJSONRequestBody defines body for PostAPIAccountAPIInvite for application/json ContentType.
type PostAPIAccountAPIInviteJSONRequestBody = InviteUserPayload

// PostAPIAccountCustomrolesJSONRequestBody defines body for PostAPIAccountCustomroles for application/json ContentType.
type PostAPIAccountCustomrolesJSONRequestBody = AccountCustomRolePayload

// PutAPIAccountCustomrolesCustomRoleIDJSONRequestBody defines body for PutAPIAccountCustomrolesCustomRoleID for application/json ContentType.
type PutAPIAccountCustomrolesCustomRoleIDJSONRequestBody = AccountCustomRolePayload

// PostAPIAccountDeleteuserJSONRequestBody defines body for PostAPIAccountDeleteuser for application/json ContentType.
type PostAPIAccountDeleteuserJSONRequestBody = DeleteUserPayload

// PutAPIAccountMembersUsernameJSONRequestBody defines body for PutAPIAccountMembersUsername for application/json ContentType.
type PutAPIAccountMembersUsernameJSONRequestBody = AccountMemberPayload

// PostAPIAccountRegenerateIntegrationKeyJSONRequestBody defines body for PostAPIAccountRegenerateIntegrationKey for application/json ContentType.
type PostAPIAccountRegenerateIntegrationKeyJSONRequestBody = IntegrationKeyRegenerationPayload

// PostAPIAccountTeamsJSONRequestBody defines body for PostAPIAccountTeams for application/json ContentType.
type PostAPIAccountTeamsJSONRequestBody = TeamPayload

// PutAPIAccountTeamsTeamIDJSONRequestBody defines body for PutAPIAccountTeamsTeamID for application/json ContentType.
type PutAPIAccountTeamsTeamIDJSONRequestBody = TeamPayload

// PostAPIAccountTeamsTeamIDEscalationPoliciesJSONRequestBody defines body for PostAPIAccountTeamsTeamIDEscalationPolicies for application/json ContentType.
type PostAPIAccountTeamsTeamIDEscalationPoliciesJSONRequestBody = EPPayload

// PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDJSONRequestBody defines body for PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyID for application/json ContentType.
type PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDJSONRequestBody = EPPayload

// PostAPIAccountTeamsTeamIDMaintenanceJSONRequestBody defines body for PostAPIAccountTeamsTeamIDMaintenance for application/json ContentType.
type PostAPIAccountTeamsTeamIDMaintenanceJSONRequestBody = TMMPayload

// PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDJSONRequestBody defines body for PutAPIAccountTeamsTeamIDMaintenanceMaintenanceID for application/json ContentType.
type PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDJSONRequestBody = TMMPayload

// PostAPIAccountTeamsTeamIDMembersJSONRequestBody defines body for PostAPIAccountTeamsTeamIDMembers for application/json ContentType.
type PostAPIAccountTeamsTeamIDMembersJSONRequestBody = TeamMemberPayload

// PutAPIAccountTeamsTeamIDMembersMemberIDJSONRequestBody defines body for PutAPIAccountTeamsTeamIDMembersMemberID for application/json ContentType.
type PutAPIAccountTeamsTeamIDMembersMemberIDJSONRequestBody = TeamMemberPayload

// PutAPIAccountTeamsTeamIDPermissionsJSONRequestBody defines body for PutAPIAccountTeamsTeamIDPermissions for application/json ContentType.
type PutAPIAccountTeamsTeamIDPermissionsJSONRequestBody = TeamPermissionPayload

// PostAPIAccountTeamsTeamIDPostmortemJSONRequestBody defines body for PostAPIAccountTeamsTeamIDPostmortem for application/json ContentType.
type PostAPIAccountTeamsTeamIDPostmortemJSONRequestBody = PostmortemPayload

// PutAPIAccountTeamsTeamIDPostmortemPostmortemIDJSONRequestBody defines body for PutAPIAccountTeamsTeamIDPostmortemPostmortemID for application/json ContentType.
type PutAPIAccountTeamsTeamIDPostmortemPostmortemIDJSONRequestBody = PostmortemPayload

// PostAPIAccountTeamsTeamIDPriorityJSONRequestBody defines body for PostAPIAccountTeamsTeamIDPriority for application/json ContentType.
type PostAPIAccountTeamsTeamIDPriorityJSONRequestBody = PriorityPayload

// PutAPIAccountTeamsTeamIDPriorityPriorityIDJSONRequestBody defines body for PutAPIAccountTeamsTeamIDPriorityPriorityID for application/json ContentType.
type PutAPIAccountTeamsTeamIDPriorityPriorityIDJSONRequestBody = PriorityPayload

// PostAPIAccountTeamsTeamIDRolesJSONRequestBody defines body for PostAPIAccountTeamsTeamIDRoles for application/json ContentType.
type PostAPIAccountTeamsTeamIDRolesJSONRequestBody = IRPayload

// PutAPIAccountTeamsTeamIDRolesIncidentRoleIDJSONRequestBody defines body for PutAPIAccountTeamsTeamIDRolesIncidentRoleID for application/json ContentType.
type PutAPIAccountTeamsTeamIDRolesIncidentRoleIDJSONRequestBody = IRPayload

// PostAPIAccountTeamsTeamIDSchedulesJSONRequestBody defines body for PostAPIAccountTeamsTeamIDSchedules for application/json ContentType.
type PostAPIAccountTeamsTeamIDSchedulesJSONRequestBody = SchedulePayload

// PutAPIAccountTeamsTeamIDSchedulesScheduleIDJSONRequestBody defines body for PutAPIAccountTeamsTeamIDSchedulesScheduleID for application/json ContentType.
type PutAPIAccountTeamsTeamIDSchedulesScheduleIDJSONRequestBody = SchedulePayload

// PostAPIAccountTeamsTeamIDServicesJSONRequestBody defines body for PostAPIAccountTeamsTeamIDServices for application/json ContentType.
type PostAPIAccountTeamsTeamIDServicesJSONRequestBody = ServicePayload

// PutAPIAccountTeamsTeamIDServicesServiceIDJSONRequestBody defines body for PutAPIAccountTeamsTeamIDServicesServiceID for application/json ContentType.
type PutAPIAccountTeamsTeamIDServicesServiceIDJSONRequestBody = ServicePayload

// PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsJSONRequestBody defines body for PostAPIAccountTeamsTeamIDServicesServiceIDIntegrations for application/json ContentType.
type PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsJSONRequestBody = IntegrationPayload

// PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDJSONRequestBody defines body for PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationID for application/json ContentType.
type PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDJSONRequestBody = IntegrationPayload

// PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersJSONRequestBody defines body for PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformers for application/json ContentType.
type PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersJSONRequestBody = AlertTransformerPayload

// PostAPIAccountTeamsTeamIDSLAJSONRequestBody defines body for PostAPIAccountTeamsTeamIDSLA for application/json ContentType.
type PostAPIAccountTeamsTeamIDSLAJSONRequestBody = SLAPayload

// PutAPIAccountTeamsTeamIDSLASLAIDJSONRequestBody defines body for PutAPIAccountTeamsTeamIDSLASLAID for application/json ContentType.
type PutAPIAccountTeamsTeamIDSLASLAIDJSONRequestBody = SLAPayload

// PostAPIAccountTeamsTeamIDTagsJSONRequestBody defines body for PostAPIAccountTeamsTeamIDTags for application/json ContentType.
type PostAPIAccountTeamsTeamIDTagsJSONRequestBody = TagPayload

// PutAPIAccountTeamsTeamIDTagsTagIDJSONRequestBody defines body for PutAPIAccountTeamsTeamIDTagsTagID for application/json ContentType.
type PutAPIAccountTeamsTeamIDTagsTagIDJSONRequestBody = TagPayload

// PostAPIAccountTeamsTeamIDTaskTemplatesJSONRequestBody defines body for PostAPIAccountTeamsTeamIDTaskTemplates for application/json ContentType.
type PostAPIAccountTeamsTeamIDTaskTemplatesJSONRequestBody = TTPayload

// PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDJSONRequestBody defines body for PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateID for application/json ContentType.
type PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDJSONRequestBody = TTPayload

// PostAPIAccountUsersUsernameContactsJSONRequestBody defines body for PostAPIAccountUsersUsernameContacts for application/json ContentType.
type PostAPIAccountUsersUsernameContactsJSONRequestBody = UserContactMethodPayload

// PostAPIAccountUsersUsernameCustomrolesJSONRequestBody defines body for PostAPIAccountUsersUsernameCustomroles for application/json ContentType.
type PostAPIAccountUsersUsernameCustomrolesJSONRequestBody = UserCustomRolePayload

// PostAPIAccountUsersUsernameForwardingRulesJSONRequestBody defines body for PostAPIAccountUsersUsernameForwardingRules for application/json ContentType.
type PostAPIAccountUsersUsernameForwardingRulesJSONRequestBody = UserForwardingRulePayload

// PostAPIAccountUsersUsernameNotificationRulesJSONRequestBody defines body for PostAPIAccountUsersUsernameNotificationRules for application/json ContentType.
type PostAPIAccountUsersUsernameNotificationRulesJSONRequestBody = UserNotificationRulePayload

// PostAPIEventsIntegrationKeyJSONRequestBody defines body for PostAPIEventsIntegrationKey for application/json ContentType.
type PostAPIEventsIntegrationKeyJSONRequestBody = EventPayload

// PostAPIIncidentsJSONRequestBody defines body for PostAPIIncidents for application/json ContentType.
type PostAPIIncidentsJSONRequestBody = IncidentPayload

// PostAPIIncidentsFilterJSONRequestBody defines body for PostAPIIncidentsFilter for application/json ContentType.
type PostAPIIncidentsFilterJSONRequestBody = IncidentFilterPayload

// PutAPIIncidentsIncidentNumberJSONRequestBody defines body for PutAPIIncidentsIncidentNumber for application/json ContentType.
type PutAPIIncidentsIncidentNumberJSONRequestBody = IncidentPayload

// PostAPIIncidentsIncidentNumberNoteJSONRequestBody defines body for PostAPIIncidentsIncidentNumberNote for application/json ContentType.
type PostAPIIncidentsIncidentNumberNoteJSONRequestBody = IncidentNotePayload

// PutAPIIncidentsIncidentNumberNoteNoteUniqueIDJSONRequestBody defines body for PutAPIIncidentsIncidentNumberNoteNoteUniqueID for application/json ContentType.
type PutAPIIncidentsIncidentNumberNoteNoteUniqueIDJSONRequestBody = IncidentNotePayload

// PostAPIIncidentsIncidentNumberRespondersJSONRequestBody defines body for PostAPIIncidentsIncidentNumberResponders for application/json ContentType.
type PostAPIIncidentsIncidentNumberRespondersJSONRequestBody = IncidentResponderPayload

// PostAPIIncidentsIncidentNumberTagsJSONRequestBody defines body for PostAPIIncidentsIncidentNumberTags for application/json ContentType.
type PostAPIIncidentsIncidentNumberTagsJSONRequestBody = IncidentTagPayload

// PatchAPIIncidentsUniqueIDJSONRequestBody defines body for PatchAPIIncidentsUniqueID for application/json ContentType.
type PatchAPIIncidentsUniqueIDJSONRequestBody = IncidentPayload

// PostAPIV2AccountEventsRouterJSONRequestBody defines body for PostAPIV2AccountEventsRouter for application/json ContentType.
type PostAPIV2AccountEventsRouterJSONRequestBody = GlobalRouterPayload

// PutAPIV2AccountEventsRouterRouterIDJSONRequestBody defines body for PutAPIV2AccountEventsRouterRouterID for application/json ContentType.
type PutAPIV2AccountEventsRouterRouterIDJSONRequestBody = GlobalRouterPayload

// PostAPIV2AccountEventsRouterRouterIDRulesetsJSONRequestBody defines body for PostAPIV2AccountEventsRouterRouterIDRulesets for application/json ContentType.
type PostAPIV2AccountEventsRouterRouterIDRulesetsJSONRequestBody = GlobalRouterRulePayload

// PutAPIV2AccountEventsRouterRouterIDRulesetsJSONRequestBody defines body for PutAPIV2AccountEventsRouterRouterIDRulesets for application/json ContentType.
type PutAPIV2AccountEventsRouterRouterIDRulesetsJSONRequestBody = GlobalRouterRulePositionPayload

// PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDJSONRequestBody defines body for PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetID for application/json ContentType.
type PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDJSONRequestBody = GlobalRouterRulePayload

// PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesJSONRequestBody defines body for PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverrides for application/json ContentType.
type PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesJSONRequestBody = ScheduleOverridePayload

// PostIntegrationAccountIDGenericIntegrationKeyJSONRequestBody defines body for PostIntegrationAccountIDGenericIntegrationKey for application/json ContentType.
type PostIntegrationAccountIDGenericIntegrationKeyJSONRequestBody = EventPayload

// PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDJSONRequestBody defines body for PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersID for application/json ContentType.
type PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDJSONRequestBody = AlertTransformerPayload

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Zenduty which conforms to the OpenAPI3 specification for this service.
type Zenduty struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Zenduty) error

// Creates a new Zenduty, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Zenduty, error) {
	// create a client with sane default values
	client := Zenduty{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Zenduty) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Zenduty) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAPIAccountAPIInviteWithBody request with any body
	PostAPIAccountAPIInviteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIAccountAPIInvite(ctx context.Context, body PostAPIAccountAPIInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountCustomroles request
	GetAPIAccountCustomroles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIAccountCustomrolesWithBody request with any body
	PostAPIAccountCustomrolesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIAccountCustomroles(ctx context.Context, body PostAPIAccountCustomrolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIAccountCustomrolesCustomRoleID request
	DeleteAPIAccountCustomrolesCustomRoleID(ctx context.Context, customRoleID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountCustomrolesCustomRoleID request
	GetAPIAccountCustomrolesCustomRoleID(ctx context.Context, customRoleID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIAccountCustomrolesCustomRoleIDWithBody request with any body
	PutAPIAccountCustomrolesCustomRoleIDWithBody(ctx context.Context, customRoleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIAccountCustomrolesCustomRoleID(ctx context.Context, customRoleID string, body PutAPIAccountCustomrolesCustomRoleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIAccountDeleteuserWithBody request with any body
	PostAPIAccountDeleteuserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIAccountDeleteuser(ctx context.Context, body PostAPIAccountDeleteuserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountMembers request
	GetAPIAccountMembers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountMembersUsername request
	GetAPIAccountMembersUsername(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIAccountMembersUsernameWithBody request with any body
	PutAPIAccountMembersUsernameWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIAccountMembersUsername(ctx context.Context, username string, body PutAPIAccountMembersUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIAccountRegenerateIntegrationKeyWithBody request with any body
	PostAPIAccountRegenerateIntegrationKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIAccountRegenerateIntegrationKey(ctx context.Context, body PostAPIAccountRegenerateIntegrationKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeams request
	GetAPIAccountTeams(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIAccountTeamsWithBody request with any body
	PostAPIAccountTeamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIAccountTeams(ctx context.Context, body PostAPIAccountTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIAccountTeamsTeamID request
	DeleteAPIAccountTeamsTeamID(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamID request
	GetAPIAccountTeamsTeamID(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIAccountTeamsTeamIDWithBody request with any body
	PutAPIAccountTeamsTeamIDWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIAccountTeamsTeamID(ctx context.Context, teamID string, body PutAPIAccountTeamsTeamIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDEscalationPolicies request
	GetAPIAccountTeamsTeamIDEscalationPolicies(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIAccountTeamsTeamIDEscalationPoliciesWithBody request with any body
	PostAPIAccountTeamsTeamIDEscalationPoliciesWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIAccountTeamsTeamIDEscalationPolicies(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDEscalationPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyID request
	DeleteAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyID(ctx context.Context, teamID string, escalationPolicyID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyID request
	GetAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyID(ctx context.Context, teamID string, escalationPolicyID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDWithBody request with any body
	PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDWithBody(ctx context.Context, teamID string, escalationPolicyID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyID(ctx context.Context, teamID string, escalationPolicyID string, body PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDMaintenance request
	GetAPIAccountTeamsTeamIDMaintenance(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIAccountTeamsTeamIDMaintenanceWithBody request with any body
	PostAPIAccountTeamsTeamIDMaintenanceWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIAccountTeamsTeamIDMaintenance(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIAccountTeamsTeamIDMaintenanceMaintenanceID request
	DeleteAPIAccountTeamsTeamIDMaintenanceMaintenanceID(ctx context.Context, teamID string, maintenanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDMaintenanceMaintenanceID request
	GetAPIAccountTeamsTeamIDMaintenanceMaintenanceID(ctx context.Context, teamID string, maintenanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDWithBody request with any body
	PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDWithBody(ctx context.Context, teamID string, maintenanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIAccountTeamsTeamIDMaintenanceMaintenanceID(ctx context.Context, teamID string, maintenanceID string, body PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDMembers request
	GetAPIAccountTeamsTeamIDMembers(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIAccountTeamsTeamIDMembersWithBody request with any body
	PostAPIAccountTeamsTeamIDMembersWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIAccountTeamsTeamIDMembers(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIAccountTeamsTeamIDMembersMemberID request
	DeleteAPIAccountTeamsTeamIDMembersMemberID(ctx context.Context, teamID string, memberID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDMembersMemberID request
	GetAPIAccountTeamsTeamIDMembersMemberID(ctx context.Context, teamID string, memberID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIAccountTeamsTeamIDMembersMemberIDWithBody request with any body
	PutAPIAccountTeamsTeamIDMembersMemberIDWithBody(ctx context.Context, teamID string, memberID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIAccountTeamsTeamIDMembersMemberID(ctx context.Context, teamID string, memberID string, body PutAPIAccountTeamsTeamIDMembersMemberIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDOncall request
	GetAPIAccountTeamsTeamIDOncall(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDPermissions request
	GetAPIAccountTeamsTeamIDPermissions(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIAccountTeamsTeamIDPermissionsWithBody request with any body
	PutAPIAccountTeamsTeamIDPermissionsWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIAccountTeamsTeamIDPermissions(ctx context.Context, teamID string, body PutAPIAccountTeamsTeamIDPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDPostmortem request
	GetAPIAccountTeamsTeamIDPostmortem(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIAccountTeamsTeamIDPostmortemWithBody request with any body
	PostAPIAccountTeamsTeamIDPostmortemWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIAccountTeamsTeamIDPostmortem(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDPostmortemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIAccountTeamsTeamIDPostmortemPostmortemID request
	DeleteAPIAccountTeamsTeamIDPostmortemPostmortemID(ctx context.Context, teamID string, postmortemID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDPostmortemPostmortemID request
	GetAPIAccountTeamsTeamIDPostmortemPostmortemID(ctx context.Context, teamID string, postmortemID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIAccountTeamsTeamIDPostmortemPostmortemIDWithBody request with any body
	PutAPIAccountTeamsTeamIDPostmortemPostmortemIDWithBody(ctx context.Context, teamID string, postmortemID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIAccountTeamsTeamIDPostmortemPostmortemID(ctx context.Context, teamID string, postmortemID string, body PutAPIAccountTeamsTeamIDPostmortemPostmortemIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDPriority request
	GetAPIAccountTeamsTeamIDPriority(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIAccountTeamsTeamIDPriorityWithBody request with any body
	PostAPIAccountTeamsTeamIDPriorityWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIAccountTeamsTeamIDPriority(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDPriorityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIAccountTeamsTeamIDPriorityPriorityID request
	DeleteAPIAccountTeamsTeamIDPriorityPriorityID(ctx context.Context, teamID string, priorityID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDPriorityPriorityID request
	GetAPIAccountTeamsTeamIDPriorityPriorityID(ctx context.Context, teamID string, priorityID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIAccountTeamsTeamIDPriorityPriorityIDWithBody request with any body
	PutAPIAccountTeamsTeamIDPriorityPriorityIDWithBody(ctx context.Context, teamID string, priorityID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIAccountTeamsTeamIDPriorityPriorityID(ctx context.Context, teamID string, priorityID string, body PutAPIAccountTeamsTeamIDPriorityPriorityIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDRoles request
	GetAPIAccountTeamsTeamIDRoles(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIAccountTeamsTeamIDRolesWithBody request with any body
	PostAPIAccountTeamsTeamIDRolesWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIAccountTeamsTeamIDRoles(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIAccountTeamsTeamIDRolesIncidentRoleID request
	DeleteAPIAccountTeamsTeamIDRolesIncidentRoleID(ctx context.Context, teamID string, incidentRoleID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDRolesIncidentRoleID request
	GetAPIAccountTeamsTeamIDRolesIncidentRoleID(ctx context.Context, teamID string, incidentRoleID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIAccountTeamsTeamIDRolesIncidentRoleIDWithBody request with any body
	PutAPIAccountTeamsTeamIDRolesIncidentRoleIDWithBody(ctx context.Context, teamID string, incidentRoleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIAccountTeamsTeamIDRolesIncidentRoleID(ctx context.Context, teamID string, incidentRoleID string, body PutAPIAccountTeamsTeamIDRolesIncidentRoleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDSchedules request
	GetAPIAccountTeamsTeamIDSchedules(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIAccountTeamsTeamIDSchedulesWithBody request with any body
	PostAPIAccountTeamsTeamIDSchedulesWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIAccountTeamsTeamIDSchedules(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIAccountTeamsTeamIDSchedulesScheduleID request
	DeleteAPIAccountTeamsTeamIDSchedulesScheduleID(ctx context.Context, teamID string, scheduleID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDSchedulesScheduleID request
	GetAPIAccountTeamsTeamIDSchedulesScheduleID(ctx context.Context, teamID string, scheduleID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIAccountTeamsTeamIDSchedulesScheduleIDWithBody request with any body
	PutAPIAccountTeamsTeamIDSchedulesScheduleIDWithBody(ctx context.Context, teamID string, scheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIAccountTeamsTeamIDSchedulesScheduleID(ctx context.Context, teamID string, scheduleID string, body PutAPIAccountTeamsTeamIDSchedulesScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDServices request
	GetAPIAccountTeamsTeamIDServices(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIAccountTeamsTeamIDServicesWithBody request with any body
	PostAPIAccountTeamsTeamIDServicesWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIAccountTeamsTeamIDServices(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDServicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIAccountTeamsTeamIDServicesServiceID request
	DeleteAPIAccountTeamsTeamIDServicesServiceID(ctx context.Context, teamID string, serviceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDServicesServiceID request
	GetAPIAccountTeamsTeamIDServicesServiceID(ctx context.Context, teamID string, serviceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIAccountTeamsTeamIDServicesServiceIDWithBody request with any body
	PutAPIAccountTeamsTeamIDServicesServiceIDWithBody(ctx context.Context, teamID string, serviceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIAccountTeamsTeamIDServicesServiceID(ctx context.Context, teamID string, serviceID string, body PutAPIAccountTeamsTeamIDServicesServiceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDServicesServiceIDIntegrations request
	GetAPIAccountTeamsTeamIDServicesServiceIDIntegrations(ctx context.Context, teamID string, serviceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsWithBody request with any body
	PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsWithBody(ctx context.Context, teamID string, serviceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIAccountTeamsTeamIDServicesServiceIDIntegrations(ctx context.Context, teamID string, serviceID string, body PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationID request
	DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationID(ctx context.Context, teamID string, serviceID string, integrationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationID request
	GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationID(ctx context.Context, teamID string, serviceID string, integrationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDWithBody request with any body
	PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDWithBody(ctx context.Context, teamID string, serviceID string, integrationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationID(ctx context.Context, teamID string, serviceID string, integrationID string, body PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDAlerts request
	GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDAlerts(ctx context.Context, teamID string, serviceID string, integrationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformers request
	GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformers(ctx context.Context, teamID string, serviceID string, integrationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersWithBody request with any body
	PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersWithBody(ctx context.Context, teamID string, serviceID string, integrationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformers(ctx context.Context, teamID string, serviceID string, integrationID string, body PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDSLA request
	GetAPIAccountTeamsTeamIDSLA(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIAccountTeamsTeamIDSLAWithBody request with any body
	PostAPIAccountTeamsTeamIDSLAWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIAccountTeamsTeamIDSLA(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDSLAJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIAccountTeamsTeamIDSLASLAID request
	DeleteAPIAccountTeamsTeamIDSLASLAID(ctx context.Context, teamID string, slaid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDSLASLAID request
	GetAPIAccountTeamsTeamIDSLASLAID(ctx context.Context, teamID string, slaid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIAccountTeamsTeamIDSLASLAIDWithBody request with any body
	PutAPIAccountTeamsTeamIDSLASLAIDWithBody(ctx context.Context, teamID string, slaid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIAccountTeamsTeamIDSLASLAID(ctx context.Context, teamID string, slaid string, body PutAPIAccountTeamsTeamIDSLASLAIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDTags request
	GetAPIAccountTeamsTeamIDTags(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIAccountTeamsTeamIDTagsWithBody request with any body
	PostAPIAccountTeamsTeamIDTagsWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIAccountTeamsTeamIDTags(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIAccountTeamsTeamIDTagsTagID request
	DeleteAPIAccountTeamsTeamIDTagsTagID(ctx context.Context, teamID string, tagID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDTagsTagID request
	GetAPIAccountTeamsTeamIDTagsTagID(ctx context.Context, teamID string, tagID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIAccountTeamsTeamIDTagsTagIDWithBody request with any body
	PutAPIAccountTeamsTeamIDTagsTagIDWithBody(ctx context.Context, teamID string, tagID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIAccountTeamsTeamIDTagsTagID(ctx context.Context, teamID string, tagID string, body PutAPIAccountTeamsTeamIDTagsTagIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDTaskTemplates request
	GetAPIAccountTeamsTeamIDTaskTemplates(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIAccountTeamsTeamIDTaskTemplatesWithBody request with any body
	PostAPIAccountTeamsTeamIDTaskTemplatesWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIAccountTeamsTeamIDTaskTemplates(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDTaskTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateID request
	DeleteAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateID(ctx context.Context, teamID string, taskTemplateID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateID request
	GetAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateID(ctx context.Context, teamID string, taskTemplateID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDWithBody request with any body
	PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDWithBody(ctx context.Context, teamID string, taskTemplateID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateID(ctx context.Context, teamID string, taskTemplateID string, body PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountUsersUsernameContacts request
	GetAPIAccountUsersUsernameContacts(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIAccountUsersUsernameContactsWithBody request with any body
	PostAPIAccountUsersUsernameContactsWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIAccountUsersUsernameContacts(ctx context.Context, username string, body PostAPIAccountUsersUsernameContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIAccountUsersUsernameContactsContactID request
	DeleteAPIAccountUsersUsernameContactsContactID(ctx context.Context, username string, contactID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountUsersUsernameContactsContactID request
	GetAPIAccountUsersUsernameContactsContactID(ctx context.Context, username string, contactID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountUsersUsernameCustomroles request
	GetAPIAccountUsersUsernameCustomroles(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIAccountUsersUsernameCustomrolesWithBody request with any body
	PostAPIAccountUsersUsernameCustomrolesWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIAccountUsersUsernameCustomroles(ctx context.Context, username string, body PostAPIAccountUsersUsernameCustomrolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountUsersUsernameForwardingRules request
	GetAPIAccountUsersUsernameForwardingRules(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIAccountUsersUsernameForwardingRulesWithBody request with any body
	PostAPIAccountUsersUsernameForwardingRulesWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIAccountUsersUsernameForwardingRules(ctx context.Context, username string, body PostAPIAccountUsersUsernameForwardingRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIAccountUsersUsernameForwardingRulesForwardingRuleID request
	DeleteAPIAccountUsersUsernameForwardingRulesForwardingRuleID(ctx context.Context, username string, forwardingRuleID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountUsersUsernameForwardingRulesForwardingRuleID request
	GetAPIAccountUsersUsernameForwardingRulesForwardingRuleID(ctx context.Context, username string, forwardingRuleID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountUsersUsernameNotificationRules request
	GetAPIAccountUsersUsernameNotificationRules(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIAccountUsersUsernameNotificationRulesWithBody request with any body
	PostAPIAccountUsersUsernameNotificationRulesWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIAccountUsersUsernameNotificationRules(ctx context.Context, username string, body PostAPIAccountUsersUsernameNotificationRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIAccountUsersUsernameNotificationRulesNotificationRuleID request
	DeleteAPIAccountUsersUsernameNotificationRulesNotificationRuleID(ctx context.Context, username string, notificationRuleID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountUsersUsernameNotificationRulesNotificationRuleID request
	GetAPIAccountUsersUsernameNotificationRulesNotificationRuleID(ctx context.Context, username string, notificationRuleID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAlertStatusTraceID request
	GetAPIAlertStatusTraceID(ctx context.Context, traceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIEventsIntegrationKeyWithBody request with any body
	PostAPIEventsIntegrationKeyWithBody(ctx context.Context, integrationKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIEventsIntegrationKey(ctx context.Context, integrationKey string, body PostAPIEventsIntegrationKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIIncidentsWithBody request with any body
	PostAPIIncidentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIIncidents(ctx context.Context, body PostAPIIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIIncidentsFilterWithBody request with any body
	PostAPIIncidentsFilterWithBody(ctx context.Context, params *PostAPIIncidentsFilterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIIncidentsFilter(ctx context.Context, params *PostAPIIncidentsFilterParams, body PostAPIIncidentsFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIIncidentsIncidentNumber request
	GetAPIIncidentsIncidentNumber(ctx context.Context, incidentNumber string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIIncidentsIncidentNumberWithBody request with any body
	PutAPIIncidentsIncidentNumberWithBody(ctx context.Context, incidentNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIIncidentsIncidentNumber(ctx context.Context, incidentNumber string, body PutAPIIncidentsIncidentNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIIncidentsIncidentNumberAlerts request
	GetAPIIncidentsIncidentNumberAlerts(ctx context.Context, incidentNumber string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIIncidentsIncidentNumberNote request
	GetAPIIncidentsIncidentNumberNote(ctx context.Context, incidentNumber string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIIncidentsIncidentNumberNoteWithBody request with any body
	PostAPIIncidentsIncidentNumberNoteWithBody(ctx context.Context, incidentNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIIncidentsIncidentNumberNote(ctx context.Context, incidentNumber string, body PostAPIIncidentsIncidentNumberNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIIncidentsIncidentNumberNoteNoteUniqueID request
	DeleteAPIIncidentsIncidentNumberNoteNoteUniqueID(ctx context.Context, incidentNumber string, noteUniqueID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIIncidentsIncidentNumberNoteNoteUniqueID request
	GetAPIIncidentsIncidentNumberNoteNoteUniqueID(ctx context.Context, incidentNumber string, noteUniqueID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIIncidentsIncidentNumberNoteNoteUniqueIDWithBody request with any body
	PutAPIIncidentsIncidentNumberNoteNoteUniqueIDWithBody(ctx context.Context, incidentNumber string, noteUniqueID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIIncidentsIncidentNumberNoteNoteUniqueID(ctx context.Context, incidentNumber string, noteUniqueID string, body PutAPIIncidentsIncidentNumberNoteNoteUniqueIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIIncidentsIncidentNumberResponders request
	GetAPIIncidentsIncidentNumberResponders(ctx context.Context, incidentNumber string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIIncidentsIncidentNumberRespondersWithBody request with any body
	PostAPIIncidentsIncidentNumberRespondersWithBody(ctx context.Context, incidentNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIIncidentsIncidentNumberResponders(ctx context.Context, incidentNumber string, body PostAPIIncidentsIncidentNumberRespondersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIIncidentsIncidentNumberRespondersUniqueID request
	DeleteAPIIncidentsIncidentNumberRespondersUniqueID(ctx context.Context, incidentNumber string, uniqueID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIIncidentsIncidentNumberRespondersUniqueID request
	GetAPIIncidentsIncidentNumberRespondersUniqueID(ctx context.Context, incidentNumber string, uniqueID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIIncidentsIncidentNumberTags request
	GetAPIIncidentsIncidentNumberTags(ctx context.Context, incidentNumber string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIIncidentsIncidentNumberTagsWithBody request with any body
	PostAPIIncidentsIncidentNumberTagsWithBody(ctx context.Context, incidentNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIIncidentsIncidentNumberTags(ctx context.Context, incidentNumber string, body PostAPIIncidentsIncidentNumberTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIIncidentsIncidentNumberTagsTagUniqueID request
	DeleteAPIIncidentsIncidentNumberTagsTagUniqueID(ctx context.Context, incidentNumber string, tagUniqueID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIIncidentsIncidentNumberTagsTagUniqueID request
	GetAPIIncidentsIncidentNumberTagsTagUniqueID(ctx context.Context, incidentNumber string, tagUniqueID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchAPIIncidentsUniqueIDWithBody request with any body
	PatchAPIIncidentsUniqueIDWithBody(ctx context.Context, uniqueID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchAPIIncidentsUniqueID(ctx context.Context, uniqueID string, body PatchAPIIncidentsUniqueIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV2AccountEventsRouter request
	GetAPIV2AccountEventsRouter(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV2AccountEventsRouterWithBody request with any body
	PostAPIV2AccountEventsRouterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIV2AccountEventsRouter(ctx context.Context, body PostAPIV2AccountEventsRouterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIV2AccountEventsRouterRouterID request
	DeleteAPIV2AccountEventsRouterRouterID(ctx context.Context, routerID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV2AccountEventsRouterRouterID request
	GetAPIV2AccountEventsRouterRouterID(ctx context.Context, routerID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIV2AccountEventsRouterRouterIDWithBody request with any body
	PutAPIV2AccountEventsRouterRouterIDWithBody(ctx context.Context, routerID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIV2AccountEventsRouterRouterID(ctx context.Context, routerID string, body PutAPIV2AccountEventsRouterRouterIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV2AccountEventsRouterRouterIDRulesets request
	GetAPIV2AccountEventsRouterRouterIDRulesets(ctx context.Context, routerID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV2AccountEventsRouterRouterIDRulesetsWithBody request with any body
	PostAPIV2AccountEventsRouterRouterIDRulesetsWithBody(ctx context.Context, routerID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIV2AccountEventsRouterRouterIDRulesets(ctx context.Context, routerID string, body PostAPIV2AccountEventsRouterRouterIDRulesetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIV2AccountEventsRouterRouterIDRulesetsWithBody request with any body
	PutAPIV2AccountEventsRouterRouterIDRulesetsWithBody(ctx context.Context, routerID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIV2AccountEventsRouterRouterIDRulesets(ctx context.Context, routerID string, body PutAPIV2AccountEventsRouterRouterIDRulesetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIV2AccountEventsRouterRouterIDRulesetsRulesetID request
	DeleteAPIV2AccountEventsRouterRouterIDRulesetsRulesetID(ctx context.Context, routerID string, rulesetID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV2AccountEventsRouterRouterIDRulesetsRulesetID request
	GetAPIV2AccountEventsRouterRouterIDRulesetsRulesetID(ctx context.Context, routerID string, rulesetID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDWithBody request with any body
	PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDWithBody(ctx context.Context, routerID string, rulesetID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetID(ctx context.Context, routerID string, rulesetID string, body PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV2AccountTeamsTeamIDEscalationPoliciesEpIDOncall request
	GetAPIV2AccountTeamsTeamIDEscalationPoliciesEpIDOncall(ctx context.Context, teamID string, epid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV2AccountTeamsTeamIDOncall request
	GetAPIV2AccountTeamsTeamIDOncall(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverrides request
	GetAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverrides(ctx context.Context, teamID string, scheduleID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesWithBody request with any body
	PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesWithBody(ctx context.Context, teamID string, scheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverrides(ctx context.Context, teamID string, scheduleID string, body PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV2AccountTeamsTeamIDServicesServiceIDOncall request
	GetAPIV2AccountTeamsTeamIDServicesServiceIDOncall(ctx context.Context, teamID string, serviceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationAccountIDGenericIntegrationKeyWithBody request with any body
	PostIntegrationAccountIDGenericIntegrationKeyWithBody(ctx context.Context, accountID string, integrationKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationAccountIDGenericIntegrationKey(ctx context.Context, accountID string, integrationKey string, body PostIntegrationAccountIDGenericIntegrationKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersID request
	DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersID(ctx context.Context, teamID string, serviceID string, integrationID string, transformersID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersID request
	GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersID(ctx context.Context, teamID string, serviceID string, integrationID string, transformersID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDWithBody request with any body
	PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDWithBody(ctx context.Context, teamID string, serviceID string, integrationID string, transformersID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersID(ctx context.Context, teamID string, serviceID string, integrationID string, transformersID string, body PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Zenduty) PostAPIAccountAPIInviteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountAPIInviteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountAPIInvite(ctx context.Context, body PostAPIAccountAPIInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountAPIInviteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountCustomroles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountCustomrolesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountCustomrolesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountCustomrolesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountCustomroles(ctx context.Context, body PostAPIAccountCustomrolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountCustomrolesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) DeleteAPIAccountCustomrolesCustomRoleID(ctx context.Context, customRoleID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIAccountCustomrolesCustomRoleIDRequest(c.Server, customRoleID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountCustomrolesCustomRoleID(ctx context.Context, customRoleID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountCustomrolesCustomRoleIDRequest(c.Server, customRoleID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountCustomrolesCustomRoleIDWithBody(ctx context.Context, customRoleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountCustomrolesCustomRoleIDRequestWithBody(c.Server, customRoleID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountCustomrolesCustomRoleID(ctx context.Context, customRoleID string, body PutAPIAccountCustomrolesCustomRoleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountCustomrolesCustomRoleIDRequest(c.Server, customRoleID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountDeleteuserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountDeleteuserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountDeleteuser(ctx context.Context, body PostAPIAccountDeleteuserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountDeleteuserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountMembers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountMembersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountMembersUsername(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountMembersUsernameRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountMembersUsernameWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountMembersUsernameRequestWithBody(c.Server, username, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountMembersUsername(ctx context.Context, username string, body PutAPIAccountMembersUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountMembersUsernameRequest(c.Server, username, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountRegenerateIntegrationKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountRegenerateIntegrationKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountRegenerateIntegrationKey(ctx context.Context, body PostAPIAccountRegenerateIntegrationKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountRegenerateIntegrationKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeams(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeams(ctx context.Context, body PostAPIAccountTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) DeleteAPIAccountTeamsTeamID(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIAccountTeamsTeamIDRequest(c.Server, teamID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamID(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDRequest(c.Server, teamID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDRequestWithBody(c.Server, teamID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamID(ctx context.Context, teamID string, body PutAPIAccountTeamsTeamIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDRequest(c.Server, teamID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDEscalationPolicies(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDEscalationPoliciesRequest(c.Server, teamID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDEscalationPoliciesWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDEscalationPoliciesRequestWithBody(c.Server, teamID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDEscalationPolicies(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDEscalationPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDEscalationPoliciesRequest(c.Server, teamID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) DeleteAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyID(ctx context.Context, teamID string, escalationPolicyID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRequest(c.Server, teamID, escalationPolicyID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyID(ctx context.Context, teamID string, escalationPolicyID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRequest(c.Server, teamID, escalationPolicyID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDWithBody(ctx context.Context, teamID string, escalationPolicyID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRequestWithBody(c.Server, teamID, escalationPolicyID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyID(ctx context.Context, teamID string, escalationPolicyID string, body PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRequest(c.Server, teamID, escalationPolicyID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDMaintenance(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDMaintenanceRequest(c.Server, teamID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDMaintenanceWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDMaintenanceRequestWithBody(c.Server, teamID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDMaintenance(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDMaintenanceRequest(c.Server, teamID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) DeleteAPIAccountTeamsTeamIDMaintenanceMaintenanceID(ctx context.Context, teamID string, maintenanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRequest(c.Server, teamID, maintenanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDMaintenanceMaintenanceID(ctx context.Context, teamID string, maintenanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRequest(c.Server, teamID, maintenanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDWithBody(ctx context.Context, teamID string, maintenanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRequestWithBody(c.Server, teamID, maintenanceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDMaintenanceMaintenanceID(ctx context.Context, teamID string, maintenanceID string, body PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRequest(c.Server, teamID, maintenanceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDMembers(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDMembersRequest(c.Server, teamID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDMembersWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDMembersRequestWithBody(c.Server, teamID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDMembers(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDMembersRequest(c.Server, teamID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) DeleteAPIAccountTeamsTeamIDMembersMemberID(ctx context.Context, teamID string, memberID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIAccountTeamsTeamIDMembersMemberIDRequest(c.Server, teamID, memberID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDMembersMemberID(ctx context.Context, teamID string, memberID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDMembersMemberIDRequest(c.Server, teamID, memberID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDMembersMemberIDWithBody(ctx context.Context, teamID string, memberID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDMembersMemberIDRequestWithBody(c.Server, teamID, memberID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDMembersMemberID(ctx context.Context, teamID string, memberID string, body PutAPIAccountTeamsTeamIDMembersMemberIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDMembersMemberIDRequest(c.Server, teamID, memberID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDOncall(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDOncallRequest(c.Server, teamID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDPermissions(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDPermissionsRequest(c.Server, teamID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDPermissionsWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDPermissionsRequestWithBody(c.Server, teamID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDPermissions(ctx context.Context, teamID string, body PutAPIAccountTeamsTeamIDPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDPermissionsRequest(c.Server, teamID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDPostmortem(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDPostmortemRequest(c.Server, teamID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDPostmortemWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDPostmortemRequestWithBody(c.Server, teamID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDPostmortem(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDPostmortemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDPostmortemRequest(c.Server, teamID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) DeleteAPIAccountTeamsTeamIDPostmortemPostmortemID(ctx context.Context, teamID string, postmortemID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIAccountTeamsTeamIDPostmortemPostmortemIDRequest(c.Server, teamID, postmortemID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDPostmortemPostmortemID(ctx context.Context, teamID string, postmortemID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDPostmortemPostmortemIDRequest(c.Server, teamID, postmortemID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDPostmortemPostmortemIDWithBody(ctx context.Context, teamID string, postmortemID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDPostmortemPostmortemIDRequestWithBody(c.Server, teamID, postmortemID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDPostmortemPostmortemID(ctx context.Context, teamID string, postmortemID string, body PutAPIAccountTeamsTeamIDPostmortemPostmortemIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDPostmortemPostmortemIDRequest(c.Server, teamID, postmortemID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDPriority(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDPriorityRequest(c.Server, teamID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDPriorityWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDPriorityRequestWithBody(c.Server, teamID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDPriority(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDPriorityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDPriorityRequest(c.Server, teamID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) DeleteAPIAccountTeamsTeamIDPriorityPriorityID(ctx context.Context, teamID string, priorityID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIAccountTeamsTeamIDPriorityPriorityIDRequest(c.Server, teamID, priorityID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDPriorityPriorityID(ctx context.Context, teamID string, priorityID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDPriorityPriorityIDRequest(c.Server, teamID, priorityID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDPriorityPriorityIDWithBody(ctx context.Context, teamID string, priorityID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDPriorityPriorityIDRequestWithBody(c.Server, teamID, priorityID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDPriorityPriorityID(ctx context.Context, teamID string, priorityID string, body PutAPIAccountTeamsTeamIDPriorityPriorityIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDPriorityPriorityIDRequest(c.Server, teamID, priorityID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDRoles(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDRolesRequest(c.Server, teamID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDRolesWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDRolesRequestWithBody(c.Server, teamID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDRoles(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDRolesRequest(c.Server, teamID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) DeleteAPIAccountTeamsTeamIDRolesIncidentRoleID(ctx context.Context, teamID string, incidentRoleID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIAccountTeamsTeamIDRolesIncidentRoleIDRequest(c.Server, teamID, incidentRoleID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDRolesIncidentRoleID(ctx context.Context, teamID string, incidentRoleID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDRolesIncidentRoleIDRequest(c.Server, teamID, incidentRoleID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDRolesIncidentRoleIDWithBody(ctx context.Context, teamID string, incidentRoleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDRolesIncidentRoleIDRequestWithBody(c.Server, teamID, incidentRoleID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDRolesIncidentRoleID(ctx context.Context, teamID string, incidentRoleID string, body PutAPIAccountTeamsTeamIDRolesIncidentRoleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDRolesIncidentRoleIDRequest(c.Server, teamID, incidentRoleID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDSchedules(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDSchedulesRequest(c.Server, teamID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDSchedulesWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDSchedulesRequestWithBody(c.Server, teamID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDSchedules(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDSchedulesRequest(c.Server, teamID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) DeleteAPIAccountTeamsTeamIDSchedulesScheduleID(ctx context.Context, teamID string, scheduleID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIAccountTeamsTeamIDSchedulesScheduleIDRequest(c.Server, teamID, scheduleID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDSchedulesScheduleID(ctx context.Context, teamID string, scheduleID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDSchedulesScheduleIDRequest(c.Server, teamID, scheduleID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDSchedulesScheduleIDWithBody(ctx context.Context, teamID string, scheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDSchedulesScheduleIDRequestWithBody(c.Server, teamID, scheduleID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDSchedulesScheduleID(ctx context.Context, teamID string, scheduleID string, body PutAPIAccountTeamsTeamIDSchedulesScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDSchedulesScheduleIDRequest(c.Server, teamID, scheduleID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDServices(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDServicesRequest(c.Server, teamID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDServicesWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDServicesRequestWithBody(c.Server, teamID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDServices(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDServicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDServicesRequest(c.Server, teamID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) DeleteAPIAccountTeamsTeamIDServicesServiceID(ctx context.Context, teamID string, serviceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIAccountTeamsTeamIDServicesServiceIDRequest(c.Server, teamID, serviceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDServicesServiceID(ctx context.Context, teamID string, serviceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDServicesServiceIDRequest(c.Server, teamID, serviceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDServicesServiceIDWithBody(ctx context.Context, teamID string, serviceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDServicesServiceIDRequestWithBody(c.Server, teamID, serviceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDServicesServiceID(ctx context.Context, teamID string, serviceID string, body PutAPIAccountTeamsTeamIDServicesServiceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDServicesServiceIDRequest(c.Server, teamID, serviceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDServicesServiceIDIntegrations(ctx context.Context, teamID string, serviceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRequest(c.Server, teamID, serviceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsWithBody(ctx context.Context, teamID string, serviceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRequestWithBody(c.Server, teamID, serviceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDServicesServiceIDIntegrations(ctx context.Context, teamID string, serviceID string, body PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRequest(c.Server, teamID, serviceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationID(ctx context.Context, teamID string, serviceID string, integrationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRequest(c.Server, teamID, serviceID, integrationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationID(ctx context.Context, teamID string, serviceID string, integrationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRequest(c.Server, teamID, serviceID, integrationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDWithBody(ctx context.Context, teamID string, serviceID string, integrationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRequestWithBody(c.Server, teamID, serviceID, integrationID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationID(ctx context.Context, teamID string, serviceID string, integrationID string, body PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRequest(c.Server, teamID, serviceID, integrationID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDAlerts(ctx context.Context, teamID string, serviceID string, integrationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDAlertsRequest(c.Server, teamID, serviceID, integrationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformers(ctx context.Context, teamID string, serviceID string, integrationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRequest(c.Server, teamID, serviceID, integrationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersWithBody(ctx context.Context, teamID string, serviceID string, integrationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRequestWithBody(c.Server, teamID, serviceID, integrationID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformers(ctx context.Context, teamID string, serviceID string, integrationID string, body PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRequest(c.Server, teamID, serviceID, integrationID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDSLA(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDSLARequest(c.Server, teamID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDSLAWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDSLARequestWithBody(c.Server, teamID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDSLA(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDSLAJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDSLARequest(c.Server, teamID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) DeleteAPIAccountTeamsTeamIDSLASLAID(ctx context.Context, teamID string, slaid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIAccountTeamsTeamIDSLASLAIDRequest(c.Server, teamID, slaid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDSLASLAID(ctx context.Context, teamID string, slaid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDSLASLAIDRequest(c.Server, teamID, slaid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDSLASLAIDWithBody(ctx context.Context, teamID string, slaid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDSLASLAIDRequestWithBody(c.Server, teamID, slaid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDSLASLAID(ctx context.Context, teamID string, slaid string, body PutAPIAccountTeamsTeamIDSLASLAIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDSLASLAIDRequest(c.Server, teamID, slaid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDTags(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDTagsRequest(c.Server, teamID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDTagsWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDTagsRequestWithBody(c.Server, teamID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDTags(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDTagsRequest(c.Server, teamID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) DeleteAPIAccountTeamsTeamIDTagsTagID(ctx context.Context, teamID string, tagID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIAccountTeamsTeamIDTagsTagIDRequest(c.Server, teamID, tagID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDTagsTagID(ctx context.Context, teamID string, tagID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDTagsTagIDRequest(c.Server, teamID, tagID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDTagsTagIDWithBody(ctx context.Context, teamID string, tagID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDTagsTagIDRequestWithBody(c.Server, teamID, tagID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDTagsTagID(ctx context.Context, teamID string, tagID string, body PutAPIAccountTeamsTeamIDTagsTagIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDTagsTagIDRequest(c.Server, teamID, tagID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDTaskTemplates(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDTaskTemplatesRequest(c.Server, teamID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDTaskTemplatesWithBody(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDTaskTemplatesRequestWithBody(c.Server, teamID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountTeamsTeamIDTaskTemplates(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDTaskTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountTeamsTeamIDTaskTemplatesRequest(c.Server, teamID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) DeleteAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateID(ctx context.Context, teamID string, taskTemplateID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRequest(c.Server, teamID, taskTemplateID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateID(ctx context.Context, teamID string, taskTemplateID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRequest(c.Server, teamID, taskTemplateID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDWithBody(ctx context.Context, teamID string, taskTemplateID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRequestWithBody(c.Server, teamID, taskTemplateID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateID(ctx context.Context, teamID string, taskTemplateID string, body PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRequest(c.Server, teamID, taskTemplateID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountUsersUsernameContacts(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountUsersUsernameContactsRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountUsersUsernameContactsWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountUsersUsernameContactsRequestWithBody(c.Server, username, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountUsersUsernameContacts(ctx context.Context, username string, body PostAPIAccountUsersUsernameContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountUsersUsernameContactsRequest(c.Server, username, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) DeleteAPIAccountUsersUsernameContactsContactID(ctx context.Context, username string, contactID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIAccountUsersUsernameContactsContactIDRequest(c.Server, username, contactID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountUsersUsernameContactsContactID(ctx context.Context, username string, contactID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountUsersUsernameContactsContactIDRequest(c.Server, username, contactID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountUsersUsernameCustomroles(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountUsersUsernameCustomrolesRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountUsersUsernameCustomrolesWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountUsersUsernameCustomrolesRequestWithBody(c.Server, username, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountUsersUsernameCustomroles(ctx context.Context, username string, body PostAPIAccountUsersUsernameCustomrolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountUsersUsernameCustomrolesRequest(c.Server, username, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountUsersUsernameForwardingRules(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountUsersUsernameForwardingRulesRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountUsersUsernameForwardingRulesWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountUsersUsernameForwardingRulesRequestWithBody(c.Server, username, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountUsersUsernameForwardingRules(ctx context.Context, username string, body PostAPIAccountUsersUsernameForwardingRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountUsersUsernameForwardingRulesRequest(c.Server, username, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) DeleteAPIAccountUsersUsernameForwardingRulesForwardingRuleID(ctx context.Context, username string, forwardingRuleID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRequest(c.Server, username, forwardingRuleID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountUsersUsernameForwardingRulesForwardingRuleID(ctx context.Context, username string, forwardingRuleID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRequest(c.Server, username, forwardingRuleID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountUsersUsernameNotificationRules(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountUsersUsernameNotificationRulesRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountUsersUsernameNotificationRulesWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountUsersUsernameNotificationRulesRequestWithBody(c.Server, username, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIAccountUsersUsernameNotificationRules(ctx context.Context, username string, body PostAPIAccountUsersUsernameNotificationRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIAccountUsersUsernameNotificationRulesRequest(c.Server, username, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) DeleteAPIAccountUsersUsernameNotificationRulesNotificationRuleID(ctx context.Context, username string, notificationRuleID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRequest(c.Server, username, notificationRuleID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountUsersUsernameNotificationRulesNotificationRuleID(ctx context.Context, username string, notificationRuleID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRequest(c.Server, username, notificationRuleID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAlertStatusTraceID(ctx context.Context, traceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAlertStatusTraceIDRequest(c.Server, traceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIEventsIntegrationKeyWithBody(ctx context.Context, integrationKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIEventsIntegrationKeyRequestWithBody(c.Server, integrationKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIEventsIntegrationKey(ctx context.Context, integrationKey string, body PostAPIEventsIntegrationKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIEventsIntegrationKeyRequest(c.Server, integrationKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIIncidentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIIncidentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIIncidents(ctx context.Context, body PostAPIIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIIncidentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIIncidentsFilterWithBody(ctx context.Context, params *PostAPIIncidentsFilterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIIncidentsFilterRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIIncidentsFilter(ctx context.Context, params *PostAPIIncidentsFilterParams, body PostAPIIncidentsFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIIncidentsFilterRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIIncidentsIncidentNumber(ctx context.Context, incidentNumber string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIIncidentsIncidentNumberRequest(c.Server, incidentNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIIncidentsIncidentNumberWithBody(ctx context.Context, incidentNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIIncidentsIncidentNumberRequestWithBody(c.Server, incidentNumber, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIIncidentsIncidentNumber(ctx context.Context, incidentNumber string, body PutAPIIncidentsIncidentNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIIncidentsIncidentNumberRequest(c.Server, incidentNumber, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIIncidentsIncidentNumberAlerts(ctx context.Context, incidentNumber string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIIncidentsIncidentNumberAlertsRequest(c.Server, incidentNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIIncidentsIncidentNumberNote(ctx context.Context, incidentNumber string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIIncidentsIncidentNumberNoteRequest(c.Server, incidentNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIIncidentsIncidentNumberNoteWithBody(ctx context.Context, incidentNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIIncidentsIncidentNumberNoteRequestWithBody(c.Server, incidentNumber, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIIncidentsIncidentNumberNote(ctx context.Context, incidentNumber string, body PostAPIIncidentsIncidentNumberNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIIncidentsIncidentNumberNoteRequest(c.Server, incidentNumber, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) DeleteAPIIncidentsIncidentNumberNoteNoteUniqueID(ctx context.Context, incidentNumber string, noteUniqueID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIIncidentsIncidentNumberNoteNoteUniqueIDRequest(c.Server, incidentNumber, noteUniqueID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIIncidentsIncidentNumberNoteNoteUniqueID(ctx context.Context, incidentNumber string, noteUniqueID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIIncidentsIncidentNumberNoteNoteUniqueIDRequest(c.Server, incidentNumber, noteUniqueID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIIncidentsIncidentNumberNoteNoteUniqueIDWithBody(ctx context.Context, incidentNumber string, noteUniqueID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIIncidentsIncidentNumberNoteNoteUniqueIDRequestWithBody(c.Server, incidentNumber, noteUniqueID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIIncidentsIncidentNumberNoteNoteUniqueID(ctx context.Context, incidentNumber string, noteUniqueID string, body PutAPIIncidentsIncidentNumberNoteNoteUniqueIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIIncidentsIncidentNumberNoteNoteUniqueIDRequest(c.Server, incidentNumber, noteUniqueID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIIncidentsIncidentNumberResponders(ctx context.Context, incidentNumber string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIIncidentsIncidentNumberRespondersRequest(c.Server, incidentNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIIncidentsIncidentNumberRespondersWithBody(ctx context.Context, incidentNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIIncidentsIncidentNumberRespondersRequestWithBody(c.Server, incidentNumber, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIIncidentsIncidentNumberResponders(ctx context.Context, incidentNumber string, body PostAPIIncidentsIncidentNumberRespondersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIIncidentsIncidentNumberRespondersRequest(c.Server, incidentNumber, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) DeleteAPIIncidentsIncidentNumberRespondersUniqueID(ctx context.Context, incidentNumber string, uniqueID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIIncidentsIncidentNumberRespondersUniqueIDRequest(c.Server, incidentNumber, uniqueID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIIncidentsIncidentNumberRespondersUniqueID(ctx context.Context, incidentNumber string, uniqueID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIIncidentsIncidentNumberRespondersUniqueIDRequest(c.Server, incidentNumber, uniqueID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIIncidentsIncidentNumberTags(ctx context.Context, incidentNumber string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIIncidentsIncidentNumberTagsRequest(c.Server, incidentNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIIncidentsIncidentNumberTagsWithBody(ctx context.Context, incidentNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIIncidentsIncidentNumberTagsRequestWithBody(c.Server, incidentNumber, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIIncidentsIncidentNumberTags(ctx context.Context, incidentNumber string, body PostAPIIncidentsIncidentNumberTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIIncidentsIncidentNumberTagsRequest(c.Server, incidentNumber, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) DeleteAPIIncidentsIncidentNumberTagsTagUniqueID(ctx context.Context, incidentNumber string, tagUniqueID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIIncidentsIncidentNumberTagsTagUniqueIDRequest(c.Server, incidentNumber, tagUniqueID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIIncidentsIncidentNumberTagsTagUniqueID(ctx context.Context, incidentNumber string, tagUniqueID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIIncidentsIncidentNumberTagsTagUniqueIDRequest(c.Server, incidentNumber, tagUniqueID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PatchAPIIncidentsUniqueIDWithBody(ctx context.Context, uniqueID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAPIIncidentsUniqueIDRequestWithBody(c.Server, uniqueID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PatchAPIIncidentsUniqueID(ctx context.Context, uniqueID string, body PatchAPIIncidentsUniqueIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAPIIncidentsUniqueIDRequest(c.Server, uniqueID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIV2AccountEventsRouter(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV2AccountEventsRouterRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIV2AccountEventsRouterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV2AccountEventsRouterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIV2AccountEventsRouter(ctx context.Context, body PostAPIV2AccountEventsRouterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV2AccountEventsRouterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) DeleteAPIV2AccountEventsRouterRouterID(ctx context.Context, routerID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIV2AccountEventsRouterRouterIDRequest(c.Server, routerID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIV2AccountEventsRouterRouterID(ctx context.Context, routerID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV2AccountEventsRouterRouterIDRequest(c.Server, routerID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIV2AccountEventsRouterRouterIDWithBody(ctx context.Context, routerID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV2AccountEventsRouterRouterIDRequestWithBody(c.Server, routerID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIV2AccountEventsRouterRouterID(ctx context.Context, routerID string, body PutAPIV2AccountEventsRouterRouterIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV2AccountEventsRouterRouterIDRequest(c.Server, routerID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIV2AccountEventsRouterRouterIDRulesets(ctx context.Context, routerID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV2AccountEventsRouterRouterIDRulesetsRequest(c.Server, routerID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIV2AccountEventsRouterRouterIDRulesetsWithBody(ctx context.Context, routerID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV2AccountEventsRouterRouterIDRulesetsRequestWithBody(c.Server, routerID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIV2AccountEventsRouterRouterIDRulesets(ctx context.Context, routerID string, body PostAPIV2AccountEventsRouterRouterIDRulesetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV2AccountEventsRouterRouterIDRulesetsRequest(c.Server, routerID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIV2AccountEventsRouterRouterIDRulesetsWithBody(ctx context.Context, routerID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV2AccountEventsRouterRouterIDRulesetsRequestWithBody(c.Server, routerID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIV2AccountEventsRouterRouterIDRulesets(ctx context.Context, routerID string, body PutAPIV2AccountEventsRouterRouterIDRulesetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV2AccountEventsRouterRouterIDRulesetsRequest(c.Server, routerID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) DeleteAPIV2AccountEventsRouterRouterIDRulesetsRulesetID(ctx context.Context, routerID string, rulesetID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRequest(c.Server, routerID, rulesetID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIV2AccountEventsRouterRouterIDRulesetsRulesetID(ctx context.Context, routerID string, rulesetID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRequest(c.Server, routerID, rulesetID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDWithBody(ctx context.Context, routerID string, rulesetID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRequestWithBody(c.Server, routerID, rulesetID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetID(ctx context.Context, routerID string, rulesetID string, body PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRequest(c.Server, routerID, rulesetID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIV2AccountTeamsTeamIDEscalationPoliciesEpIDOncall(ctx context.Context, teamID string, epid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV2AccountTeamsTeamIDEscalationPoliciesEpIDOncallRequest(c.Server, teamID, epid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIV2AccountTeamsTeamIDOncall(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV2AccountTeamsTeamIDOncallRequest(c.Server, teamID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverrides(ctx context.Context, teamID string, scheduleID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRequest(c.Server, teamID, scheduleID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesWithBody(ctx context.Context, teamID string, scheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRequestWithBody(c.Server, teamID, scheduleID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverrides(ctx context.Context, teamID string, scheduleID string, body PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRequest(c.Server, teamID, scheduleID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIV2AccountTeamsTeamIDServicesServiceIDOncall(ctx context.Context, teamID string, serviceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV2AccountTeamsTeamIDServicesServiceIDOncallRequest(c.Server, teamID, serviceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostIntegrationAccountIDGenericIntegrationKeyWithBody(ctx context.Context, accountID string, integrationKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationAccountIDGenericIntegrationKeyRequestWithBody(c.Server, accountID, integrationKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PostIntegrationAccountIDGenericIntegrationKey(ctx context.Context, accountID string, integrationKey string, body PostIntegrationAccountIDGenericIntegrationKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationAccountIDGenericIntegrationKeyRequest(c.Server, accountID, integrationKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersID(ctx context.Context, teamID string, serviceID string, integrationID string, transformersID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRequest(c.Server, teamID, serviceID, integrationID, transformersID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersID(ctx context.Context, teamID string, serviceID string, integrationID string, transformersID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRequest(c.Server, teamID, serviceID, integrationID, transformersID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDWithBody(ctx context.Context, teamID string, serviceID string, integrationID string, transformersID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRequestWithBody(c.Server, teamID, serviceID, integrationID, transformersID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Zenduty) PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersID(ctx context.Context, teamID string, serviceID string, integrationID string, transformersID string, body PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRequest(c.Server, teamID, serviceID, integrationID, transformersID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAPIAccountAPIInviteRequest calls the generic PostAPIAccountAPIInvite builder with application/json body
func NewPostAPIAccountAPIInviteRequest(server string, body PostAPIAccountAPIInviteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIAccountAPIInviteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAPIAccountAPIInviteRequestWithBody generates requests for PostAPIAccountAPIInvite with any type of body
func NewPostAPIAccountAPIInviteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/api_invite/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIAccountCustomrolesRequest generates requests for GetAPIAccountCustomroles
func NewGetAPIAccountCustomrolesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/customroles/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIAccountCustomrolesRequest calls the generic PostAPIAccountCustomroles builder with application/json body
func NewPostAPIAccountCustomrolesRequest(server string, body PostAPIAccountCustomrolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIAccountCustomrolesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAPIAccountCustomrolesRequestWithBody generates requests for PostAPIAccountCustomroles with any type of body
func NewPostAPIAccountCustomrolesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/customroles/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIAccountCustomrolesCustomRoleIDRequest generates requests for DeleteAPIAccountCustomrolesCustomRoleID
func NewDeleteAPIAccountCustomrolesCustomRoleIDRequest(server string, customRoleID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "custom_role_id", runtime.ParamLocationPath, customRoleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/customroles/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIAccountCustomrolesCustomRoleIDRequest generates requests for GetAPIAccountCustomrolesCustomRoleID
func NewGetAPIAccountCustomrolesCustomRoleIDRequest(server string, customRoleID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "custom_role_id", runtime.ParamLocationPath, customRoleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/customroles/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIAccountCustomrolesCustomRoleIDRequest calls the generic PutAPIAccountCustomrolesCustomRoleID builder with application/json body
func NewPutAPIAccountCustomrolesCustomRoleIDRequest(server string, customRoleID string, body PutAPIAccountCustomrolesCustomRoleIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIAccountCustomrolesCustomRoleIDRequestWithBody(server, customRoleID, "application/json", bodyReader)
}

// NewPutAPIAccountCustomrolesCustomRoleIDRequestWithBody generates requests for PutAPIAccountCustomrolesCustomRoleID with any type of body
func NewPutAPIAccountCustomrolesCustomRoleIDRequestWithBody(server string, customRoleID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "custom_role_id", runtime.ParamLocationPath, customRoleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/customroles/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAPIAccountDeleteuserRequest calls the generic PostAPIAccountDeleteuser builder with application/json body
func NewPostAPIAccountDeleteuserRequest(server string, body PostAPIAccountDeleteuserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIAccountDeleteuserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAPIAccountDeleteuserRequestWithBody generates requests for PostAPIAccountDeleteuser with any type of body
func NewPostAPIAccountDeleteuserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/deleteuser/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIAccountMembersRequest generates requests for GetAPIAccountMembers
func NewGetAPIAccountMembersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/members/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIAccountMembersUsernameRequest generates requests for GetAPIAccountMembersUsername
func NewGetAPIAccountMembersUsernameRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIAccountMembersUsernameRequest calls the generic PutAPIAccountMembersUsername builder with application/json body
func NewPutAPIAccountMembersUsernameRequest(server string, username string, body PutAPIAccountMembersUsernameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIAccountMembersUsernameRequestWithBody(server, username, "application/json", bodyReader)
}

// NewPutAPIAccountMembersUsernameRequestWithBody generates requests for PutAPIAccountMembersUsername with any type of body
func NewPutAPIAccountMembersUsernameRequestWithBody(server string, username string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAPIAccountRegenerateIntegrationKeyRequest calls the generic PostAPIAccountRegenerateIntegrationKey builder with application/json body
func NewPostAPIAccountRegenerateIntegrationKeyRequest(server string, body PostAPIAccountRegenerateIntegrationKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIAccountRegenerateIntegrationKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAPIAccountRegenerateIntegrationKeyRequestWithBody generates requests for PostAPIAccountRegenerateIntegrationKey with any type of body
func NewPostAPIAccountRegenerateIntegrationKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/regenerate_integration_key/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIAccountTeamsRequest generates requests for GetAPIAccountTeams
func NewGetAPIAccountTeamsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIAccountTeamsRequest calls the generic PostAPIAccountTeams builder with application/json body
func NewPostAPIAccountTeamsRequest(server string, body PostAPIAccountTeamsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIAccountTeamsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAPIAccountTeamsRequestWithBody generates requests for PostAPIAccountTeams with any type of body
func NewPostAPIAccountTeamsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIAccountTeamsTeamIDRequest generates requests for DeleteAPIAccountTeamsTeamID
func NewDeleteAPIAccountTeamsTeamIDRequest(server string, teamID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDRequest generates requests for GetAPIAccountTeamsTeamID
func NewGetAPIAccountTeamsTeamIDRequest(server string, teamID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIAccountTeamsTeamIDRequest calls the generic PutAPIAccountTeamsTeamID builder with application/json body
func NewPutAPIAccountTeamsTeamIDRequest(server string, teamID string, body PutAPIAccountTeamsTeamIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIAccountTeamsTeamIDRequestWithBody(server, teamID, "application/json", bodyReader)
}

// NewPutAPIAccountTeamsTeamIDRequestWithBody generates requests for PutAPIAccountTeamsTeamID with any type of body
func NewPutAPIAccountTeamsTeamIDRequestWithBody(server string, teamID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDEscalationPoliciesRequest generates requests for GetAPIAccountTeamsTeamIDEscalationPolicies
func NewGetAPIAccountTeamsTeamIDEscalationPoliciesRequest(server string, teamID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/escalation_policies/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIAccountTeamsTeamIDEscalationPoliciesRequest calls the generic PostAPIAccountTeamsTeamIDEscalationPolicies builder with application/json body
func NewPostAPIAccountTeamsTeamIDEscalationPoliciesRequest(server string, teamID string, body PostAPIAccountTeamsTeamIDEscalationPoliciesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIAccountTeamsTeamIDEscalationPoliciesRequestWithBody(server, teamID, "application/json", bodyReader)
}

// NewPostAPIAccountTeamsTeamIDEscalationPoliciesRequestWithBody generates requests for PostAPIAccountTeamsTeamIDEscalationPolicies with any type of body
func NewPostAPIAccountTeamsTeamIDEscalationPoliciesRequestWithBody(server string, teamID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/escalation_policies/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRequest generates requests for DeleteAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyID
func NewDeleteAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRequest(server string, teamID string, escalationPolicyID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "escalation_policy_id", runtime.ParamLocationPath, escalationPolicyID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/escalation_policies/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRequest generates requests for GetAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyID
func NewGetAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRequest(server string, teamID string, escalationPolicyID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "escalation_policy_id", runtime.ParamLocationPath, escalationPolicyID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/escalation_policies/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRequest calls the generic PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyID builder with application/json body
func NewPutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRequest(server string, teamID string, escalationPolicyID string, body PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRequestWithBody(server, teamID, escalationPolicyID, "application/json", bodyReader)
}

// NewPutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRequestWithBody generates requests for PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyID with any type of body
func NewPutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRequestWithBody(server string, teamID string, escalationPolicyID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "escalation_policy_id", runtime.ParamLocationPath, escalationPolicyID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/escalation_policies/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDMaintenanceRequest generates requests for GetAPIAccountTeamsTeamIDMaintenance
func NewGetAPIAccountTeamsTeamIDMaintenanceRequest(server string, teamID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/maintenance/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIAccountTeamsTeamIDMaintenanceRequest calls the generic PostAPIAccountTeamsTeamIDMaintenance builder with application/json body
func NewPostAPIAccountTeamsTeamIDMaintenanceRequest(server string, teamID string, body PostAPIAccountTeamsTeamIDMaintenanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIAccountTeamsTeamIDMaintenanceRequestWithBody(server, teamID, "application/json", bodyReader)
}

// NewPostAPIAccountTeamsTeamIDMaintenanceRequestWithBody generates requests for PostAPIAccountTeamsTeamIDMaintenance with any type of body
func NewPostAPIAccountTeamsTeamIDMaintenanceRequestWithBody(server string, teamID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/maintenance/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRequest generates requests for DeleteAPIAccountTeamsTeamIDMaintenanceMaintenanceID
func NewDeleteAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRequest(server string, teamID string, maintenanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "maintenance_id", runtime.ParamLocationPath, maintenanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/maintenance/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRequest generates requests for GetAPIAccountTeamsTeamIDMaintenanceMaintenanceID
func NewGetAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRequest(server string, teamID string, maintenanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "maintenance_id", runtime.ParamLocationPath, maintenanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/maintenance/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRequest calls the generic PutAPIAccountTeamsTeamIDMaintenanceMaintenanceID builder with application/json body
func NewPutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRequest(server string, teamID string, maintenanceID string, body PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRequestWithBody(server, teamID, maintenanceID, "application/json", bodyReader)
}

// NewPutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRequestWithBody generates requests for PutAPIAccountTeamsTeamIDMaintenanceMaintenanceID with any type of body
func NewPutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRequestWithBody(server string, teamID string, maintenanceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "maintenance_id", runtime.ParamLocationPath, maintenanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/maintenance/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDMembersRequest generates requests for GetAPIAccountTeamsTeamIDMembers
func NewGetAPIAccountTeamsTeamIDMembersRequest(server string, teamID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/members/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIAccountTeamsTeamIDMembersRequest calls the generic PostAPIAccountTeamsTeamIDMembers builder with application/json body
func NewPostAPIAccountTeamsTeamIDMembersRequest(server string, teamID string, body PostAPIAccountTeamsTeamIDMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIAccountTeamsTeamIDMembersRequestWithBody(server, teamID, "application/json", bodyReader)
}

// NewPostAPIAccountTeamsTeamIDMembersRequestWithBody generates requests for PostAPIAccountTeamsTeamIDMembers with any type of body
func NewPostAPIAccountTeamsTeamIDMembersRequestWithBody(server string, teamID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/members/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIAccountTeamsTeamIDMembersMemberIDRequest generates requests for DeleteAPIAccountTeamsTeamIDMembersMemberID
func NewDeleteAPIAccountTeamsTeamIDMembersMemberIDRequest(server string, teamID string, memberID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "member_id", runtime.ParamLocationPath, memberID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/members/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDMembersMemberIDRequest generates requests for GetAPIAccountTeamsTeamIDMembersMemberID
func NewGetAPIAccountTeamsTeamIDMembersMemberIDRequest(server string, teamID string, memberID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "member_id", runtime.ParamLocationPath, memberID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/members/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIAccountTeamsTeamIDMembersMemberIDRequest calls the generic PutAPIAccountTeamsTeamIDMembersMemberID builder with application/json body
func NewPutAPIAccountTeamsTeamIDMembersMemberIDRequest(server string, teamID string, memberID string, body PutAPIAccountTeamsTeamIDMembersMemberIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIAccountTeamsTeamIDMembersMemberIDRequestWithBody(server, teamID, memberID, "application/json", bodyReader)
}

// NewPutAPIAccountTeamsTeamIDMembersMemberIDRequestWithBody generates requests for PutAPIAccountTeamsTeamIDMembersMemberID with any type of body
func NewPutAPIAccountTeamsTeamIDMembersMemberIDRequestWithBody(server string, teamID string, memberID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "member_id", runtime.ParamLocationPath, memberID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/members/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDOncallRequest generates requests for GetAPIAccountTeamsTeamIDOncall
func NewGetAPIAccountTeamsTeamIDOncallRequest(server string, teamID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/oncall/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDPermissionsRequest generates requests for GetAPIAccountTeamsTeamIDPermissions
func NewGetAPIAccountTeamsTeamIDPermissionsRequest(server string, teamID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/permissions/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIAccountTeamsTeamIDPermissionsRequest calls the generic PutAPIAccountTeamsTeamIDPermissions builder with application/json body
func NewPutAPIAccountTeamsTeamIDPermissionsRequest(server string, teamID string, body PutAPIAccountTeamsTeamIDPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIAccountTeamsTeamIDPermissionsRequestWithBody(server, teamID, "application/json", bodyReader)
}

// NewPutAPIAccountTeamsTeamIDPermissionsRequestWithBody generates requests for PutAPIAccountTeamsTeamIDPermissions with any type of body
func NewPutAPIAccountTeamsTeamIDPermissionsRequestWithBody(server string, teamID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/permissions/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDPostmortemRequest generates requests for GetAPIAccountTeamsTeamIDPostmortem
func NewGetAPIAccountTeamsTeamIDPostmortemRequest(server string, teamID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/postmortem/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIAccountTeamsTeamIDPostmortemRequest calls the generic PostAPIAccountTeamsTeamIDPostmortem builder with application/json body
func NewPostAPIAccountTeamsTeamIDPostmortemRequest(server string, teamID string, body PostAPIAccountTeamsTeamIDPostmortemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIAccountTeamsTeamIDPostmortemRequestWithBody(server, teamID, "application/json", bodyReader)
}

// NewPostAPIAccountTeamsTeamIDPostmortemRequestWithBody generates requests for PostAPIAccountTeamsTeamIDPostmortem with any type of body
func NewPostAPIAccountTeamsTeamIDPostmortemRequestWithBody(server string, teamID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/postmortem/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIAccountTeamsTeamIDPostmortemPostmortemIDRequest generates requests for DeleteAPIAccountTeamsTeamIDPostmortemPostmortemID
func NewDeleteAPIAccountTeamsTeamIDPostmortemPostmortemIDRequest(server string, teamID string, postmortemID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "postmortem_id", runtime.ParamLocationPath, postmortemID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/postmortem/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDPostmortemPostmortemIDRequest generates requests for GetAPIAccountTeamsTeamIDPostmortemPostmortemID
func NewGetAPIAccountTeamsTeamIDPostmortemPostmortemIDRequest(server string, teamID string, postmortemID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "postmortem_id", runtime.ParamLocationPath, postmortemID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/postmortem/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIAccountTeamsTeamIDPostmortemPostmortemIDRequest calls the generic PutAPIAccountTeamsTeamIDPostmortemPostmortemID builder with application/json body
func NewPutAPIAccountTeamsTeamIDPostmortemPostmortemIDRequest(server string, teamID string, postmortemID string, body PutAPIAccountTeamsTeamIDPostmortemPostmortemIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIAccountTeamsTeamIDPostmortemPostmortemIDRequestWithBody(server, teamID, postmortemID, "application/json", bodyReader)
}

// NewPutAPIAccountTeamsTeamIDPostmortemPostmortemIDRequestWithBody generates requests for PutAPIAccountTeamsTeamIDPostmortemPostmortemID with any type of body
func NewPutAPIAccountTeamsTeamIDPostmortemPostmortemIDRequestWithBody(server string, teamID string, postmortemID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "postmortem_id", runtime.ParamLocationPath, postmortemID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/postmortem/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDPriorityRequest generates requests for GetAPIAccountTeamsTeamIDPriority
func NewGetAPIAccountTeamsTeamIDPriorityRequest(server string, teamID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/priority/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIAccountTeamsTeamIDPriorityRequest calls the generic PostAPIAccountTeamsTeamIDPriority builder with application/json body
func NewPostAPIAccountTeamsTeamIDPriorityRequest(server string, teamID string, body PostAPIAccountTeamsTeamIDPriorityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIAccountTeamsTeamIDPriorityRequestWithBody(server, teamID, "application/json", bodyReader)
}

// NewPostAPIAccountTeamsTeamIDPriorityRequestWithBody generates requests for PostAPIAccountTeamsTeamIDPriority with any type of body
func NewPostAPIAccountTeamsTeamIDPriorityRequestWithBody(server string, teamID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/priority/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIAccountTeamsTeamIDPriorityPriorityIDRequest generates requests for DeleteAPIAccountTeamsTeamIDPriorityPriorityID
func NewDeleteAPIAccountTeamsTeamIDPriorityPriorityIDRequest(server string, teamID string, priorityID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "priority_id", runtime.ParamLocationPath, priorityID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/priority/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDPriorityPriorityIDRequest generates requests for GetAPIAccountTeamsTeamIDPriorityPriorityID
func NewGetAPIAccountTeamsTeamIDPriorityPriorityIDRequest(server string, teamID string, priorityID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "priority_id", runtime.ParamLocationPath, priorityID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/priority/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIAccountTeamsTeamIDPriorityPriorityIDRequest calls the generic PutAPIAccountTeamsTeamIDPriorityPriorityID builder with application/json body
func NewPutAPIAccountTeamsTeamIDPriorityPriorityIDRequest(server string, teamID string, priorityID string, body PutAPIAccountTeamsTeamIDPriorityPriorityIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIAccountTeamsTeamIDPriorityPriorityIDRequestWithBody(server, teamID, priorityID, "application/json", bodyReader)
}

// NewPutAPIAccountTeamsTeamIDPriorityPriorityIDRequestWithBody generates requests for PutAPIAccountTeamsTeamIDPriorityPriorityID with any type of body
func NewPutAPIAccountTeamsTeamIDPriorityPriorityIDRequestWithBody(server string, teamID string, priorityID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "priority_id", runtime.ParamLocationPath, priorityID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/priority/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDRolesRequest generates requests for GetAPIAccountTeamsTeamIDRoles
func NewGetAPIAccountTeamsTeamIDRolesRequest(server string, teamID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/roles/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIAccountTeamsTeamIDRolesRequest calls the generic PostAPIAccountTeamsTeamIDRoles builder with application/json body
func NewPostAPIAccountTeamsTeamIDRolesRequest(server string, teamID string, body PostAPIAccountTeamsTeamIDRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIAccountTeamsTeamIDRolesRequestWithBody(server, teamID, "application/json", bodyReader)
}

// NewPostAPIAccountTeamsTeamIDRolesRequestWithBody generates requests for PostAPIAccountTeamsTeamIDRoles with any type of body
func NewPostAPIAccountTeamsTeamIDRolesRequestWithBody(server string, teamID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/roles/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIAccountTeamsTeamIDRolesIncidentRoleIDRequest generates requests for DeleteAPIAccountTeamsTeamIDRolesIncidentRoleID
func NewDeleteAPIAccountTeamsTeamIDRolesIncidentRoleIDRequest(server string, teamID string, incidentRoleID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "incident_role_id", runtime.ParamLocationPath, incidentRoleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/roles/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDRolesIncidentRoleIDRequest generates requests for GetAPIAccountTeamsTeamIDRolesIncidentRoleID
func NewGetAPIAccountTeamsTeamIDRolesIncidentRoleIDRequest(server string, teamID string, incidentRoleID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "incident_role_id", runtime.ParamLocationPath, incidentRoleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/roles/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIAccountTeamsTeamIDRolesIncidentRoleIDRequest calls the generic PutAPIAccountTeamsTeamIDRolesIncidentRoleID builder with application/json body
func NewPutAPIAccountTeamsTeamIDRolesIncidentRoleIDRequest(server string, teamID string, incidentRoleID string, body PutAPIAccountTeamsTeamIDRolesIncidentRoleIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIAccountTeamsTeamIDRolesIncidentRoleIDRequestWithBody(server, teamID, incidentRoleID, "application/json", bodyReader)
}

// NewPutAPIAccountTeamsTeamIDRolesIncidentRoleIDRequestWithBody generates requests for PutAPIAccountTeamsTeamIDRolesIncidentRoleID with any type of body
func NewPutAPIAccountTeamsTeamIDRolesIncidentRoleIDRequestWithBody(server string, teamID string, incidentRoleID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "incident_role_id", runtime.ParamLocationPath, incidentRoleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/roles/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDSchedulesRequest generates requests for GetAPIAccountTeamsTeamIDSchedules
func NewGetAPIAccountTeamsTeamIDSchedulesRequest(server string, teamID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/schedules/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIAccountTeamsTeamIDSchedulesRequest calls the generic PostAPIAccountTeamsTeamIDSchedules builder with application/json body
func NewPostAPIAccountTeamsTeamIDSchedulesRequest(server string, teamID string, body PostAPIAccountTeamsTeamIDSchedulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIAccountTeamsTeamIDSchedulesRequestWithBody(server, teamID, "application/json", bodyReader)
}

// NewPostAPIAccountTeamsTeamIDSchedulesRequestWithBody generates requests for PostAPIAccountTeamsTeamIDSchedules with any type of body
func NewPostAPIAccountTeamsTeamIDSchedulesRequestWithBody(server string, teamID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/schedules/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIAccountTeamsTeamIDSchedulesScheduleIDRequest generates requests for DeleteAPIAccountTeamsTeamIDSchedulesScheduleID
func NewDeleteAPIAccountTeamsTeamIDSchedulesScheduleIDRequest(server string, teamID string, scheduleID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "schedule_id", runtime.ParamLocationPath, scheduleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/schedules/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDSchedulesScheduleIDRequest generates requests for GetAPIAccountTeamsTeamIDSchedulesScheduleID
func NewGetAPIAccountTeamsTeamIDSchedulesScheduleIDRequest(server string, teamID string, scheduleID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "schedule_id", runtime.ParamLocationPath, scheduleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/schedules/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIAccountTeamsTeamIDSchedulesScheduleIDRequest calls the generic PutAPIAccountTeamsTeamIDSchedulesScheduleID builder with application/json body
func NewPutAPIAccountTeamsTeamIDSchedulesScheduleIDRequest(server string, teamID string, scheduleID string, body PutAPIAccountTeamsTeamIDSchedulesScheduleIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIAccountTeamsTeamIDSchedulesScheduleIDRequestWithBody(server, teamID, scheduleID, "application/json", bodyReader)
}

// NewPutAPIAccountTeamsTeamIDSchedulesScheduleIDRequestWithBody generates requests for PutAPIAccountTeamsTeamIDSchedulesScheduleID with any type of body
func NewPutAPIAccountTeamsTeamIDSchedulesScheduleIDRequestWithBody(server string, teamID string, scheduleID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "schedule_id", runtime.ParamLocationPath, scheduleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/schedules/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDServicesRequest generates requests for GetAPIAccountTeamsTeamIDServices
func NewGetAPIAccountTeamsTeamIDServicesRequest(server string, teamID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/services/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIAccountTeamsTeamIDServicesRequest calls the generic PostAPIAccountTeamsTeamIDServices builder with application/json body
func NewPostAPIAccountTeamsTeamIDServicesRequest(server string, teamID string, body PostAPIAccountTeamsTeamIDServicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIAccountTeamsTeamIDServicesRequestWithBody(server, teamID, "application/json", bodyReader)
}

// NewPostAPIAccountTeamsTeamIDServicesRequestWithBody generates requests for PostAPIAccountTeamsTeamIDServices with any type of body
func NewPostAPIAccountTeamsTeamIDServicesRequestWithBody(server string, teamID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/services/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIAccountTeamsTeamIDServicesServiceIDRequest generates requests for DeleteAPIAccountTeamsTeamIDServicesServiceID
func NewDeleteAPIAccountTeamsTeamIDServicesServiceIDRequest(server string, teamID string, serviceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/services/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDServicesServiceIDRequest generates requests for GetAPIAccountTeamsTeamIDServicesServiceID
func NewGetAPIAccountTeamsTeamIDServicesServiceIDRequest(server string, teamID string, serviceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/services/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIAccountTeamsTeamIDServicesServiceIDRequest calls the generic PutAPIAccountTeamsTeamIDServicesServiceID builder with application/json body
func NewPutAPIAccountTeamsTeamIDServicesServiceIDRequest(server string, teamID string, serviceID string, body PutAPIAccountTeamsTeamIDServicesServiceIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIAccountTeamsTeamIDServicesServiceIDRequestWithBody(server, teamID, serviceID, "application/json", bodyReader)
}

// NewPutAPIAccountTeamsTeamIDServicesServiceIDRequestWithBody generates requests for PutAPIAccountTeamsTeamIDServicesServiceID with any type of body
func NewPutAPIAccountTeamsTeamIDServicesServiceIDRequestWithBody(server string, teamID string, serviceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/services/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRequest generates requests for GetAPIAccountTeamsTeamIDServicesServiceIDIntegrations
func NewGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRequest(server string, teamID string, serviceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/services/%s/integrations/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRequest calls the generic PostAPIAccountTeamsTeamIDServicesServiceIDIntegrations builder with application/json body
func NewPostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRequest(server string, teamID string, serviceID string, body PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRequestWithBody(server, teamID, serviceID, "application/json", bodyReader)
}

// NewPostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRequestWithBody generates requests for PostAPIAccountTeamsTeamIDServicesServiceIDIntegrations with any type of body
func NewPostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRequestWithBody(server string, teamID string, serviceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/services/%s/integrations/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRequest generates requests for DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationID
func NewDeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRequest(server string, teamID string, serviceID string, integrationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "integration_id", runtime.ParamLocationPath, integrationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/services/%s/integrations/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRequest generates requests for GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationID
func NewGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRequest(server string, teamID string, serviceID string, integrationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "integration_id", runtime.ParamLocationPath, integrationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/services/%s/integrations/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRequest calls the generic PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationID builder with application/json body
func NewPutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRequest(server string, teamID string, serviceID string, integrationID string, body PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRequestWithBody(server, teamID, serviceID, integrationID, "application/json", bodyReader)
}

// NewPutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRequestWithBody generates requests for PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationID with any type of body
func NewPutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRequestWithBody(server string, teamID string, serviceID string, integrationID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "integration_id", runtime.ParamLocationPath, integrationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/services/%s/integrations/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDAlertsRequest generates requests for GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDAlerts
func NewGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDAlertsRequest(server string, teamID string, serviceID string, integrationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "integration_id", runtime.ParamLocationPath, integrationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/services/%s/integrations/%s/alerts/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRequest generates requests for GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformers
func NewGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRequest(server string, teamID string, serviceID string, integrationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "integration_id", runtime.ParamLocationPath, integrationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/services/%s/integrations/%s/transformers/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRequest calls the generic PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformers builder with application/json body
func NewPostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRequest(server string, teamID string, serviceID string, integrationID string, body PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRequestWithBody(server, teamID, serviceID, integrationID, "application/json", bodyReader)
}

// NewPostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRequestWithBody generates requests for PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformers with any type of body
func NewPostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRequestWithBody(server string, teamID string, serviceID string, integrationID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "integration_id", runtime.ParamLocationPath, integrationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/services/%s/integrations/%s/transformers/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDSLARequest generates requests for GetAPIAccountTeamsTeamIDSLA
func NewGetAPIAccountTeamsTeamIDSLARequest(server string, teamID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/sla/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIAccountTeamsTeamIDSLARequest calls the generic PostAPIAccountTeamsTeamIDSLA builder with application/json body
func NewPostAPIAccountTeamsTeamIDSLARequest(server string, teamID string, body PostAPIAccountTeamsTeamIDSLAJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIAccountTeamsTeamIDSLARequestWithBody(server, teamID, "application/json", bodyReader)
}

// NewPostAPIAccountTeamsTeamIDSLARequestWithBody generates requests for PostAPIAccountTeamsTeamIDSLA with any type of body
func NewPostAPIAccountTeamsTeamIDSLARequestWithBody(server string, teamID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/sla/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIAccountTeamsTeamIDSLASLAIDRequest generates requests for DeleteAPIAccountTeamsTeamIDSLASLAID
func NewDeleteAPIAccountTeamsTeamIDSLASLAIDRequest(server string, teamID string, slaid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "sla_id", runtime.ParamLocationPath, slaid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/sla/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDSLASLAIDRequest generates requests for GetAPIAccountTeamsTeamIDSLASLAID
func NewGetAPIAccountTeamsTeamIDSLASLAIDRequest(server string, teamID string, slaid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "sla_id", runtime.ParamLocationPath, slaid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/sla/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIAccountTeamsTeamIDSLASLAIDRequest calls the generic PutAPIAccountTeamsTeamIDSLASLAID builder with application/json body
func NewPutAPIAccountTeamsTeamIDSLASLAIDRequest(server string, teamID string, slaid string, body PutAPIAccountTeamsTeamIDSLASLAIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIAccountTeamsTeamIDSLASLAIDRequestWithBody(server, teamID, slaid, "application/json", bodyReader)
}

// NewPutAPIAccountTeamsTeamIDSLASLAIDRequestWithBody generates requests for PutAPIAccountTeamsTeamIDSLASLAID with any type of body
func NewPutAPIAccountTeamsTeamIDSLASLAIDRequestWithBody(server string, teamID string, slaid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "sla_id", runtime.ParamLocationPath, slaid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/sla/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDTagsRequest generates requests for GetAPIAccountTeamsTeamIDTags
func NewGetAPIAccountTeamsTeamIDTagsRequest(server string, teamID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIAccountTeamsTeamIDTagsRequest calls the generic PostAPIAccountTeamsTeamIDTags builder with application/json body
func NewPostAPIAccountTeamsTeamIDTagsRequest(server string, teamID string, body PostAPIAccountTeamsTeamIDTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIAccountTeamsTeamIDTagsRequestWithBody(server, teamID, "application/json", bodyReader)
}

// NewPostAPIAccountTeamsTeamIDTagsRequestWithBody generates requests for PostAPIAccountTeamsTeamIDTags with any type of body
func NewPostAPIAccountTeamsTeamIDTagsRequestWithBody(server string, teamID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIAccountTeamsTeamIDTagsTagIDRequest generates requests for DeleteAPIAccountTeamsTeamIDTagsTagID
func NewDeleteAPIAccountTeamsTeamIDTagsTagIDRequest(server string, teamID string, tagID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tag_id", runtime.ParamLocationPath, tagID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/tags/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDTagsTagIDRequest generates requests for GetAPIAccountTeamsTeamIDTagsTagID
func NewGetAPIAccountTeamsTeamIDTagsTagIDRequest(server string, teamID string, tagID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tag_id", runtime.ParamLocationPath, tagID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/tags/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIAccountTeamsTeamIDTagsTagIDRequest calls the generic PutAPIAccountTeamsTeamIDTagsTagID builder with application/json body
func NewPutAPIAccountTeamsTeamIDTagsTagIDRequest(server string, teamID string, tagID string, body PutAPIAccountTeamsTeamIDTagsTagIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIAccountTeamsTeamIDTagsTagIDRequestWithBody(server, teamID, tagID, "application/json", bodyReader)
}

// NewPutAPIAccountTeamsTeamIDTagsTagIDRequestWithBody generates requests for PutAPIAccountTeamsTeamIDTagsTagID with any type of body
func NewPutAPIAccountTeamsTeamIDTagsTagIDRequestWithBody(server string, teamID string, tagID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tag_id", runtime.ParamLocationPath, tagID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/tags/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDTaskTemplatesRequest generates requests for GetAPIAccountTeamsTeamIDTaskTemplates
func NewGetAPIAccountTeamsTeamIDTaskTemplatesRequest(server string, teamID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/task_templates/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIAccountTeamsTeamIDTaskTemplatesRequest calls the generic PostAPIAccountTeamsTeamIDTaskTemplates builder with application/json body
func NewPostAPIAccountTeamsTeamIDTaskTemplatesRequest(server string, teamID string, body PostAPIAccountTeamsTeamIDTaskTemplatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIAccountTeamsTeamIDTaskTemplatesRequestWithBody(server, teamID, "application/json", bodyReader)
}

// NewPostAPIAccountTeamsTeamIDTaskTemplatesRequestWithBody generates requests for PostAPIAccountTeamsTeamIDTaskTemplates with any type of body
func NewPostAPIAccountTeamsTeamIDTaskTemplatesRequestWithBody(server string, teamID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/task_templates/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRequest generates requests for DeleteAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateID
func NewDeleteAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRequest(server string, teamID string, taskTemplateID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "task_template_id", runtime.ParamLocationPath, taskTemplateID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/task_templates/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRequest generates requests for GetAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateID
func NewGetAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRequest(server string, teamID string, taskTemplateID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "task_template_id", runtime.ParamLocationPath, taskTemplateID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/task_templates/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRequest calls the generic PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateID builder with application/json body
func NewPutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRequest(server string, teamID string, taskTemplateID string, body PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRequestWithBody(server, teamID, taskTemplateID, "application/json", bodyReader)
}

// NewPutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRequestWithBody generates requests for PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateID with any type of body
func NewPutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRequestWithBody(server string, teamID string, taskTemplateID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "task_template_id", runtime.ParamLocationPath, taskTemplateID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/teams/%s/task_templates/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIAccountUsersUsernameContactsRequest generates requests for GetAPIAccountUsersUsernameContacts
func NewGetAPIAccountUsersUsernameContactsRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/users/%s/contacts/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIAccountUsersUsernameContactsRequest calls the generic PostAPIAccountUsersUsernameContacts builder with application/json body
func NewPostAPIAccountUsersUsernameContactsRequest(server string, username string, body PostAPIAccountUsersUsernameContactsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIAccountUsersUsernameContactsRequestWithBody(server, username, "application/json", bodyReader)
}

// NewPostAPIAccountUsersUsernameContactsRequestWithBody generates requests for PostAPIAccountUsersUsernameContacts with any type of body
func NewPostAPIAccountUsersUsernameContactsRequestWithBody(server string, username string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/users/%s/contacts/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIAccountUsersUsernameContactsContactIDRequest generates requests for DeleteAPIAccountUsersUsernameContactsContactID
func NewDeleteAPIAccountUsersUsernameContactsContactIDRequest(server string, username string, contactID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "contact_id", runtime.ParamLocationPath, contactID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/users/%s/contacts/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIAccountUsersUsernameContactsContactIDRequest generates requests for GetAPIAccountUsersUsernameContactsContactID
func NewGetAPIAccountUsersUsernameContactsContactIDRequest(server string, username string, contactID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "contact_id", runtime.ParamLocationPath, contactID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/users/%s/contacts/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIAccountUsersUsernameCustomrolesRequest generates requests for GetAPIAccountUsersUsernameCustomroles
func NewGetAPIAccountUsersUsernameCustomrolesRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/users/%s/customroles/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIAccountUsersUsernameCustomrolesRequest calls the generic PostAPIAccountUsersUsernameCustomroles builder with application/json body
func NewPostAPIAccountUsersUsernameCustomrolesRequest(server string, username string, body PostAPIAccountUsersUsernameCustomrolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIAccountUsersUsernameCustomrolesRequestWithBody(server, username, "application/json", bodyReader)
}

// NewPostAPIAccountUsersUsernameCustomrolesRequestWithBody generates requests for PostAPIAccountUsersUsernameCustomroles with any type of body
func NewPostAPIAccountUsersUsernameCustomrolesRequestWithBody(server string, username string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/users/%s/customroles/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIAccountUsersUsernameForwardingRulesRequest generates requests for GetAPIAccountUsersUsernameForwardingRules
func NewGetAPIAccountUsersUsernameForwardingRulesRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/users/%s/forwarding_rules/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIAccountUsersUsernameForwardingRulesRequest calls the generic PostAPIAccountUsersUsernameForwardingRules builder with application/json body
func NewPostAPIAccountUsersUsernameForwardingRulesRequest(server string, username string, body PostAPIAccountUsersUsernameForwardingRulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIAccountUsersUsernameForwardingRulesRequestWithBody(server, username, "application/json", bodyReader)
}

// NewPostAPIAccountUsersUsernameForwardingRulesRequestWithBody generates requests for PostAPIAccountUsersUsernameForwardingRules with any type of body
func NewPostAPIAccountUsersUsernameForwardingRulesRequestWithBody(server string, username string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/users/%s/forwarding_rules/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRequest generates requests for DeleteAPIAccountUsersUsernameForwardingRulesForwardingRuleID
func NewDeleteAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRequest(server string, username string, forwardingRuleID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "forwarding_rule_id", runtime.ParamLocationPath, forwardingRuleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/users/%s/forwarding_rules/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRequest generates requests for GetAPIAccountUsersUsernameForwardingRulesForwardingRuleID
func NewGetAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRequest(server string, username string, forwardingRuleID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "forwarding_rule_id", runtime.ParamLocationPath, forwardingRuleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/users/%s/forwarding_rules/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIAccountUsersUsernameNotificationRulesRequest generates requests for GetAPIAccountUsersUsernameNotificationRules
func NewGetAPIAccountUsersUsernameNotificationRulesRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/users/%s/notification_rules/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIAccountUsersUsernameNotificationRulesRequest calls the generic PostAPIAccountUsersUsernameNotificationRules builder with application/json body
func NewPostAPIAccountUsersUsernameNotificationRulesRequest(server string, username string, body PostAPIAccountUsersUsernameNotificationRulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIAccountUsersUsernameNotificationRulesRequestWithBody(server, username, "application/json", bodyReader)
}

// NewPostAPIAccountUsersUsernameNotificationRulesRequestWithBody generates requests for PostAPIAccountUsersUsernameNotificationRules with any type of body
func NewPostAPIAccountUsersUsernameNotificationRulesRequestWithBody(server string, username string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/users/%s/notification_rules/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRequest generates requests for DeleteAPIAccountUsersUsernameNotificationRulesNotificationRuleID
func NewDeleteAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRequest(server string, username string, notificationRuleID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "notification_rule_id", runtime.ParamLocationPath, notificationRuleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/users/%s/notification_rules/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRequest generates requests for GetAPIAccountUsersUsernameNotificationRulesNotificationRuleID
func NewGetAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRequest(server string, username string, notificationRuleID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "notification_rule_id", runtime.ParamLocationPath, notificationRuleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/users/%s/notification_rules/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIAlertStatusTraceIDRequest generates requests for GetAPIAlertStatusTraceID
func NewGetAPIAlertStatusTraceIDRequest(server string, traceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trace_id", runtime.ParamLocationPath, traceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alert/status/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIEventsIntegrationKeyRequest calls the generic PostAPIEventsIntegrationKey builder with application/json body
func NewPostAPIEventsIntegrationKeyRequest(server string, integrationKey string, body PostAPIEventsIntegrationKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIEventsIntegrationKeyRequestWithBody(server, integrationKey, "application/json", bodyReader)
}

// NewPostAPIEventsIntegrationKeyRequestWithBody generates requests for PostAPIEventsIntegrationKey with any type of body
func NewPostAPIEventsIntegrationKeyRequestWithBody(server string, integrationKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "integration_key", runtime.ParamLocationPath, integrationKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/events/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAPIIncidentsRequest calls the generic PostAPIIncidents builder with application/json body
func NewPostAPIIncidentsRequest(server string, body PostAPIIncidentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIIncidentsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAPIIncidentsRequestWithBody generates requests for PostAPIIncidents with any type of body
func NewPostAPIIncidentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incidents/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAPIIncidentsFilterRequest calls the generic PostAPIIncidentsFilter builder with application/json body
func NewPostAPIIncidentsFilterRequest(server string, params *PostAPIIncidentsFilterParams, body PostAPIIncidentsFilterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIIncidentsFilterRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostAPIIncidentsFilterRequestWithBody generates requests for PostAPIIncidentsFilter with any type of body
func NewPostAPIIncidentsFilterRequestWithBody(server string, params *PostAPIIncidentsFilterParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incidents/filter/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIIncidentsIncidentNumberRequest generates requests for GetAPIIncidentsIncidentNumber
func NewGetAPIIncidentsIncidentNumberRequest(server string, incidentNumber string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_number", runtime.ParamLocationPath, incidentNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incidents/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIIncidentsIncidentNumberRequest calls the generic PutAPIIncidentsIncidentNumber builder with application/json body
func NewPutAPIIncidentsIncidentNumberRequest(server string, incidentNumber string, body PutAPIIncidentsIncidentNumberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIIncidentsIncidentNumberRequestWithBody(server, incidentNumber, "application/json", bodyReader)
}

// NewPutAPIIncidentsIncidentNumberRequestWithBody generates requests for PutAPIIncidentsIncidentNumber with any type of body
func NewPutAPIIncidentsIncidentNumberRequestWithBody(server string, incidentNumber string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_number", runtime.ParamLocationPath, incidentNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incidents/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIIncidentsIncidentNumberAlertsRequest generates requests for GetAPIIncidentsIncidentNumberAlerts
func NewGetAPIIncidentsIncidentNumberAlertsRequest(server string, incidentNumber string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_number", runtime.ParamLocationPath, incidentNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incidents/%s/alerts/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIIncidentsIncidentNumberNoteRequest generates requests for GetAPIIncidentsIncidentNumberNote
func NewGetAPIIncidentsIncidentNumberNoteRequest(server string, incidentNumber string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_number", runtime.ParamLocationPath, incidentNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incidents/%s/note/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIIncidentsIncidentNumberNoteRequest calls the generic PostAPIIncidentsIncidentNumberNote builder with application/json body
func NewPostAPIIncidentsIncidentNumberNoteRequest(server string, incidentNumber string, body PostAPIIncidentsIncidentNumberNoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIIncidentsIncidentNumberNoteRequestWithBody(server, incidentNumber, "application/json", bodyReader)
}

// NewPostAPIIncidentsIncidentNumberNoteRequestWithBody generates requests for PostAPIIncidentsIncidentNumberNote with any type of body
func NewPostAPIIncidentsIncidentNumberNoteRequestWithBody(server string, incidentNumber string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_number", runtime.ParamLocationPath, incidentNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incidents/%s/note/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIIncidentsIncidentNumberNoteNoteUniqueIDRequest generates requests for DeleteAPIIncidentsIncidentNumberNoteNoteUniqueID
func NewDeleteAPIIncidentsIncidentNumberNoteNoteUniqueIDRequest(server string, incidentNumber string, noteUniqueID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_number", runtime.ParamLocationPath, incidentNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "note_unique_id", runtime.ParamLocationPath, noteUniqueID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incidents/%s/note/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIIncidentsIncidentNumberNoteNoteUniqueIDRequest generates requests for GetAPIIncidentsIncidentNumberNoteNoteUniqueID
func NewGetAPIIncidentsIncidentNumberNoteNoteUniqueIDRequest(server string, incidentNumber string, noteUniqueID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_number", runtime.ParamLocationPath, incidentNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "note_unique_id", runtime.ParamLocationPath, noteUniqueID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incidents/%s/note/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIIncidentsIncidentNumberNoteNoteUniqueIDRequest calls the generic PutAPIIncidentsIncidentNumberNoteNoteUniqueID builder with application/json body
func NewPutAPIIncidentsIncidentNumberNoteNoteUniqueIDRequest(server string, incidentNumber string, noteUniqueID string, body PutAPIIncidentsIncidentNumberNoteNoteUniqueIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIIncidentsIncidentNumberNoteNoteUniqueIDRequestWithBody(server, incidentNumber, noteUniqueID, "application/json", bodyReader)
}

// NewPutAPIIncidentsIncidentNumberNoteNoteUniqueIDRequestWithBody generates requests for PutAPIIncidentsIncidentNumberNoteNoteUniqueID with any type of body
func NewPutAPIIncidentsIncidentNumberNoteNoteUniqueIDRequestWithBody(server string, incidentNumber string, noteUniqueID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_number", runtime.ParamLocationPath, incidentNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "note_unique_id", runtime.ParamLocationPath, noteUniqueID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incidents/%s/note/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIIncidentsIncidentNumberRespondersRequest generates requests for GetAPIIncidentsIncidentNumberResponders
func NewGetAPIIncidentsIncidentNumberRespondersRequest(server string, incidentNumber string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_number", runtime.ParamLocationPath, incidentNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incidents/%s/responders/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIIncidentsIncidentNumberRespondersRequest calls the generic PostAPIIncidentsIncidentNumberResponders builder with application/json body
func NewPostAPIIncidentsIncidentNumberRespondersRequest(server string, incidentNumber string, body PostAPIIncidentsIncidentNumberRespondersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIIncidentsIncidentNumberRespondersRequestWithBody(server, incidentNumber, "application/json", bodyReader)
}

// NewPostAPIIncidentsIncidentNumberRespondersRequestWithBody generates requests for PostAPIIncidentsIncidentNumberResponders with any type of body
func NewPostAPIIncidentsIncidentNumberRespondersRequestWithBody(server string, incidentNumber string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_number", runtime.ParamLocationPath, incidentNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incidents/%s/responders/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIIncidentsIncidentNumberRespondersUniqueIDRequest generates requests for DeleteAPIIncidentsIncidentNumberRespondersUniqueID
func NewDeleteAPIIncidentsIncidentNumberRespondersUniqueIDRequest(server string, incidentNumber string, uniqueID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_number", runtime.ParamLocationPath, incidentNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "unique_id", runtime.ParamLocationPath, uniqueID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incidents/%s/responders/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIIncidentsIncidentNumberRespondersUniqueIDRequest generates requests for GetAPIIncidentsIncidentNumberRespondersUniqueID
func NewGetAPIIncidentsIncidentNumberRespondersUniqueIDRequest(server string, incidentNumber string, uniqueID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_number", runtime.ParamLocationPath, incidentNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "unique_id", runtime.ParamLocationPath, uniqueID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incidents/%s/responders/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIIncidentsIncidentNumberTagsRequest generates requests for GetAPIIncidentsIncidentNumberTags
func NewGetAPIIncidentsIncidentNumberTagsRequest(server string, incidentNumber string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_number", runtime.ParamLocationPath, incidentNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incidents/%s/tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIIncidentsIncidentNumberTagsRequest calls the generic PostAPIIncidentsIncidentNumberTags builder with application/json body
func NewPostAPIIncidentsIncidentNumberTagsRequest(server string, incidentNumber string, body PostAPIIncidentsIncidentNumberTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIIncidentsIncidentNumberTagsRequestWithBody(server, incidentNumber, "application/json", bodyReader)
}

// NewPostAPIIncidentsIncidentNumberTagsRequestWithBody generates requests for PostAPIIncidentsIncidentNumberTags with any type of body
func NewPostAPIIncidentsIncidentNumberTagsRequestWithBody(server string, incidentNumber string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_number", runtime.ParamLocationPath, incidentNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incidents/%s/tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIIncidentsIncidentNumberTagsTagUniqueIDRequest generates requests for DeleteAPIIncidentsIncidentNumberTagsTagUniqueID
func NewDeleteAPIIncidentsIncidentNumberTagsTagUniqueIDRequest(server string, incidentNumber string, tagUniqueID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_number", runtime.ParamLocationPath, incidentNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tag_unique_id", runtime.ParamLocationPath, tagUniqueID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incidents/%s/tags/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIIncidentsIncidentNumberTagsTagUniqueIDRequest generates requests for GetAPIIncidentsIncidentNumberTagsTagUniqueID
func NewGetAPIIncidentsIncidentNumberTagsTagUniqueIDRequest(server string, incidentNumber string, tagUniqueID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_number", runtime.ParamLocationPath, incidentNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tag_unique_id", runtime.ParamLocationPath, tagUniqueID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incidents/%s/tags/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchAPIIncidentsUniqueIDRequest calls the generic PatchAPIIncidentsUniqueID builder with application/json body
func NewPatchAPIIncidentsUniqueIDRequest(server string, uniqueID string, body PatchAPIIncidentsUniqueIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchAPIIncidentsUniqueIDRequestWithBody(server, uniqueID, "application/json", bodyReader)
}

// NewPatchAPIIncidentsUniqueIDRequestWithBody generates requests for PatchAPIIncidentsUniqueID with any type of body
func NewPatchAPIIncidentsUniqueIDRequestWithBody(server string, uniqueID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "unique_id", runtime.ParamLocationPath, uniqueID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/incidents/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIV2AccountEventsRouterRequest generates requests for GetAPIV2AccountEventsRouter
func NewGetAPIV2AccountEventsRouterRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/events/router/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIV2AccountEventsRouterRequest calls the generic PostAPIV2AccountEventsRouter builder with application/json body
func NewPostAPIV2AccountEventsRouterRequest(server string, body PostAPIV2AccountEventsRouterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIV2AccountEventsRouterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAPIV2AccountEventsRouterRequestWithBody generates requests for PostAPIV2AccountEventsRouter with any type of body
func NewPostAPIV2AccountEventsRouterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/events/router/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIV2AccountEventsRouterRouterIDRequest generates requests for DeleteAPIV2AccountEventsRouterRouterID
func NewDeleteAPIV2AccountEventsRouterRouterIDRequest(server string, routerID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "router_id", runtime.ParamLocationPath, routerID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/events/router/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV2AccountEventsRouterRouterIDRequest generates requests for GetAPIV2AccountEventsRouterRouterID
func NewGetAPIV2AccountEventsRouterRouterIDRequest(server string, routerID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "router_id", runtime.ParamLocationPath, routerID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/events/router/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIV2AccountEventsRouterRouterIDRequest calls the generic PutAPIV2AccountEventsRouterRouterID builder with application/json body
func NewPutAPIV2AccountEventsRouterRouterIDRequest(server string, routerID string, body PutAPIV2AccountEventsRouterRouterIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIV2AccountEventsRouterRouterIDRequestWithBody(server, routerID, "application/json", bodyReader)
}

// NewPutAPIV2AccountEventsRouterRouterIDRequestWithBody generates requests for PutAPIV2AccountEventsRouterRouterID with any type of body
func NewPutAPIV2AccountEventsRouterRouterIDRequestWithBody(server string, routerID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "router_id", runtime.ParamLocationPath, routerID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/events/router/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIV2AccountEventsRouterRouterIDRulesetsRequest generates requests for GetAPIV2AccountEventsRouterRouterIDRulesets
func NewGetAPIV2AccountEventsRouterRouterIDRulesetsRequest(server string, routerID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "router_id", runtime.ParamLocationPath, routerID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/events/router/%s/rulesets/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIV2AccountEventsRouterRouterIDRulesetsRequest calls the generic PostAPIV2AccountEventsRouterRouterIDRulesets builder with application/json body
func NewPostAPIV2AccountEventsRouterRouterIDRulesetsRequest(server string, routerID string, body PostAPIV2AccountEventsRouterRouterIDRulesetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIV2AccountEventsRouterRouterIDRulesetsRequestWithBody(server, routerID, "application/json", bodyReader)
}

// NewPostAPIV2AccountEventsRouterRouterIDRulesetsRequestWithBody generates requests for PostAPIV2AccountEventsRouterRouterIDRulesets with any type of body
func NewPostAPIV2AccountEventsRouterRouterIDRulesetsRequestWithBody(server string, routerID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "router_id", runtime.ParamLocationPath, routerID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/events/router/%s/rulesets/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAPIV2AccountEventsRouterRouterIDRulesetsRequest calls the generic PutAPIV2AccountEventsRouterRouterIDRulesets builder with application/json body
func NewPutAPIV2AccountEventsRouterRouterIDRulesetsRequest(server string, routerID string, body PutAPIV2AccountEventsRouterRouterIDRulesetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIV2AccountEventsRouterRouterIDRulesetsRequestWithBody(server, routerID, "application/json", bodyReader)
}

// NewPutAPIV2AccountEventsRouterRouterIDRulesetsRequestWithBody generates requests for PutAPIV2AccountEventsRouterRouterIDRulesets with any type of body
func NewPutAPIV2AccountEventsRouterRouterIDRulesetsRequestWithBody(server string, routerID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "router_id", runtime.ParamLocationPath, routerID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/events/router/%s/rulesets/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRequest generates requests for DeleteAPIV2AccountEventsRouterRouterIDRulesetsRulesetID
func NewDeleteAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRequest(server string, routerID string, rulesetID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "router_id", runtime.ParamLocationPath, routerID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruleset_id", runtime.ParamLocationPath, rulesetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/events/router/%s/rulesets/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRequest generates requests for GetAPIV2AccountEventsRouterRouterIDRulesetsRulesetID
func NewGetAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRequest(server string, routerID string, rulesetID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "router_id", runtime.ParamLocationPath, routerID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruleset_id", runtime.ParamLocationPath, rulesetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/events/router/%s/rulesets/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRequest calls the generic PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetID builder with application/json body
func NewPutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRequest(server string, routerID string, rulesetID string, body PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRequestWithBody(server, routerID, rulesetID, "application/json", bodyReader)
}

// NewPutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRequestWithBody generates requests for PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetID with any type of body
func NewPutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRequestWithBody(server string, routerID string, rulesetID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "router_id", runtime.ParamLocationPath, routerID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruleset_id", runtime.ParamLocationPath, rulesetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/events/router/%s/rulesets/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIV2AccountTeamsTeamIDEscalationPoliciesEpIDOncallRequest generates requests for GetAPIV2AccountTeamsTeamIDEscalationPoliciesEpIDOncall
func NewGetAPIV2AccountTeamsTeamIDEscalationPoliciesEpIDOncallRequest(server string, teamID string, epid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ep_id", runtime.ParamLocationPath, epid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/teams/%s/escalation_policies/%s/oncall/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV2AccountTeamsTeamIDOncallRequest generates requests for GetAPIV2AccountTeamsTeamIDOncall
func NewGetAPIV2AccountTeamsTeamIDOncallRequest(server string, teamID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/teams/%s/oncall/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRequest generates requests for GetAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverrides
func NewGetAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRequest(server string, teamID string, scheduleID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "schedule_id", runtime.ParamLocationPath, scheduleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/teams/%s/schedules/%s/overrides/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRequest calls the generic PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverrides builder with application/json body
func NewPostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRequest(server string, teamID string, scheduleID string, body PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRequestWithBody(server, teamID, scheduleID, "application/json", bodyReader)
}

// NewPostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRequestWithBody generates requests for PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverrides with any type of body
func NewPostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRequestWithBody(server string, teamID string, scheduleID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "schedule_id", runtime.ParamLocationPath, scheduleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/teams/%s/schedules/%s/overrides/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIV2AccountTeamsTeamIDServicesServiceIDOncallRequest generates requests for GetAPIV2AccountTeamsTeamIDServicesServiceIDOncall
func NewGetAPIV2AccountTeamsTeamIDServicesServiceIDOncallRequest(server string, teamID string, serviceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/teams/%s/services/%s/oncall/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIntegrationAccountIDGenericIntegrationKeyRequest calls the generic PostIntegrationAccountIDGenericIntegrationKey builder with application/json body
func NewPostIntegrationAccountIDGenericIntegrationKeyRequest(server string, accountID string, integrationKey string, body PostIntegrationAccountIDGenericIntegrationKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationAccountIDGenericIntegrationKeyRequestWithBody(server, accountID, integrationKey, "application/json", bodyReader)
}

// NewPostIntegrationAccountIDGenericIntegrationKeyRequestWithBody generates requests for PostIntegrationAccountIDGenericIntegrationKey with any type of body
func NewPostIntegrationAccountIDGenericIntegrationKeyRequestWithBody(server string, accountID string, integrationKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "integration_key", runtime.ParamLocationPath, integrationKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integration/%s/generic/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRequest generates requests for DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersID
func NewDeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRequest(server string, teamID string, serviceID string, integrationID string, transformersID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "integration_id", runtime.ParamLocationPath, integrationID)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "transformers_id", runtime.ParamLocationPath, transformersID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("api/account/teams/%s/services/%s/integrations/%s/transformers/%s/", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRequest generates requests for GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersID
func NewGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRequest(server string, teamID string, serviceID string, integrationID string, transformersID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "integration_id", runtime.ParamLocationPath, integrationID)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "transformers_id", runtime.ParamLocationPath, transformersID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("api/account/teams/%s/services/%s/integrations/%s/transformers/%s/", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRequest calls the generic PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersID builder with application/json body
func NewPatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRequest(server string, teamID string, serviceID string, integrationID string, transformersID string, body PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRequestWithBody(server, teamID, serviceID, integrationID, transformersID, "application/json", bodyReader)
}

// NewPatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRequestWithBody generates requests for PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersID with any type of body
func NewPatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRequestWithBody(server string, teamID string, serviceID string, integrationID string, transformersID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "integration_id", runtime.ParamLocationPath, integrationID)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "transformers_id", runtime.ParamLocationPath, transformersID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("api/account/teams/%s/services/%s/integrations/%s/transformers/%s/", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Zenduty) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Zenduty) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAPIAccountAPIInviteWithBodyWithResponse request with any body
	PostAPIAccountAPIInviteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountAPIInviteRes, error)

	PostAPIAccountAPIInviteWithResponse(ctx context.Context, body PostAPIAccountAPIInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountAPIInviteRes, error)

	// GetAPIAccountCustomrolesWithResponse request
	GetAPIAccountCustomrolesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIAccountCustomrolesRes, error)

	// PostAPIAccountCustomrolesWithBodyWithResponse request with any body
	PostAPIAccountCustomrolesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountCustomrolesRes, error)

	PostAPIAccountCustomrolesWithResponse(ctx context.Context, body PostAPIAccountCustomrolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountCustomrolesRes, error)

	// DeleteAPIAccountCustomrolesCustomRoleIDWithResponse request
	DeleteAPIAccountCustomrolesCustomRoleIDWithResponse(ctx context.Context, customRoleID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountCustomrolesCustomRoleIDRes, error)

	// GetAPIAccountCustomrolesCustomRoleIDWithResponse request
	GetAPIAccountCustomrolesCustomRoleIDWithResponse(ctx context.Context, customRoleID string, reqEditors ...RequestEditorFn) (*GetAPIAccountCustomrolesCustomRoleIDRes, error)

	// PutAPIAccountCustomrolesCustomRoleIDWithBodyWithResponse request with any body
	PutAPIAccountCustomrolesCustomRoleIDWithBodyWithResponse(ctx context.Context, customRoleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountCustomrolesCustomRoleIDRes, error)

	PutAPIAccountCustomrolesCustomRoleIDWithResponse(ctx context.Context, customRoleID string, body PutAPIAccountCustomrolesCustomRoleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountCustomrolesCustomRoleIDRes, error)

	// PostAPIAccountDeleteuserWithBodyWithResponse request with any body
	PostAPIAccountDeleteuserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountDeleteuserRes, error)

	PostAPIAccountDeleteuserWithResponse(ctx context.Context, body PostAPIAccountDeleteuserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountDeleteuserRes, error)

	// GetAPIAccountMembersWithResponse request
	GetAPIAccountMembersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIAccountMembersRes, error)

	// GetAPIAccountMembersUsernameWithResponse request
	GetAPIAccountMembersUsernameWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetAPIAccountMembersUsernameRes, error)

	// PutAPIAccountMembersUsernameWithBodyWithResponse request with any body
	PutAPIAccountMembersUsernameWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountMembersUsernameRes, error)

	PutAPIAccountMembersUsernameWithResponse(ctx context.Context, username string, body PutAPIAccountMembersUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountMembersUsernameRes, error)

	// PostAPIAccountRegenerateIntegrationKeyWithBodyWithResponse request with any body
	PostAPIAccountRegenerateIntegrationKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountRegenerateIntegrationKeyRes, error)

	PostAPIAccountRegenerateIntegrationKeyWithResponse(ctx context.Context, body PostAPIAccountRegenerateIntegrationKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountRegenerateIntegrationKeyRes, error)

	// GetAPIAccountTeamsWithResponse request
	GetAPIAccountTeamsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsRes, error)

	// PostAPIAccountTeamsWithBodyWithResponse request with any body
	PostAPIAccountTeamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsRes, error)

	PostAPIAccountTeamsWithResponse(ctx context.Context, body PostAPIAccountTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsRes, error)

	// DeleteAPIAccountTeamsTeamIDWithResponse request
	DeleteAPIAccountTeamsTeamIDWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDRes, error)

	// GetAPIAccountTeamsTeamIDWithResponse request
	GetAPIAccountTeamsTeamIDWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDRes, error)

	// PutAPIAccountTeamsTeamIDWithBodyWithResponse request with any body
	PutAPIAccountTeamsTeamIDWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDRes, error)

	PutAPIAccountTeamsTeamIDWithResponse(ctx context.Context, teamID string, body PutAPIAccountTeamsTeamIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDRes, error)

	// GetAPIAccountTeamsTeamIDEscalationPoliciesWithResponse request
	GetAPIAccountTeamsTeamIDEscalationPoliciesWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDEscalationPoliciesRes, error)

	// PostAPIAccountTeamsTeamIDEscalationPoliciesWithBodyWithResponse request with any body
	PostAPIAccountTeamsTeamIDEscalationPoliciesWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDEscalationPoliciesRes, error)

	PostAPIAccountTeamsTeamIDEscalationPoliciesWithResponse(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDEscalationPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDEscalationPoliciesRes, error)

	// DeleteAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDWithResponse request
	DeleteAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDWithResponse(ctx context.Context, teamID string, escalationPolicyID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes, error)

	// GetAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDWithResponse request
	GetAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDWithResponse(ctx context.Context, teamID string, escalationPolicyID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes, error)

	// PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDWithBodyWithResponse request with any body
	PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDWithBodyWithResponse(ctx context.Context, teamID string, escalationPolicyID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes, error)

	PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDWithResponse(ctx context.Context, teamID string, escalationPolicyID string, body PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes, error)

	// GetAPIAccountTeamsTeamIDMaintenanceWithResponse request
	GetAPIAccountTeamsTeamIDMaintenanceWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDMaintenanceRes, error)

	// PostAPIAccountTeamsTeamIDMaintenanceWithBodyWithResponse request with any body
	PostAPIAccountTeamsTeamIDMaintenanceWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDMaintenanceRes, error)

	PostAPIAccountTeamsTeamIDMaintenanceWithResponse(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDMaintenanceRes, error)

	// DeleteAPIAccountTeamsTeamIDMaintenanceMaintenanceIDWithResponse request
	DeleteAPIAccountTeamsTeamIDMaintenanceMaintenanceIDWithResponse(ctx context.Context, teamID string, maintenanceID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes, error)

	// GetAPIAccountTeamsTeamIDMaintenanceMaintenanceIDWithResponse request
	GetAPIAccountTeamsTeamIDMaintenanceMaintenanceIDWithResponse(ctx context.Context, teamID string, maintenanceID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes, error)

	// PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDWithBodyWithResponse request with any body
	PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDWithBodyWithResponse(ctx context.Context, teamID string, maintenanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes, error)

	PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDWithResponse(ctx context.Context, teamID string, maintenanceID string, body PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes, error)

	// GetAPIAccountTeamsTeamIDMembersWithResponse request
	GetAPIAccountTeamsTeamIDMembersWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDMembersRes, error)

	// PostAPIAccountTeamsTeamIDMembersWithBodyWithResponse request with any body
	PostAPIAccountTeamsTeamIDMembersWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDMembersRes, error)

	PostAPIAccountTeamsTeamIDMembersWithResponse(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDMembersRes, error)

	// DeleteAPIAccountTeamsTeamIDMembersMemberIDWithResponse request
	DeleteAPIAccountTeamsTeamIDMembersMemberIDWithResponse(ctx context.Context, teamID string, memberID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDMembersMemberIDRes, error)

	// GetAPIAccountTeamsTeamIDMembersMemberIDWithResponse request
	GetAPIAccountTeamsTeamIDMembersMemberIDWithResponse(ctx context.Context, teamID string, memberID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDMembersMemberIDRes, error)

	// PutAPIAccountTeamsTeamIDMembersMemberIDWithBodyWithResponse request with any body
	PutAPIAccountTeamsTeamIDMembersMemberIDWithBodyWithResponse(ctx context.Context, teamID string, memberID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDMembersMemberIDRes, error)

	PutAPIAccountTeamsTeamIDMembersMemberIDWithResponse(ctx context.Context, teamID string, memberID string, body PutAPIAccountTeamsTeamIDMembersMemberIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDMembersMemberIDRes, error)

	// GetAPIAccountTeamsTeamIDOncallWithResponse request
	GetAPIAccountTeamsTeamIDOncallWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDOncallRes, error)

	// GetAPIAccountTeamsTeamIDPermissionsWithResponse request
	GetAPIAccountTeamsTeamIDPermissionsWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDPermissionsRes, error)

	// PutAPIAccountTeamsTeamIDPermissionsWithBodyWithResponse request with any body
	PutAPIAccountTeamsTeamIDPermissionsWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDPermissionsRes, error)

	PutAPIAccountTeamsTeamIDPermissionsWithResponse(ctx context.Context, teamID string, body PutAPIAccountTeamsTeamIDPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDPermissionsRes, error)

	// GetAPIAccountTeamsTeamIDPostmortemWithResponse request
	GetAPIAccountTeamsTeamIDPostmortemWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDPostmortemRes, error)

	// PostAPIAccountTeamsTeamIDPostmortemWithBodyWithResponse request with any body
	PostAPIAccountTeamsTeamIDPostmortemWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDPostmortemRes, error)

	PostAPIAccountTeamsTeamIDPostmortemWithResponse(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDPostmortemJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDPostmortemRes, error)

	// DeleteAPIAccountTeamsTeamIDPostmortemPostmortemIDWithResponse request
	DeleteAPIAccountTeamsTeamIDPostmortemPostmortemIDWithResponse(ctx context.Context, teamID string, postmortemID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDPostmortemPostmortemIDRes, error)

	// GetAPIAccountTeamsTeamIDPostmortemPostmortemIDWithResponse request
	GetAPIAccountTeamsTeamIDPostmortemPostmortemIDWithResponse(ctx context.Context, teamID string, postmortemID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDPostmortemPostmortemIDRes, error)

	// PutAPIAccountTeamsTeamIDPostmortemPostmortemIDWithBodyWithResponse request with any body
	PutAPIAccountTeamsTeamIDPostmortemPostmortemIDWithBodyWithResponse(ctx context.Context, teamID string, postmortemID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDPostmortemPostmortemIDRes, error)

	PutAPIAccountTeamsTeamIDPostmortemPostmortemIDWithResponse(ctx context.Context, teamID string, postmortemID string, body PutAPIAccountTeamsTeamIDPostmortemPostmortemIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDPostmortemPostmortemIDRes, error)

	// GetAPIAccountTeamsTeamIDPriorityWithResponse request
	GetAPIAccountTeamsTeamIDPriorityWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDPriorityRes, error)

	// PostAPIAccountTeamsTeamIDPriorityWithBodyWithResponse request with any body
	PostAPIAccountTeamsTeamIDPriorityWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDPriorityRes, error)

	PostAPIAccountTeamsTeamIDPriorityWithResponse(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDPriorityJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDPriorityRes, error)

	// DeleteAPIAccountTeamsTeamIDPriorityPriorityIDWithResponse request
	DeleteAPIAccountTeamsTeamIDPriorityPriorityIDWithResponse(ctx context.Context, teamID string, priorityID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDPriorityPriorityIDRes, error)

	// GetAPIAccountTeamsTeamIDPriorityPriorityIDWithResponse request
	GetAPIAccountTeamsTeamIDPriorityPriorityIDWithResponse(ctx context.Context, teamID string, priorityID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDPriorityPriorityIDRes, error)

	// PutAPIAccountTeamsTeamIDPriorityPriorityIDWithBodyWithResponse request with any body
	PutAPIAccountTeamsTeamIDPriorityPriorityIDWithBodyWithResponse(ctx context.Context, teamID string, priorityID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDPriorityPriorityIDRes, error)

	PutAPIAccountTeamsTeamIDPriorityPriorityIDWithResponse(ctx context.Context, teamID string, priorityID string, body PutAPIAccountTeamsTeamIDPriorityPriorityIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDPriorityPriorityIDRes, error)

	// GetAPIAccountTeamsTeamIDRolesWithResponse request
	GetAPIAccountTeamsTeamIDRolesWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDRolesRes, error)

	// PostAPIAccountTeamsTeamIDRolesWithBodyWithResponse request with any body
	PostAPIAccountTeamsTeamIDRolesWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDRolesRes, error)

	PostAPIAccountTeamsTeamIDRolesWithResponse(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDRolesRes, error)

	// DeleteAPIAccountTeamsTeamIDRolesIncidentRoleIDWithResponse request
	DeleteAPIAccountTeamsTeamIDRolesIncidentRoleIDWithResponse(ctx context.Context, teamID string, incidentRoleID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDRolesIncidentRoleIDRes, error)

	// GetAPIAccountTeamsTeamIDRolesIncidentRoleIDWithResponse request
	GetAPIAccountTeamsTeamIDRolesIncidentRoleIDWithResponse(ctx context.Context, teamID string, incidentRoleID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDRolesIncidentRoleIDRes, error)

	// PutAPIAccountTeamsTeamIDRolesIncidentRoleIDWithBodyWithResponse request with any body
	PutAPIAccountTeamsTeamIDRolesIncidentRoleIDWithBodyWithResponse(ctx context.Context, teamID string, incidentRoleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDRolesIncidentRoleIDRes, error)

	PutAPIAccountTeamsTeamIDRolesIncidentRoleIDWithResponse(ctx context.Context, teamID string, incidentRoleID string, body PutAPIAccountTeamsTeamIDRolesIncidentRoleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDRolesIncidentRoleIDRes, error)

	// GetAPIAccountTeamsTeamIDSchedulesWithResponse request
	GetAPIAccountTeamsTeamIDSchedulesWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDSchedulesRes, error)

	// PostAPIAccountTeamsTeamIDSchedulesWithBodyWithResponse request with any body
	PostAPIAccountTeamsTeamIDSchedulesWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDSchedulesRes, error)

	PostAPIAccountTeamsTeamIDSchedulesWithResponse(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDSchedulesRes, error)

	// DeleteAPIAccountTeamsTeamIDSchedulesScheduleIDWithResponse request
	DeleteAPIAccountTeamsTeamIDSchedulesScheduleIDWithResponse(ctx context.Context, teamID string, scheduleID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDSchedulesScheduleIDRes, error)

	// GetAPIAccountTeamsTeamIDSchedulesScheduleIDWithResponse request
	GetAPIAccountTeamsTeamIDSchedulesScheduleIDWithResponse(ctx context.Context, teamID string, scheduleID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDSchedulesScheduleIDRes, error)

	// PutAPIAccountTeamsTeamIDSchedulesScheduleIDWithBodyWithResponse request with any body
	PutAPIAccountTeamsTeamIDSchedulesScheduleIDWithBodyWithResponse(ctx context.Context, teamID string, scheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDSchedulesScheduleIDRes, error)

	PutAPIAccountTeamsTeamIDSchedulesScheduleIDWithResponse(ctx context.Context, teamID string, scheduleID string, body PutAPIAccountTeamsTeamIDSchedulesScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDSchedulesScheduleIDRes, error)

	// GetAPIAccountTeamsTeamIDServicesWithResponse request
	GetAPIAccountTeamsTeamIDServicesWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDServicesRes, error)

	// PostAPIAccountTeamsTeamIDServicesWithBodyWithResponse request with any body
	PostAPIAccountTeamsTeamIDServicesWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDServicesRes, error)

	PostAPIAccountTeamsTeamIDServicesWithResponse(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDServicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDServicesRes, error)

	// DeleteAPIAccountTeamsTeamIDServicesServiceIDWithResponse request
	DeleteAPIAccountTeamsTeamIDServicesServiceIDWithResponse(ctx context.Context, teamID string, serviceID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDServicesServiceIDRes, error)

	// GetAPIAccountTeamsTeamIDServicesServiceIDWithResponse request
	GetAPIAccountTeamsTeamIDServicesServiceIDWithResponse(ctx context.Context, teamID string, serviceID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDServicesServiceIDRes, error)

	// PutAPIAccountTeamsTeamIDServicesServiceIDWithBodyWithResponse request with any body
	PutAPIAccountTeamsTeamIDServicesServiceIDWithBodyWithResponse(ctx context.Context, teamID string, serviceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDServicesServiceIDRes, error)

	PutAPIAccountTeamsTeamIDServicesServiceIDWithResponse(ctx context.Context, teamID string, serviceID string, body PutAPIAccountTeamsTeamIDServicesServiceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDServicesServiceIDRes, error)

	// GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsWithResponse request
	GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsWithResponse(ctx context.Context, teamID string, serviceID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes, error)

	// PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsWithBodyWithResponse request with any body
	PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsWithBodyWithResponse(ctx context.Context, teamID string, serviceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes, error)

	PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsWithResponse(ctx context.Context, teamID string, serviceID string, body PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes, error)

	// DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDWithResponse request
	DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDWithResponse(ctx context.Context, teamID string, serviceID string, integrationID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes, error)

	// GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDWithResponse request
	GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDWithResponse(ctx context.Context, teamID string, serviceID string, integrationID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes, error)

	// PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDWithBodyWithResponse request with any body
	PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDWithBodyWithResponse(ctx context.Context, teamID string, serviceID string, integrationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes, error)

	PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDWithResponse(ctx context.Context, teamID string, serviceID string, integrationID string, body PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes, error)

	// GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDAlertsWithResponse request
	GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDAlertsWithResponse(ctx context.Context, teamID string, serviceID string, integrationID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDAlertsRes, error)

	// GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersWithResponse request
	GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersWithResponse(ctx context.Context, teamID string, serviceID string, integrationID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes, error)

	// PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersWithBodyWithResponse request with any body
	PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersWithBodyWithResponse(ctx context.Context, teamID string, serviceID string, integrationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes, error)

	PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersWithResponse(ctx context.Context, teamID string, serviceID string, integrationID string, body PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes, error)

	// GetAPIAccountTeamsTeamIDSLAWithResponse request
	GetAPIAccountTeamsTeamIDSLAWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDSLARes, error)

	// PostAPIAccountTeamsTeamIDSLAWithBodyWithResponse request with any body
	PostAPIAccountTeamsTeamIDSLAWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDSLARes, error)

	PostAPIAccountTeamsTeamIDSLAWithResponse(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDSLAJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDSLARes, error)

	// DeleteAPIAccountTeamsTeamIDSLASLAIDWithResponse request
	DeleteAPIAccountTeamsTeamIDSLASLAIDWithResponse(ctx context.Context, teamID string, slaid string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDSLASLAIDRes, error)

	// GetAPIAccountTeamsTeamIDSLASLAIDWithResponse request
	GetAPIAccountTeamsTeamIDSLASLAIDWithResponse(ctx context.Context, teamID string, slaid string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDSLASLAIDRes, error)

	// PutAPIAccountTeamsTeamIDSLASLAIDWithBodyWithResponse request with any body
	PutAPIAccountTeamsTeamIDSLASLAIDWithBodyWithResponse(ctx context.Context, teamID string, slaid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDSLASLAIDRes, error)

	PutAPIAccountTeamsTeamIDSLASLAIDWithResponse(ctx context.Context, teamID string, slaid string, body PutAPIAccountTeamsTeamIDSLASLAIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDSLASLAIDRes, error)

	// GetAPIAccountTeamsTeamIDTagsWithResponse request
	GetAPIAccountTeamsTeamIDTagsWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDTagsRes, error)

	// PostAPIAccountTeamsTeamIDTagsWithBodyWithResponse request with any body
	PostAPIAccountTeamsTeamIDTagsWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDTagsRes, error)

	PostAPIAccountTeamsTeamIDTagsWithResponse(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDTagsRes, error)

	// DeleteAPIAccountTeamsTeamIDTagsTagIDWithResponse request
	DeleteAPIAccountTeamsTeamIDTagsTagIDWithResponse(ctx context.Context, teamID string, tagID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDTagsTagIDRes, error)

	// GetAPIAccountTeamsTeamIDTagsTagIDWithResponse request
	GetAPIAccountTeamsTeamIDTagsTagIDWithResponse(ctx context.Context, teamID string, tagID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDTagsTagIDRes, error)

	// PutAPIAccountTeamsTeamIDTagsTagIDWithBodyWithResponse request with any body
	PutAPIAccountTeamsTeamIDTagsTagIDWithBodyWithResponse(ctx context.Context, teamID string, tagID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDTagsTagIDRes, error)

	PutAPIAccountTeamsTeamIDTagsTagIDWithResponse(ctx context.Context, teamID string, tagID string, body PutAPIAccountTeamsTeamIDTagsTagIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDTagsTagIDRes, error)

	// GetAPIAccountTeamsTeamIDTaskTemplatesWithResponse request
	GetAPIAccountTeamsTeamIDTaskTemplatesWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDTaskTemplatesRes, error)

	// PostAPIAccountTeamsTeamIDTaskTemplatesWithBodyWithResponse request with any body
	PostAPIAccountTeamsTeamIDTaskTemplatesWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDTaskTemplatesRes, error)

	PostAPIAccountTeamsTeamIDTaskTemplatesWithResponse(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDTaskTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDTaskTemplatesRes, error)

	// DeleteAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDWithResponse request
	DeleteAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDWithResponse(ctx context.Context, teamID string, taskTemplateID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes, error)

	// GetAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDWithResponse request
	GetAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDWithResponse(ctx context.Context, teamID string, taskTemplateID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes, error)

	// PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDWithBodyWithResponse request with any body
	PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDWithBodyWithResponse(ctx context.Context, teamID string, taskTemplateID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes, error)

	PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDWithResponse(ctx context.Context, teamID string, taskTemplateID string, body PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes, error)

	// GetAPIAccountUsersUsernameContactsWithResponse request
	GetAPIAccountUsersUsernameContactsWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetAPIAccountUsersUsernameContactsRes, error)

	// PostAPIAccountUsersUsernameContactsWithBodyWithResponse request with any body
	PostAPIAccountUsersUsernameContactsWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountUsersUsernameContactsRes, error)

	PostAPIAccountUsersUsernameContactsWithResponse(ctx context.Context, username string, body PostAPIAccountUsersUsernameContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountUsersUsernameContactsRes, error)

	// DeleteAPIAccountUsersUsernameContactsContactIDWithResponse request
	DeleteAPIAccountUsersUsernameContactsContactIDWithResponse(ctx context.Context, username string, contactID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountUsersUsernameContactsContactIDRes, error)

	// GetAPIAccountUsersUsernameContactsContactIDWithResponse request
	GetAPIAccountUsersUsernameContactsContactIDWithResponse(ctx context.Context, username string, contactID string, reqEditors ...RequestEditorFn) (*GetAPIAccountUsersUsernameContactsContactIDRes, error)

	// GetAPIAccountUsersUsernameCustomrolesWithResponse request
	GetAPIAccountUsersUsernameCustomrolesWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetAPIAccountUsersUsernameCustomrolesRes, error)

	// PostAPIAccountUsersUsernameCustomrolesWithBodyWithResponse request with any body
	PostAPIAccountUsersUsernameCustomrolesWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountUsersUsernameCustomrolesRes, error)

	PostAPIAccountUsersUsernameCustomrolesWithResponse(ctx context.Context, username string, body PostAPIAccountUsersUsernameCustomrolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountUsersUsernameCustomrolesRes, error)

	// GetAPIAccountUsersUsernameForwardingRulesWithResponse request
	GetAPIAccountUsersUsernameForwardingRulesWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetAPIAccountUsersUsernameForwardingRulesRes, error)

	// PostAPIAccountUsersUsernameForwardingRulesWithBodyWithResponse request with any body
	PostAPIAccountUsersUsernameForwardingRulesWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountUsersUsernameForwardingRulesRes, error)

	PostAPIAccountUsersUsernameForwardingRulesWithResponse(ctx context.Context, username string, body PostAPIAccountUsersUsernameForwardingRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountUsersUsernameForwardingRulesRes, error)

	// DeleteAPIAccountUsersUsernameForwardingRulesForwardingRuleIDWithResponse request
	DeleteAPIAccountUsersUsernameForwardingRulesForwardingRuleIDWithResponse(ctx context.Context, username string, forwardingRuleID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRes, error)

	// GetAPIAccountUsersUsernameForwardingRulesForwardingRuleIDWithResponse request
	GetAPIAccountUsersUsernameForwardingRulesForwardingRuleIDWithResponse(ctx context.Context, username string, forwardingRuleID string, reqEditors ...RequestEditorFn) (*GetAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRes, error)

	// GetAPIAccountUsersUsernameNotificationRulesWithResponse request
	GetAPIAccountUsersUsernameNotificationRulesWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetAPIAccountUsersUsernameNotificationRulesRes, error)

	// PostAPIAccountUsersUsernameNotificationRulesWithBodyWithResponse request with any body
	PostAPIAccountUsersUsernameNotificationRulesWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountUsersUsernameNotificationRulesRes, error)

	PostAPIAccountUsersUsernameNotificationRulesWithResponse(ctx context.Context, username string, body PostAPIAccountUsersUsernameNotificationRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountUsersUsernameNotificationRulesRes, error)

	// DeleteAPIAccountUsersUsernameNotificationRulesNotificationRuleIDWithResponse request
	DeleteAPIAccountUsersUsernameNotificationRulesNotificationRuleIDWithResponse(ctx context.Context, username string, notificationRuleID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRes, error)

	// GetAPIAccountUsersUsernameNotificationRulesNotificationRuleIDWithResponse request
	GetAPIAccountUsersUsernameNotificationRulesNotificationRuleIDWithResponse(ctx context.Context, username string, notificationRuleID string, reqEditors ...RequestEditorFn) (*GetAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRes, error)

	// GetAPIAlertStatusTraceIDWithResponse request
	GetAPIAlertStatusTraceIDWithResponse(ctx context.Context, traceID string, reqEditors ...RequestEditorFn) (*GetAPIAlertStatusTraceIDRes, error)

	// PostAPIEventsIntegrationKeyWithBodyWithResponse request with any body
	PostAPIEventsIntegrationKeyWithBodyWithResponse(ctx context.Context, integrationKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIEventsIntegrationKeyRes, error)

	PostAPIEventsIntegrationKeyWithResponse(ctx context.Context, integrationKey string, body PostAPIEventsIntegrationKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIEventsIntegrationKeyRes, error)

	// PostAPIIncidentsWithBodyWithResponse request with any body
	PostAPIIncidentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIIncidentsRes, error)

	PostAPIIncidentsWithResponse(ctx context.Context, body PostAPIIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIIncidentsRes, error)

	// PostAPIIncidentsFilterWithBodyWithResponse request with any body
	PostAPIIncidentsFilterWithBodyWithResponse(ctx context.Context, params *PostAPIIncidentsFilterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIIncidentsFilterRes, error)

	PostAPIIncidentsFilterWithResponse(ctx context.Context, params *PostAPIIncidentsFilterParams, body PostAPIIncidentsFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIIncidentsFilterRes, error)

	// GetAPIIncidentsIncidentNumberWithResponse request
	GetAPIIncidentsIncidentNumberWithResponse(ctx context.Context, incidentNumber string, reqEditors ...RequestEditorFn) (*GetAPIIncidentsIncidentNumberRes, error)

	// PutAPIIncidentsIncidentNumberWithBodyWithResponse request with any body
	PutAPIIncidentsIncidentNumberWithBodyWithResponse(ctx context.Context, incidentNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIIncidentsIncidentNumberRes, error)

	PutAPIIncidentsIncidentNumberWithResponse(ctx context.Context, incidentNumber string, body PutAPIIncidentsIncidentNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIIncidentsIncidentNumberRes, error)

	// GetAPIIncidentsIncidentNumberAlertsWithResponse request
	GetAPIIncidentsIncidentNumberAlertsWithResponse(ctx context.Context, incidentNumber string, reqEditors ...RequestEditorFn) (*GetAPIIncidentsIncidentNumberAlertsRes, error)

	// GetAPIIncidentsIncidentNumberNoteWithResponse request
	GetAPIIncidentsIncidentNumberNoteWithResponse(ctx context.Context, incidentNumber string, reqEditors ...RequestEditorFn) (*GetAPIIncidentsIncidentNumberNoteRes, error)

	// PostAPIIncidentsIncidentNumberNoteWithBodyWithResponse request with any body
	PostAPIIncidentsIncidentNumberNoteWithBodyWithResponse(ctx context.Context, incidentNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIIncidentsIncidentNumberNoteRes, error)

	PostAPIIncidentsIncidentNumberNoteWithResponse(ctx context.Context, incidentNumber string, body PostAPIIncidentsIncidentNumberNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIIncidentsIncidentNumberNoteRes, error)

	// DeleteAPIIncidentsIncidentNumberNoteNoteUniqueIDWithResponse request
	DeleteAPIIncidentsIncidentNumberNoteNoteUniqueIDWithResponse(ctx context.Context, incidentNumber string, noteUniqueID string, reqEditors ...RequestEditorFn) (*DeleteAPIIncidentsIncidentNumberNoteNoteUniqueIDRes, error)

	// GetAPIIncidentsIncidentNumberNoteNoteUniqueIDWithResponse request
	GetAPIIncidentsIncidentNumberNoteNoteUniqueIDWithResponse(ctx context.Context, incidentNumber string, noteUniqueID string, reqEditors ...RequestEditorFn) (*GetAPIIncidentsIncidentNumberNoteNoteUniqueIDRes, error)

	// PutAPIIncidentsIncidentNumberNoteNoteUniqueIDWithBodyWithResponse request with any body
	PutAPIIncidentsIncidentNumberNoteNoteUniqueIDWithBodyWithResponse(ctx context.Context, incidentNumber string, noteUniqueID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIIncidentsIncidentNumberNoteNoteUniqueIDRes, error)

	PutAPIIncidentsIncidentNumberNoteNoteUniqueIDWithResponse(ctx context.Context, incidentNumber string, noteUniqueID string, body PutAPIIncidentsIncidentNumberNoteNoteUniqueIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIIncidentsIncidentNumberNoteNoteUniqueIDRes, error)

	// GetAPIIncidentsIncidentNumberRespondersWithResponse request
	GetAPIIncidentsIncidentNumberRespondersWithResponse(ctx context.Context, incidentNumber string, reqEditors ...RequestEditorFn) (*GetAPIIncidentsIncidentNumberRespondersRes, error)

	// PostAPIIncidentsIncidentNumberRespondersWithBodyWithResponse request with any body
	PostAPIIncidentsIncidentNumberRespondersWithBodyWithResponse(ctx context.Context, incidentNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIIncidentsIncidentNumberRespondersRes, error)

	PostAPIIncidentsIncidentNumberRespondersWithResponse(ctx context.Context, incidentNumber string, body PostAPIIncidentsIncidentNumberRespondersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIIncidentsIncidentNumberRespondersRes, error)

	// DeleteAPIIncidentsIncidentNumberRespondersUniqueIDWithResponse request
	DeleteAPIIncidentsIncidentNumberRespondersUniqueIDWithResponse(ctx context.Context, incidentNumber string, uniqueID string, reqEditors ...RequestEditorFn) (*DeleteAPIIncidentsIncidentNumberRespondersUniqueIDRes, error)

	// GetAPIIncidentsIncidentNumberRespondersUniqueIDWithResponse request
	GetAPIIncidentsIncidentNumberRespondersUniqueIDWithResponse(ctx context.Context, incidentNumber string, uniqueID string, reqEditors ...RequestEditorFn) (*GetAPIIncidentsIncidentNumberRespondersUniqueIDRes, error)

	// GetAPIIncidentsIncidentNumberTagsWithResponse request
	GetAPIIncidentsIncidentNumberTagsWithResponse(ctx context.Context, incidentNumber string, reqEditors ...RequestEditorFn) (*GetAPIIncidentsIncidentNumberTagsRes, error)

	// PostAPIIncidentsIncidentNumberTagsWithBodyWithResponse request with any body
	PostAPIIncidentsIncidentNumberTagsWithBodyWithResponse(ctx context.Context, incidentNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIIncidentsIncidentNumberTagsRes, error)

	PostAPIIncidentsIncidentNumberTagsWithResponse(ctx context.Context, incidentNumber string, body PostAPIIncidentsIncidentNumberTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIIncidentsIncidentNumberTagsRes, error)

	// DeleteAPIIncidentsIncidentNumberTagsTagUniqueIDWithResponse request
	DeleteAPIIncidentsIncidentNumberTagsTagUniqueIDWithResponse(ctx context.Context, incidentNumber string, tagUniqueID string, reqEditors ...RequestEditorFn) (*DeleteAPIIncidentsIncidentNumberTagsTagUniqueIDRes, error)

	// GetAPIIncidentsIncidentNumberTagsTagUniqueIDWithResponse request
	GetAPIIncidentsIncidentNumberTagsTagUniqueIDWithResponse(ctx context.Context, incidentNumber string, tagUniqueID string, reqEditors ...RequestEditorFn) (*GetAPIIncidentsIncidentNumberTagsTagUniqueIDRes, error)

	// PatchAPIIncidentsUniqueIDWithBodyWithResponse request with any body
	PatchAPIIncidentsUniqueIDWithBodyWithResponse(ctx context.Context, uniqueID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAPIIncidentsUniqueIDRes, error)

	PatchAPIIncidentsUniqueIDWithResponse(ctx context.Context, uniqueID string, body PatchAPIIncidentsUniqueIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAPIIncidentsUniqueIDRes, error)

	// GetAPIV2AccountEventsRouterWithResponse request
	GetAPIV2AccountEventsRouterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV2AccountEventsRouterRes, error)

	// PostAPIV2AccountEventsRouterWithBodyWithResponse request with any body
	PostAPIV2AccountEventsRouterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV2AccountEventsRouterRes, error)

	PostAPIV2AccountEventsRouterWithResponse(ctx context.Context, body PostAPIV2AccountEventsRouterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV2AccountEventsRouterRes, error)

	// DeleteAPIV2AccountEventsRouterRouterIDWithResponse request
	DeleteAPIV2AccountEventsRouterRouterIDWithResponse(ctx context.Context, routerID string, reqEditors ...RequestEditorFn) (*DeleteAPIV2AccountEventsRouterRouterIDRes, error)

	// GetAPIV2AccountEventsRouterRouterIDWithResponse request
	GetAPIV2AccountEventsRouterRouterIDWithResponse(ctx context.Context, routerID string, reqEditors ...RequestEditorFn) (*GetAPIV2AccountEventsRouterRouterIDRes, error)

	// PutAPIV2AccountEventsRouterRouterIDWithBodyWithResponse request with any body
	PutAPIV2AccountEventsRouterRouterIDWithBodyWithResponse(ctx context.Context, routerID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV2AccountEventsRouterRouterIDRes, error)

	PutAPIV2AccountEventsRouterRouterIDWithResponse(ctx context.Context, routerID string, body PutAPIV2AccountEventsRouterRouterIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV2AccountEventsRouterRouterIDRes, error)

	// GetAPIV2AccountEventsRouterRouterIDRulesetsWithResponse request
	GetAPIV2AccountEventsRouterRouterIDRulesetsWithResponse(ctx context.Context, routerID string, reqEditors ...RequestEditorFn) (*GetAPIV2AccountEventsRouterRouterIDRulesetsRes, error)

	// PostAPIV2AccountEventsRouterRouterIDRulesetsWithBodyWithResponse request with any body
	PostAPIV2AccountEventsRouterRouterIDRulesetsWithBodyWithResponse(ctx context.Context, routerID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV2AccountEventsRouterRouterIDRulesetsRes, error)

	PostAPIV2AccountEventsRouterRouterIDRulesetsWithResponse(ctx context.Context, routerID string, body PostAPIV2AccountEventsRouterRouterIDRulesetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV2AccountEventsRouterRouterIDRulesetsRes, error)

	// PutAPIV2AccountEventsRouterRouterIDRulesetsWithBodyWithResponse request with any body
	PutAPIV2AccountEventsRouterRouterIDRulesetsWithBodyWithResponse(ctx context.Context, routerID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV2AccountEventsRouterRouterIDRulesetsRes, error)

	PutAPIV2AccountEventsRouterRouterIDRulesetsWithResponse(ctx context.Context, routerID string, body PutAPIV2AccountEventsRouterRouterIDRulesetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV2AccountEventsRouterRouterIDRulesetsRes, error)

	// DeleteAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDWithResponse request
	DeleteAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDWithResponse(ctx context.Context, routerID string, rulesetID string, reqEditors ...RequestEditorFn) (*DeleteAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes, error)

	// GetAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDWithResponse request
	GetAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDWithResponse(ctx context.Context, routerID string, rulesetID string, reqEditors ...RequestEditorFn) (*GetAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes, error)

	// PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDWithBodyWithResponse request with any body
	PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDWithBodyWithResponse(ctx context.Context, routerID string, rulesetID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes, error)

	PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDWithResponse(ctx context.Context, routerID string, rulesetID string, body PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes, error)

	// GetAPIV2AccountTeamsTeamIDEscalationPoliciesEpIDOncallWithResponse request
	GetAPIV2AccountTeamsTeamIDEscalationPoliciesEpIDOncallWithResponse(ctx context.Context, teamID string, epid string, reqEditors ...RequestEditorFn) (*GetAPIV2AccountTeamsTeamIDEscalationPoliciesEpIDOncallRes, error)

	// GetAPIV2AccountTeamsTeamIDOncallWithResponse request
	GetAPIV2AccountTeamsTeamIDOncallWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIV2AccountTeamsTeamIDOncallRes, error)

	// GetAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesWithResponse request
	GetAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesWithResponse(ctx context.Context, teamID string, scheduleID string, reqEditors ...RequestEditorFn) (*GetAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes, error)

	// PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesWithBodyWithResponse request with any body
	PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesWithBodyWithResponse(ctx context.Context, teamID string, scheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes, error)

	PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesWithResponse(ctx context.Context, teamID string, scheduleID string, body PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes, error)

	// GetAPIV2AccountTeamsTeamIDServicesServiceIDOncallWithResponse request
	GetAPIV2AccountTeamsTeamIDServicesServiceIDOncallWithResponse(ctx context.Context, teamID string, serviceID string, reqEditors ...RequestEditorFn) (*GetAPIV2AccountTeamsTeamIDServicesServiceIDOncallRes, error)

	// PostIntegrationAccountIDGenericIntegrationKeyWithBodyWithResponse request with any body
	PostIntegrationAccountIDGenericIntegrationKeyWithBodyWithResponse(ctx context.Context, accountID string, integrationKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationAccountIDGenericIntegrationKeyRes, error)

	PostIntegrationAccountIDGenericIntegrationKeyWithResponse(ctx context.Context, accountID string, integrationKey string, body PostIntegrationAccountIDGenericIntegrationKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationAccountIDGenericIntegrationKeyRes, error)

	// DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDWithResponse request
	DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDWithResponse(ctx context.Context, teamID string, serviceID string, integrationID string, transformersID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes, error)

	// GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDWithResponse request
	GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDWithResponse(ctx context.Context, teamID string, serviceID string, integrationID string, transformersID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes, error)

	// PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDWithBodyWithResponse request with any body
	PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDWithBodyWithResponse(ctx context.Context, teamID string, serviceID string, integrationID string, transformersID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes, error)

	PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDWithResponse(ctx context.Context, teamID string, serviceID string, integrationID string, transformersID string, body PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes, error)
}

type PostAPIAccountAPIInviteRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TeamMember
	XML201       *TeamMember
}

// Status returns HTTPResponse.Status
func (r PostAPIAccountAPIInviteRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIAccountAPIInviteRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountCustomrolesRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountCustomRole
	XML200       *AccountCustomRole
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountCustomrolesRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountCustomrolesRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIAccountCustomrolesRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AccountCustomRolePostAndPutResponse
	XML201       *AccountCustomRolePostAndPutResponse
}

// Status returns HTTPResponse.Status
func (r PostAPIAccountCustomrolesRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIAccountCustomrolesRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIAccountCustomrolesCustomRoleIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIAccountCustomrolesCustomRoleIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIAccountCustomrolesCustomRoleIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountCustomrolesCustomRoleIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountCustomRole
	XML200       *AccountCustomRole
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountCustomrolesCustomRoleIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountCustomrolesCustomRoleIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIAccountCustomrolesCustomRoleIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountCustomRolePostAndPutResponse
	XML200       *AccountCustomRolePostAndPutResponse
}

// Status returns HTTPResponse.Status
func (r PutAPIAccountCustomrolesCustomRoleIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIAccountCustomrolesCustomRoleIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIAccountDeleteuserRes struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAPIAccountDeleteuserRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIAccountDeleteuserRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountMembersRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountMember
	XML200       *AccountMember
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountMembersRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountMembersRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountMembersUsernameRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountMember
	XML200       *AccountMember
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountMembersUsernameRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountMembersUsernameRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIAccountMembersUsernameRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountMember
	XML200       *AccountMember
}

// Status returns HTTPResponse.Status
func (r PutAPIAccountMembersUsernameRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIAccountMembersUsernameRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIAccountRegenerateIntegrationKeyRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
	XML200       *Integration
}

// Status returns HTTPResponse.Status
func (r PostAPIAccountRegenerateIntegrationKeyRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIAccountRegenerateIntegrationKeyRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Team
	XML200       *Team
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIAccountTeamsRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Team
	XML201       *Team
}

// Status returns HTTPResponse.Status
func (r PostAPIAccountTeamsRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIAccountTeamsRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIAccountTeamsTeamIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIAccountTeamsTeamIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIAccountTeamsTeamIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Team
	XML200       *Team
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIAccountTeamsTeamIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Team
	XML200       *Team
}

// Status returns HTTPResponse.Status
func (r PutAPIAccountTeamsTeamIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIAccountTeamsTeamIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDEscalationPoliciesRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EP
	XML200       *EP
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDEscalationPoliciesRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDEscalationPoliciesRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIAccountTeamsTeamIDEscalationPoliciesRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *EP
	XML201       *EP
}

// Status returns HTTPResponse.Status
func (r PostAPIAccountTeamsTeamIDEscalationPoliciesRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIAccountTeamsTeamIDEscalationPoliciesRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EP
	XML200       *EP
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EP
	XML200       *EP
}

// Status returns HTTPResponse.Status
func (r PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDMaintenanceRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TMM
	XML200       *TMM
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDMaintenanceRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDMaintenanceRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIAccountTeamsTeamIDMaintenanceRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TMM
	XML201       *TMM
}

// Status returns HTTPResponse.Status
func (r PostAPIAccountTeamsTeamIDMaintenanceRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIAccountTeamsTeamIDMaintenanceRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TMM
	XML200       *TMM
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TMM
	XML200       *TMM
}

// Status returns HTTPResponse.Status
func (r PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDMembersRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamMember
	XML200       *TeamMember
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDMembersRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDMembersRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIAccountTeamsTeamIDMembersRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TeamMember
	XML201       *TeamMember
}

// Status returns HTTPResponse.Status
func (r PostAPIAccountTeamsTeamIDMembersRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIAccountTeamsTeamIDMembersRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIAccountTeamsTeamIDMembersMemberIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIAccountTeamsTeamIDMembersMemberIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIAccountTeamsTeamIDMembersMemberIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDMembersMemberIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamMember
	XML200       *TeamMember
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDMembersMemberIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDMembersMemberIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIAccountTeamsTeamIDMembersMemberIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamMember
	XML200       *TeamMember
}

// Status returns HTTPResponse.Status
func (r PutAPIAccountTeamsTeamIDMembersMemberIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIAccountTeamsTeamIDMembersMemberIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDOncallRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EscalationPolicyOnCallV1
	XML200       *EscalationPolicyOnCallV1
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDOncallRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDOncallRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDPermissionsRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamPermission
	XML200       *TeamPermission
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDPermissionsRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDPermissionsRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIAccountTeamsTeamIDPermissionsRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamPermission
	XML200       *TeamPermission
}

// Status returns HTTPResponse.Status
func (r PutAPIAccountTeamsTeamIDPermissionsRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIAccountTeamsTeamIDPermissionsRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDPostmortemRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostmortemGet
	XML200       *PostmortemGet
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDPostmortemRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDPostmortemRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIAccountTeamsTeamIDPostmortemRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostmortemPostPut
	XML201       *PostmortemPostPut
}

// Status returns HTTPResponse.Status
func (r PostAPIAccountTeamsTeamIDPostmortemRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIAccountTeamsTeamIDPostmortemRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIAccountTeamsTeamIDPostmortemPostmortemIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIAccountTeamsTeamIDPostmortemPostmortemIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIAccountTeamsTeamIDPostmortemPostmortemIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDPostmortemPostmortemIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostmortemGet
	XML200       *PostmortemGet
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDPostmortemPostmortemIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDPostmortemPostmortemIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIAccountTeamsTeamIDPostmortemPostmortemIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostmortemPostPut
	XML200       *PostmortemPostPut
}

// Status returns HTTPResponse.Status
func (r PutAPIAccountTeamsTeamIDPostmortemPostmortemIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIAccountTeamsTeamIDPostmortemPostmortemIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDPriorityRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PriorityGet
	XML200       *PriorityGet
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDPriorityRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDPriorityRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIAccountTeamsTeamIDPriorityRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PriorityPostPut
	XML201       *PriorityPostPut
}

// Status returns HTTPResponse.Status
func (r PostAPIAccountTeamsTeamIDPriorityRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIAccountTeamsTeamIDPriorityRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIAccountTeamsTeamIDPriorityPriorityIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIAccountTeamsTeamIDPriorityPriorityIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIAccountTeamsTeamIDPriorityPriorityIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDPriorityPriorityIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PriorityGet
	XML200       *PriorityGet
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDPriorityPriorityIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDPriorityPriorityIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIAccountTeamsTeamIDPriorityPriorityIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PriorityPostPut
	XML200       *PriorityPostPut
}

// Status returns HTTPResponse.Status
func (r PutAPIAccountTeamsTeamIDPriorityPriorityIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIAccountTeamsTeamIDPriorityPriorityIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDRolesRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IncidentRoleGet
	XML200       *IncidentRoleGet
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDRolesRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDRolesRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIAccountTeamsTeamIDRolesRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IncidentRolePostPut
	XML201       *IncidentRolePostPut
}

// Status returns HTTPResponse.Status
func (r PostAPIAccountTeamsTeamIDRolesRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIAccountTeamsTeamIDRolesRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIAccountTeamsTeamIDRolesIncidentRoleIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIAccountTeamsTeamIDRolesIncidentRoleIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIAccountTeamsTeamIDRolesIncidentRoleIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDRolesIncidentRoleIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IncidentRoleGet
	XML200       *IncidentRoleGet
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDRolesIncidentRoleIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDRolesIncidentRoleIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIAccountTeamsTeamIDRolesIncidentRoleIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IncidentRolePostPut
	XML200       *IncidentRolePostPut
}

// Status returns HTTPResponse.Status
func (r PutAPIAccountTeamsTeamIDRolesIncidentRoleIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIAccountTeamsTeamIDRolesIncidentRoleIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDSchedulesRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Schedule
	XML200       *Schedule
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDSchedulesRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDSchedulesRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIAccountTeamsTeamIDSchedulesRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Schedule
	XML201       *Schedule
}

// Status returns HTTPResponse.Status
func (r PostAPIAccountTeamsTeamIDSchedulesRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIAccountTeamsTeamIDSchedulesRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIAccountTeamsTeamIDSchedulesScheduleIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIAccountTeamsTeamIDSchedulesScheduleIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIAccountTeamsTeamIDSchedulesScheduleIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDSchedulesScheduleIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Schedule
	XML200       *Schedule
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDSchedulesScheduleIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDSchedulesScheduleIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIAccountTeamsTeamIDSchedulesScheduleIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Schedule
	XML200       *Schedule
}

// Status returns HTTPResponse.Status
func (r PutAPIAccountTeamsTeamIDSchedulesScheduleIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIAccountTeamsTeamIDSchedulesScheduleIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDServicesRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceGet
	XML200       *ServiceGet
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDServicesRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDServicesRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIAccountTeamsTeamIDServicesRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ServicePostPut
	XML201       *ServicePostPut
}

// Status returns HTTPResponse.Status
func (r PostAPIAccountTeamsTeamIDServicesRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIAccountTeamsTeamIDServicesRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIAccountTeamsTeamIDServicesServiceIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIAccountTeamsTeamIDServicesServiceIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIAccountTeamsTeamIDServicesServiceIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDServicesServiceIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceGet
	XML200       *ServiceGet
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDServicesServiceIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDServicesServiceIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIAccountTeamsTeamIDServicesServiceIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicePostPut
	XML200       *ServicePostPut
}

// Status returns HTTPResponse.Status
func (r PutAPIAccountTeamsTeamIDServicesServiceIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIAccountTeamsTeamIDServicesServiceIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
	XML200       *Integration
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Integration
	XML201       *Integration
}

// Status returns HTTPResponse.Status
func (r PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
	XML200       *Integration
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
	XML200       *Integration
}

// Status returns HTTPResponse.Status
func (r PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDAlertsRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationAlert
	XML200       *IntegrationAlert
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDAlertsRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDAlertsRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlertTransformer
	XML200       *AlertTransformer
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AlertTransformer
	XML201       *AlertTransformer
}

// Status returns HTTPResponse.Status
func (r PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDSLARes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SLAGet
	XML200       *SLAGet
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDSLARes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDSLARes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIAccountTeamsTeamIDSLARes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SLAPostPut
	XML201       *SLAPostPut
}

// Status returns HTTPResponse.Status
func (r PostAPIAccountTeamsTeamIDSLARes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIAccountTeamsTeamIDSLARes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIAccountTeamsTeamIDSLASLAIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIAccountTeamsTeamIDSLASLAIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIAccountTeamsTeamIDSLASLAIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDSLASLAIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SLAGet
	XML200       *SLAGet
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDSLASLAIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDSLASLAIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIAccountTeamsTeamIDSLASLAIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SLAPostPut
	XML200       *SLAPostPut
}

// Status returns HTTPResponse.Status
func (r PutAPIAccountTeamsTeamIDSLASLAIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIAccountTeamsTeamIDSLASLAIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDTagsRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagGet
	XML200       *TagGet
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDTagsRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDTagsRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIAccountTeamsTeamIDTagsRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TagPostPut
	XML201       *TagPostPut
}

// Status returns HTTPResponse.Status
func (r PostAPIAccountTeamsTeamIDTagsRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIAccountTeamsTeamIDTagsRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIAccountTeamsTeamIDTagsTagIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIAccountTeamsTeamIDTagsTagIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIAccountTeamsTeamIDTagsTagIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDTagsTagIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagGet
	XML200       *TagGet
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDTagsTagIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDTagsTagIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIAccountTeamsTeamIDTagsTagIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagPostPut
	XML200       *TagPostPut
}

// Status returns HTTPResponse.Status
func (r PutAPIAccountTeamsTeamIDTagsTagIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIAccountTeamsTeamIDTagsTagIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDTaskTemplatesRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskTemplateGet
	XML200       *TaskTemplateGet
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDTaskTemplatesRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDTaskTemplatesRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIAccountTeamsTeamIDTaskTemplatesRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TaskTemplatePostPut
	XML201       *TaskTemplatePostPut
}

// Status returns HTTPResponse.Status
func (r PostAPIAccountTeamsTeamIDTaskTemplatesRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIAccountTeamsTeamIDTaskTemplatesRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskTemplateGet
	XML200       *TaskTemplateGet
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskTemplatePostPut
	XML200       *TaskTemplatePostPut
}

// Status returns HTTPResponse.Status
func (r PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountUsersUsernameContactsRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserContactMethod
	XML200       *UserContactMethod
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountUsersUsernameContactsRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountUsersUsernameContactsRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIAccountUsersUsernameContactsRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserContactMethod
	XML201       *UserContactMethod
}

// Status returns HTTPResponse.Status
func (r PostAPIAccountUsersUsernameContactsRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIAccountUsersUsernameContactsRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIAccountUsersUsernameContactsContactIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIAccountUsersUsernameContactsContactIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIAccountUsersUsernameContactsContactIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountUsersUsernameContactsContactIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserContactMethod
	XML200       *UserContactMethod
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountUsersUsernameContactsContactIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountUsersUsernameContactsContactIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountUsersUsernameCustomrolesRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserCustomRole
	XML200       *UserCustomRole
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountUsersUsernameCustomrolesRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountUsersUsernameCustomrolesRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIAccountUsersUsernameCustomrolesRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserCustomRole
	XML201       *UserCustomRole
}

// Status returns HTTPResponse.Status
func (r PostAPIAccountUsersUsernameCustomrolesRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIAccountUsersUsernameCustomrolesRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountUsersUsernameForwardingRulesRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserForwardingRule
	XML200       *UserForwardingRule
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountUsersUsernameForwardingRulesRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountUsersUsernameForwardingRulesRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIAccountUsersUsernameForwardingRulesRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserForwardingRule
	XML201       *UserForwardingRule
}

// Status returns HTTPResponse.Status
func (r PostAPIAccountUsersUsernameForwardingRulesRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIAccountUsersUsernameForwardingRulesRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserForwardingRule
	XML200       *UserForwardingRule
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountUsersUsernameNotificationRulesRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserNotificationRule
	XML200       *UserNotificationRule
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountUsersUsernameNotificationRulesRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountUsersUsernameNotificationRulesRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIAccountUsersUsernameNotificationRulesRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserNotificationRule
	XML201       *UserNotificationRule
}

// Status returns HTTPResponse.Status
func (r PostAPIAccountUsersUsernameNotificationRulesRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIAccountUsersUsernameNotificationRulesRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserNotificationRule
	XML200       *UserNotificationRule
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAlertStatusTraceIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlertStatus
	XML200       *AlertStatus
}

// Status returns HTTPResponse.Status
func (r GetAPIAlertStatusTraceIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAlertStatusTraceIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIEventsIntegrationKeyRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Event
	XML201       *Event
}

// Status returns HTTPResponse.Status
func (r PostAPIEventsIntegrationKeyRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIEventsIntegrationKeyRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIIncidentsRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Incident
	XML201       *Incident
}

// Status returns HTTPResponse.Status
func (r PostAPIIncidentsRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIIncidentsRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIIncidentsFilterRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IncidentFilter
	XML200       *IncidentFilter
}

// Status returns HTTPResponse.Status
func (r PostAPIIncidentsFilterRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIIncidentsFilterRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIIncidentsIncidentNumberRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Incident
	XML200       *Incident
}

// Status returns HTTPResponse.Status
func (r GetAPIIncidentsIncidentNumberRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIIncidentsIncidentNumberRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIIncidentsIncidentNumberRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Incident
	XML200       *Incident
}

// Status returns HTTPResponse.Status
func (r PutAPIIncidentsIncidentNumberRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIIncidentsIncidentNumberRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIIncidentsIncidentNumberAlertsRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IncidentAlert
	XML200       *IncidentAlert
}

// Status returns HTTPResponse.Status
func (r GetAPIIncidentsIncidentNumberAlertsRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIIncidentsIncidentNumberAlertsRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIIncidentsIncidentNumberNoteRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IncidentNote
	XML200       *IncidentNote
}

// Status returns HTTPResponse.Status
func (r GetAPIIncidentsIncidentNumberNoteRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIIncidentsIncidentNumberNoteRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIIncidentsIncidentNumberNoteRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IncidentNote
	XML201       *IncidentNote
}

// Status returns HTTPResponse.Status
func (r PostAPIIncidentsIncidentNumberNoteRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIIncidentsIncidentNumberNoteRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIIncidentsIncidentNumberNoteNoteUniqueIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIIncidentsIncidentNumberNoteNoteUniqueIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIIncidentsIncidentNumberNoteNoteUniqueIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIIncidentsIncidentNumberNoteNoteUniqueIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IncidentNote
	XML200       *IncidentNote
}

// Status returns HTTPResponse.Status
func (r GetAPIIncidentsIncidentNumberNoteNoteUniqueIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIIncidentsIncidentNumberNoteNoteUniqueIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIIncidentsIncidentNumberNoteNoteUniqueIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IncidentNote
	XML200       *IncidentNote
}

// Status returns HTTPResponse.Status
func (r PutAPIIncidentsIncidentNumberNoteNoteUniqueIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIIncidentsIncidentNumberNoteNoteUniqueIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIIncidentsIncidentNumberRespondersRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IncidentResponderResponse
}

// Status returns HTTPResponse.Status
func (r GetAPIIncidentsIncidentNumberRespondersRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIIncidentsIncidentNumberRespondersRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIIncidentsIncidentNumberRespondersRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IncidentResponderPayload
	XML201       *IncidentResponderPayload
}

// Status returns HTTPResponse.Status
func (r PostAPIIncidentsIncidentNumberRespondersRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIIncidentsIncidentNumberRespondersRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIIncidentsIncidentNumberRespondersUniqueIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIIncidentsIncidentNumberRespondersUniqueIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIIncidentsIncidentNumberRespondersUniqueIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIIncidentsIncidentNumberRespondersUniqueIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	XML200       *interface{}
}

// Status returns HTTPResponse.Status
func (r GetAPIIncidentsIncidentNumberRespondersUniqueIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIIncidentsIncidentNumberRespondersUniqueIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIIncidentsIncidentNumberTagsRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IncidentTag
	XML200       *IncidentTag
}

// Status returns HTTPResponse.Status
func (r GetAPIIncidentsIncidentNumberTagsRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIIncidentsIncidentNumberTagsRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIIncidentsIncidentNumberTagsRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IncidentTag
	XML201       *IncidentTag
}

// Status returns HTTPResponse.Status
func (r PostAPIIncidentsIncidentNumberTagsRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIIncidentsIncidentNumberTagsRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIIncidentsIncidentNumberTagsTagUniqueIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIIncidentsIncidentNumberTagsTagUniqueIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIIncidentsIncidentNumberTagsTagUniqueIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIIncidentsIncidentNumberTagsTagUniqueIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IncidentTag
	XML200       *IncidentTag
}

// Status returns HTTPResponse.Status
func (r GetAPIIncidentsIncidentNumberTagsTagUniqueIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIIncidentsIncidentNumberTagsTagUniqueIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchAPIIncidentsUniqueIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Incident
	XML200       *Incident
}

// Status returns HTTPResponse.Status
func (r PatchAPIIncidentsUniqueIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchAPIIncidentsUniqueIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV2AccountEventsRouterRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalRouter
	XML200       *GlobalRouter
}

// Status returns HTTPResponse.Status
func (r GetAPIV2AccountEventsRouterRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV2AccountEventsRouterRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV2AccountEventsRouterRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GlobalRouter
	XML201       *GlobalRouter
}

// Status returns HTTPResponse.Status
func (r PostAPIV2AccountEventsRouterRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV2AccountEventsRouterRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIV2AccountEventsRouterRouterIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIV2AccountEventsRouterRouterIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIV2AccountEventsRouterRouterIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV2AccountEventsRouterRouterIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalRouter
	XML200       *GlobalRouter
}

// Status returns HTTPResponse.Status
func (r GetAPIV2AccountEventsRouterRouterIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV2AccountEventsRouterRouterIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIV2AccountEventsRouterRouterIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalRouter
	XML200       *GlobalRouter
}

// Status returns HTTPResponse.Status
func (r PutAPIV2AccountEventsRouterRouterIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIV2AccountEventsRouterRouterIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV2AccountEventsRouterRouterIDRulesetsRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalRouterRule
	XML200       *GlobalRouterRule
}

// Status returns HTTPResponse.Status
func (r GetAPIV2AccountEventsRouterRouterIDRulesetsRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV2AccountEventsRouterRouterIDRulesetsRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV2AccountEventsRouterRouterIDRulesetsRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GlobalRouterRule
	XML201       *GlobalRouterRule
}

// Status returns HTTPResponse.Status
func (r PostAPIV2AccountEventsRouterRouterIDRulesetsRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV2AccountEventsRouterRouterIDRulesetsRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIV2AccountEventsRouterRouterIDRulesetsRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalRouterRule
	XML200       *GlobalRouterRule
}

// Status returns HTTPResponse.Status
func (r PutAPIV2AccountEventsRouterRouterIDRulesetsRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIV2AccountEventsRouterRouterIDRulesetsRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalRouterRule
	XML200       *GlobalRouterRule
}

// Status returns HTTPResponse.Status
func (r GetAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalRouterRule
	XML200       *GlobalRouterRule
}

// Status returns HTTPResponse.Status
func (r PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV2AccountTeamsTeamIDEscalationPoliciesEpIDOncallRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EscalationPolicyOnCallV2
	XML200       *EscalationPolicyOnCallV2
}

// Status returns HTTPResponse.Status
func (r GetAPIV2AccountTeamsTeamIDEscalationPoliciesEpIDOncallRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV2AccountTeamsTeamIDEscalationPoliciesEpIDOncallRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV2AccountTeamsTeamIDOncallRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EscalationPolicyOnCallV2
	XML200       *EscalationPolicyOnCallV2
}

// Status returns HTTPResponse.Status
func (r GetAPIV2AccountTeamsTeamIDOncallRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV2AccountTeamsTeamIDOncallRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduleOverrideList
}

// Status returns HTTPResponse.Status
func (r GetAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ScheduleOverride
	XML201       *ScheduleOverride
}

// Status returns HTTPResponse.Status
func (r PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV2AccountTeamsTeamIDServicesServiceIDOncallRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EscalationPolicyOnCallV2
	XML200       *EscalationPolicyOnCallV2
}

// Status returns HTTPResponse.Status
func (r GetAPIV2AccountTeamsTeamIDServicesServiceIDOncallRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV2AccountTeamsTeamIDServicesServiceIDOncallRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationAccountIDGenericIntegrationKeyRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventV3
	XML200       *EventV3
}

// Status returns HTTPResponse.Status
func (r PostIntegrationAccountIDGenericIntegrationKeyRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationAccountIDGenericIntegrationKeyRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlertTransformer
	XML200       *AlertTransformer
}

// Status returns HTTPResponse.Status
func (r GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlertTransformer
	XML200       *AlertTransformer
}

// Status returns HTTPResponse.Status
func (r PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAPIAccountAPIInviteWithBodyWithResponse request with arbitrary body returning *PostAPIAccountAPIInviteRes
func (c *ClientWithResponses) PostAPIAccountAPIInviteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountAPIInviteRes, error) {
	rsp, err := c.PostAPIAccountAPIInviteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountAPIInviteRes(rsp)
}

func (c *ClientWithResponses) PostAPIAccountAPIInviteWithResponse(ctx context.Context, body PostAPIAccountAPIInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountAPIInviteRes, error) {
	rsp, err := c.PostAPIAccountAPIInvite(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountAPIInviteRes(rsp)
}

// GetAPIAccountCustomrolesWithResponse request returning *GetAPIAccountCustomrolesRes
func (c *ClientWithResponses) GetAPIAccountCustomrolesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIAccountCustomrolesRes, error) {
	rsp, err := c.GetAPIAccountCustomroles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountCustomrolesRes(rsp)
}

// PostAPIAccountCustomrolesWithBodyWithResponse request with arbitrary body returning *PostAPIAccountCustomrolesRes
func (c *ClientWithResponses) PostAPIAccountCustomrolesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountCustomrolesRes, error) {
	rsp, err := c.PostAPIAccountCustomrolesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountCustomrolesRes(rsp)
}

func (c *ClientWithResponses) PostAPIAccountCustomrolesWithResponse(ctx context.Context, body PostAPIAccountCustomrolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountCustomrolesRes, error) {
	rsp, err := c.PostAPIAccountCustomroles(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountCustomrolesRes(rsp)
}

// DeleteAPIAccountCustomrolesCustomRoleIDWithResponse request returning *DeleteAPIAccountCustomrolesCustomRoleIDRes
func (c *ClientWithResponses) DeleteAPIAccountCustomrolesCustomRoleIDWithResponse(ctx context.Context, customRoleID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountCustomrolesCustomRoleIDRes, error) {
	rsp, err := c.DeleteAPIAccountCustomrolesCustomRoleID(ctx, customRoleID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIAccountCustomrolesCustomRoleIDRes(rsp)
}

// GetAPIAccountCustomrolesCustomRoleIDWithResponse request returning *GetAPIAccountCustomrolesCustomRoleIDRes
func (c *ClientWithResponses) GetAPIAccountCustomrolesCustomRoleIDWithResponse(ctx context.Context, customRoleID string, reqEditors ...RequestEditorFn) (*GetAPIAccountCustomrolesCustomRoleIDRes, error) {
	rsp, err := c.GetAPIAccountCustomrolesCustomRoleID(ctx, customRoleID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountCustomrolesCustomRoleIDRes(rsp)
}

// PutAPIAccountCustomrolesCustomRoleIDWithBodyWithResponse request with arbitrary body returning *PutAPIAccountCustomrolesCustomRoleIDRes
func (c *ClientWithResponses) PutAPIAccountCustomrolesCustomRoleIDWithBodyWithResponse(ctx context.Context, customRoleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountCustomrolesCustomRoleIDRes, error) {
	rsp, err := c.PutAPIAccountCustomrolesCustomRoleIDWithBody(ctx, customRoleID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountCustomrolesCustomRoleIDRes(rsp)
}

func (c *ClientWithResponses) PutAPIAccountCustomrolesCustomRoleIDWithResponse(ctx context.Context, customRoleID string, body PutAPIAccountCustomrolesCustomRoleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountCustomrolesCustomRoleIDRes, error) {
	rsp, err := c.PutAPIAccountCustomrolesCustomRoleID(ctx, customRoleID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountCustomrolesCustomRoleIDRes(rsp)
}

// PostAPIAccountDeleteuserWithBodyWithResponse request with arbitrary body returning *PostAPIAccountDeleteuserRes
func (c *ClientWithResponses) PostAPIAccountDeleteuserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountDeleteuserRes, error) {
	rsp, err := c.PostAPIAccountDeleteuserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountDeleteuserRes(rsp)
}

func (c *ClientWithResponses) PostAPIAccountDeleteuserWithResponse(ctx context.Context, body PostAPIAccountDeleteuserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountDeleteuserRes, error) {
	rsp, err := c.PostAPIAccountDeleteuser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountDeleteuserRes(rsp)
}

// GetAPIAccountMembersWithResponse request returning *GetAPIAccountMembersRes
func (c *ClientWithResponses) GetAPIAccountMembersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIAccountMembersRes, error) {
	rsp, err := c.GetAPIAccountMembers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountMembersRes(rsp)
}

// GetAPIAccountMembersUsernameWithResponse request returning *GetAPIAccountMembersUsernameRes
func (c *ClientWithResponses) GetAPIAccountMembersUsernameWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetAPIAccountMembersUsernameRes, error) {
	rsp, err := c.GetAPIAccountMembersUsername(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountMembersUsernameRes(rsp)
}

// PutAPIAccountMembersUsernameWithBodyWithResponse request with arbitrary body returning *PutAPIAccountMembersUsernameRes
func (c *ClientWithResponses) PutAPIAccountMembersUsernameWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountMembersUsernameRes, error) {
	rsp, err := c.PutAPIAccountMembersUsernameWithBody(ctx, username, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountMembersUsernameRes(rsp)
}

func (c *ClientWithResponses) PutAPIAccountMembersUsernameWithResponse(ctx context.Context, username string, body PutAPIAccountMembersUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountMembersUsernameRes, error) {
	rsp, err := c.PutAPIAccountMembersUsername(ctx, username, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountMembersUsernameRes(rsp)
}

// PostAPIAccountRegenerateIntegrationKeyWithBodyWithResponse request with arbitrary body returning *PostAPIAccountRegenerateIntegrationKeyRes
func (c *ClientWithResponses) PostAPIAccountRegenerateIntegrationKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountRegenerateIntegrationKeyRes, error) {
	rsp, err := c.PostAPIAccountRegenerateIntegrationKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountRegenerateIntegrationKeyRes(rsp)
}

func (c *ClientWithResponses) PostAPIAccountRegenerateIntegrationKeyWithResponse(ctx context.Context, body PostAPIAccountRegenerateIntegrationKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountRegenerateIntegrationKeyRes, error) {
	rsp, err := c.PostAPIAccountRegenerateIntegrationKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountRegenerateIntegrationKeyRes(rsp)
}

// GetAPIAccountTeamsWithResponse request returning *GetAPIAccountTeamsRes
func (c *ClientWithResponses) GetAPIAccountTeamsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsRes, error) {
	rsp, err := c.GetAPIAccountTeams(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsRes(rsp)
}

// PostAPIAccountTeamsWithBodyWithResponse request with arbitrary body returning *PostAPIAccountTeamsRes
func (c *ClientWithResponses) PostAPIAccountTeamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsRes, error) {
	rsp, err := c.PostAPIAccountTeamsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsRes(rsp)
}

func (c *ClientWithResponses) PostAPIAccountTeamsWithResponse(ctx context.Context, body PostAPIAccountTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsRes, error) {
	rsp, err := c.PostAPIAccountTeams(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsRes(rsp)
}

// DeleteAPIAccountTeamsTeamIDWithResponse request returning *DeleteAPIAccountTeamsTeamIDRes
func (c *ClientWithResponses) DeleteAPIAccountTeamsTeamIDWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDRes, error) {
	rsp, err := c.DeleteAPIAccountTeamsTeamID(ctx, teamID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIAccountTeamsTeamIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDWithResponse request returning *GetAPIAccountTeamsTeamIDRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamID(ctx, teamID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDRes(rsp)
}

// PutAPIAccountTeamsTeamIDWithBodyWithResponse request with arbitrary body returning *PutAPIAccountTeamsTeamIDRes
func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDWithBody(ctx, teamID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDRes(rsp)
}

func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDWithResponse(ctx context.Context, teamID string, body PutAPIAccountTeamsTeamIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamID(ctx, teamID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDEscalationPoliciesWithResponse request returning *GetAPIAccountTeamsTeamIDEscalationPoliciesRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDEscalationPoliciesWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDEscalationPoliciesRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDEscalationPolicies(ctx, teamID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDEscalationPoliciesRes(rsp)
}

// PostAPIAccountTeamsTeamIDEscalationPoliciesWithBodyWithResponse request with arbitrary body returning *PostAPIAccountTeamsTeamIDEscalationPoliciesRes
func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDEscalationPoliciesWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDEscalationPoliciesRes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDEscalationPoliciesWithBody(ctx, teamID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDEscalationPoliciesRes(rsp)
}

func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDEscalationPoliciesWithResponse(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDEscalationPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDEscalationPoliciesRes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDEscalationPolicies(ctx, teamID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDEscalationPoliciesRes(rsp)
}

// DeleteAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDWithResponse request returning *DeleteAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes
func (c *ClientWithResponses) DeleteAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDWithResponse(ctx context.Context, teamID string, escalationPolicyID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes, error) {
	rsp, err := c.DeleteAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyID(ctx, teamID, escalationPolicyID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDWithResponse request returning *GetAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDWithResponse(ctx context.Context, teamID string, escalationPolicyID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyID(ctx, teamID, escalationPolicyID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes(rsp)
}

// PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDWithBodyWithResponse request with arbitrary body returning *PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes
func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDWithBodyWithResponse(ctx context.Context, teamID string, escalationPolicyID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDWithBody(ctx, teamID, escalationPolicyID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes(rsp)
}

func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDWithResponse(ctx context.Context, teamID string, escalationPolicyID string, body PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyID(ctx, teamID, escalationPolicyID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDMaintenanceWithResponse request returning *GetAPIAccountTeamsTeamIDMaintenanceRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDMaintenanceWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDMaintenanceRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDMaintenance(ctx, teamID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDMaintenanceRes(rsp)
}

// PostAPIAccountTeamsTeamIDMaintenanceWithBodyWithResponse request with arbitrary body returning *PostAPIAccountTeamsTeamIDMaintenanceRes
func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDMaintenanceWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDMaintenanceRes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDMaintenanceWithBody(ctx, teamID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDMaintenanceRes(rsp)
}

func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDMaintenanceWithResponse(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDMaintenanceRes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDMaintenance(ctx, teamID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDMaintenanceRes(rsp)
}

// DeleteAPIAccountTeamsTeamIDMaintenanceMaintenanceIDWithResponse request returning *DeleteAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes
func (c *ClientWithResponses) DeleteAPIAccountTeamsTeamIDMaintenanceMaintenanceIDWithResponse(ctx context.Context, teamID string, maintenanceID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes, error) {
	rsp, err := c.DeleteAPIAccountTeamsTeamIDMaintenanceMaintenanceID(ctx, teamID, maintenanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDMaintenanceMaintenanceIDWithResponse request returning *GetAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDMaintenanceMaintenanceIDWithResponse(ctx context.Context, teamID string, maintenanceID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDMaintenanceMaintenanceID(ctx, teamID, maintenanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes(rsp)
}

// PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDWithBodyWithResponse request with arbitrary body returning *PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes
func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDWithBodyWithResponse(ctx context.Context, teamID string, maintenanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDWithBody(ctx, teamID, maintenanceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes(rsp)
}

func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDWithResponse(ctx context.Context, teamID string, maintenanceID string, body PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDMaintenanceMaintenanceID(ctx, teamID, maintenanceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDMembersWithResponse request returning *GetAPIAccountTeamsTeamIDMembersRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDMembersWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDMembersRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDMembers(ctx, teamID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDMembersRes(rsp)
}

// PostAPIAccountTeamsTeamIDMembersWithBodyWithResponse request with arbitrary body returning *PostAPIAccountTeamsTeamIDMembersRes
func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDMembersWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDMembersRes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDMembersWithBody(ctx, teamID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDMembersRes(rsp)
}

func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDMembersWithResponse(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDMembersRes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDMembers(ctx, teamID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDMembersRes(rsp)
}

// DeleteAPIAccountTeamsTeamIDMembersMemberIDWithResponse request returning *DeleteAPIAccountTeamsTeamIDMembersMemberIDRes
func (c *ClientWithResponses) DeleteAPIAccountTeamsTeamIDMembersMemberIDWithResponse(ctx context.Context, teamID string, memberID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDMembersMemberIDRes, error) {
	rsp, err := c.DeleteAPIAccountTeamsTeamIDMembersMemberID(ctx, teamID, memberID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIAccountTeamsTeamIDMembersMemberIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDMembersMemberIDWithResponse request returning *GetAPIAccountTeamsTeamIDMembersMemberIDRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDMembersMemberIDWithResponse(ctx context.Context, teamID string, memberID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDMembersMemberIDRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDMembersMemberID(ctx, teamID, memberID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDMembersMemberIDRes(rsp)
}

// PutAPIAccountTeamsTeamIDMembersMemberIDWithBodyWithResponse request with arbitrary body returning *PutAPIAccountTeamsTeamIDMembersMemberIDRes
func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDMembersMemberIDWithBodyWithResponse(ctx context.Context, teamID string, memberID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDMembersMemberIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDMembersMemberIDWithBody(ctx, teamID, memberID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDMembersMemberIDRes(rsp)
}

func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDMembersMemberIDWithResponse(ctx context.Context, teamID string, memberID string, body PutAPIAccountTeamsTeamIDMembersMemberIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDMembersMemberIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDMembersMemberID(ctx, teamID, memberID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDMembersMemberIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDOncallWithResponse request returning *GetAPIAccountTeamsTeamIDOncallRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDOncallWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDOncallRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDOncall(ctx, teamID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDOncallRes(rsp)
}

// GetAPIAccountTeamsTeamIDPermissionsWithResponse request returning *GetAPIAccountTeamsTeamIDPermissionsRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDPermissionsWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDPermissionsRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDPermissions(ctx, teamID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDPermissionsRes(rsp)
}

// PutAPIAccountTeamsTeamIDPermissionsWithBodyWithResponse request with arbitrary body returning *PutAPIAccountTeamsTeamIDPermissionsRes
func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDPermissionsWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDPermissionsRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDPermissionsWithBody(ctx, teamID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDPermissionsRes(rsp)
}

func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDPermissionsWithResponse(ctx context.Context, teamID string, body PutAPIAccountTeamsTeamIDPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDPermissionsRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDPermissions(ctx, teamID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDPermissionsRes(rsp)
}

// GetAPIAccountTeamsTeamIDPostmortemWithResponse request returning *GetAPIAccountTeamsTeamIDPostmortemRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDPostmortemWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDPostmortemRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDPostmortem(ctx, teamID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDPostmortemRes(rsp)
}

// PostAPIAccountTeamsTeamIDPostmortemWithBodyWithResponse request with arbitrary body returning *PostAPIAccountTeamsTeamIDPostmortemRes
func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDPostmortemWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDPostmortemRes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDPostmortemWithBody(ctx, teamID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDPostmortemRes(rsp)
}

func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDPostmortemWithResponse(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDPostmortemJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDPostmortemRes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDPostmortem(ctx, teamID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDPostmortemRes(rsp)
}

// DeleteAPIAccountTeamsTeamIDPostmortemPostmortemIDWithResponse request returning *DeleteAPIAccountTeamsTeamIDPostmortemPostmortemIDRes
func (c *ClientWithResponses) DeleteAPIAccountTeamsTeamIDPostmortemPostmortemIDWithResponse(ctx context.Context, teamID string, postmortemID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDPostmortemPostmortemIDRes, error) {
	rsp, err := c.DeleteAPIAccountTeamsTeamIDPostmortemPostmortemID(ctx, teamID, postmortemID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIAccountTeamsTeamIDPostmortemPostmortemIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDPostmortemPostmortemIDWithResponse request returning *GetAPIAccountTeamsTeamIDPostmortemPostmortemIDRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDPostmortemPostmortemIDWithResponse(ctx context.Context, teamID string, postmortemID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDPostmortemPostmortemIDRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDPostmortemPostmortemID(ctx, teamID, postmortemID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDPostmortemPostmortemIDRes(rsp)
}

// PutAPIAccountTeamsTeamIDPostmortemPostmortemIDWithBodyWithResponse request with arbitrary body returning *PutAPIAccountTeamsTeamIDPostmortemPostmortemIDRes
func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDPostmortemPostmortemIDWithBodyWithResponse(ctx context.Context, teamID string, postmortemID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDPostmortemPostmortemIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDPostmortemPostmortemIDWithBody(ctx, teamID, postmortemID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDPostmortemPostmortemIDRes(rsp)
}

func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDPostmortemPostmortemIDWithResponse(ctx context.Context, teamID string, postmortemID string, body PutAPIAccountTeamsTeamIDPostmortemPostmortemIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDPostmortemPostmortemIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDPostmortemPostmortemID(ctx, teamID, postmortemID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDPostmortemPostmortemIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDPriorityWithResponse request returning *GetAPIAccountTeamsTeamIDPriorityRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDPriorityWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDPriorityRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDPriority(ctx, teamID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDPriorityRes(rsp)
}

// PostAPIAccountTeamsTeamIDPriorityWithBodyWithResponse request with arbitrary body returning *PostAPIAccountTeamsTeamIDPriorityRes
func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDPriorityWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDPriorityRes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDPriorityWithBody(ctx, teamID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDPriorityRes(rsp)
}

func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDPriorityWithResponse(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDPriorityJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDPriorityRes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDPriority(ctx, teamID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDPriorityRes(rsp)
}

// DeleteAPIAccountTeamsTeamIDPriorityPriorityIDWithResponse request returning *DeleteAPIAccountTeamsTeamIDPriorityPriorityIDRes
func (c *ClientWithResponses) DeleteAPIAccountTeamsTeamIDPriorityPriorityIDWithResponse(ctx context.Context, teamID string, priorityID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDPriorityPriorityIDRes, error) {
	rsp, err := c.DeleteAPIAccountTeamsTeamIDPriorityPriorityID(ctx, teamID, priorityID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIAccountTeamsTeamIDPriorityPriorityIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDPriorityPriorityIDWithResponse request returning *GetAPIAccountTeamsTeamIDPriorityPriorityIDRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDPriorityPriorityIDWithResponse(ctx context.Context, teamID string, priorityID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDPriorityPriorityIDRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDPriorityPriorityID(ctx, teamID, priorityID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDPriorityPriorityIDRes(rsp)
}

// PutAPIAccountTeamsTeamIDPriorityPriorityIDWithBodyWithResponse request with arbitrary body returning *PutAPIAccountTeamsTeamIDPriorityPriorityIDRes
func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDPriorityPriorityIDWithBodyWithResponse(ctx context.Context, teamID string, priorityID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDPriorityPriorityIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDPriorityPriorityIDWithBody(ctx, teamID, priorityID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDPriorityPriorityIDRes(rsp)
}

func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDPriorityPriorityIDWithResponse(ctx context.Context, teamID string, priorityID string, body PutAPIAccountTeamsTeamIDPriorityPriorityIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDPriorityPriorityIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDPriorityPriorityID(ctx, teamID, priorityID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDPriorityPriorityIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDRolesWithResponse request returning *GetAPIAccountTeamsTeamIDRolesRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDRolesWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDRolesRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDRoles(ctx, teamID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDRolesRes(rsp)
}

// PostAPIAccountTeamsTeamIDRolesWithBodyWithResponse request with arbitrary body returning *PostAPIAccountTeamsTeamIDRolesRes
func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDRolesWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDRolesRes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDRolesWithBody(ctx, teamID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDRolesRes(rsp)
}

func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDRolesWithResponse(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDRolesRes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDRoles(ctx, teamID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDRolesRes(rsp)
}

// DeleteAPIAccountTeamsTeamIDRolesIncidentRoleIDWithResponse request returning *DeleteAPIAccountTeamsTeamIDRolesIncidentRoleIDRes
func (c *ClientWithResponses) DeleteAPIAccountTeamsTeamIDRolesIncidentRoleIDWithResponse(ctx context.Context, teamID string, incidentRoleID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDRolesIncidentRoleIDRes, error) {
	rsp, err := c.DeleteAPIAccountTeamsTeamIDRolesIncidentRoleID(ctx, teamID, incidentRoleID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIAccountTeamsTeamIDRolesIncidentRoleIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDRolesIncidentRoleIDWithResponse request returning *GetAPIAccountTeamsTeamIDRolesIncidentRoleIDRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDRolesIncidentRoleIDWithResponse(ctx context.Context, teamID string, incidentRoleID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDRolesIncidentRoleIDRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDRolesIncidentRoleID(ctx, teamID, incidentRoleID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDRolesIncidentRoleIDRes(rsp)
}

// PutAPIAccountTeamsTeamIDRolesIncidentRoleIDWithBodyWithResponse request with arbitrary body returning *PutAPIAccountTeamsTeamIDRolesIncidentRoleIDRes
func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDRolesIncidentRoleIDWithBodyWithResponse(ctx context.Context, teamID string, incidentRoleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDRolesIncidentRoleIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDRolesIncidentRoleIDWithBody(ctx, teamID, incidentRoleID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDRolesIncidentRoleIDRes(rsp)
}

func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDRolesIncidentRoleIDWithResponse(ctx context.Context, teamID string, incidentRoleID string, body PutAPIAccountTeamsTeamIDRolesIncidentRoleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDRolesIncidentRoleIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDRolesIncidentRoleID(ctx, teamID, incidentRoleID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDRolesIncidentRoleIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDSchedulesWithResponse request returning *GetAPIAccountTeamsTeamIDSchedulesRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDSchedulesWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDSchedulesRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDSchedules(ctx, teamID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDSchedulesRes(rsp)
}

// PostAPIAccountTeamsTeamIDSchedulesWithBodyWithResponse request with arbitrary body returning *PostAPIAccountTeamsTeamIDSchedulesRes
func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDSchedulesWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDSchedulesRes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDSchedulesWithBody(ctx, teamID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDSchedulesRes(rsp)
}

func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDSchedulesWithResponse(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDSchedulesRes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDSchedules(ctx, teamID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDSchedulesRes(rsp)
}

// DeleteAPIAccountTeamsTeamIDSchedulesScheduleIDWithResponse request returning *DeleteAPIAccountTeamsTeamIDSchedulesScheduleIDRes
func (c *ClientWithResponses) DeleteAPIAccountTeamsTeamIDSchedulesScheduleIDWithResponse(ctx context.Context, teamID string, scheduleID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDSchedulesScheduleIDRes, error) {
	rsp, err := c.DeleteAPIAccountTeamsTeamIDSchedulesScheduleID(ctx, teamID, scheduleID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIAccountTeamsTeamIDSchedulesScheduleIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDSchedulesScheduleIDWithResponse request returning *GetAPIAccountTeamsTeamIDSchedulesScheduleIDRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDSchedulesScheduleIDWithResponse(ctx context.Context, teamID string, scheduleID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDSchedulesScheduleIDRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDSchedulesScheduleID(ctx, teamID, scheduleID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDSchedulesScheduleIDRes(rsp)
}

// PutAPIAccountTeamsTeamIDSchedulesScheduleIDWithBodyWithResponse request with arbitrary body returning *PutAPIAccountTeamsTeamIDSchedulesScheduleIDRes
func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDSchedulesScheduleIDWithBodyWithResponse(ctx context.Context, teamID string, scheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDSchedulesScheduleIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDSchedulesScheduleIDWithBody(ctx, teamID, scheduleID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDSchedulesScheduleIDRes(rsp)
}

func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDSchedulesScheduleIDWithResponse(ctx context.Context, teamID string, scheduleID string, body PutAPIAccountTeamsTeamIDSchedulesScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDSchedulesScheduleIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDSchedulesScheduleID(ctx, teamID, scheduleID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDSchedulesScheduleIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDServicesWithResponse request returning *GetAPIAccountTeamsTeamIDServicesRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDServicesWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDServicesRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDServices(ctx, teamID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDServicesRes(rsp)
}

// PostAPIAccountTeamsTeamIDServicesWithBodyWithResponse request with arbitrary body returning *PostAPIAccountTeamsTeamIDServicesRes
func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDServicesWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDServicesRes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDServicesWithBody(ctx, teamID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDServicesRes(rsp)
}

func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDServicesWithResponse(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDServicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDServicesRes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDServices(ctx, teamID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDServicesRes(rsp)
}

// DeleteAPIAccountTeamsTeamIDServicesServiceIDWithResponse request returning *DeleteAPIAccountTeamsTeamIDServicesServiceIDRes
func (c *ClientWithResponses) DeleteAPIAccountTeamsTeamIDServicesServiceIDWithResponse(ctx context.Context, teamID string, serviceID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDServicesServiceIDRes, error) {
	rsp, err := c.DeleteAPIAccountTeamsTeamIDServicesServiceID(ctx, teamID, serviceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIAccountTeamsTeamIDServicesServiceIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDServicesServiceIDWithResponse request returning *GetAPIAccountTeamsTeamIDServicesServiceIDRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDServicesServiceIDWithResponse(ctx context.Context, teamID string, serviceID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDServicesServiceIDRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDServicesServiceID(ctx, teamID, serviceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDServicesServiceIDRes(rsp)
}

// PutAPIAccountTeamsTeamIDServicesServiceIDWithBodyWithResponse request with arbitrary body returning *PutAPIAccountTeamsTeamIDServicesServiceIDRes
func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDServicesServiceIDWithBodyWithResponse(ctx context.Context, teamID string, serviceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDServicesServiceIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDServicesServiceIDWithBody(ctx, teamID, serviceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDServicesServiceIDRes(rsp)
}

func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDServicesServiceIDWithResponse(ctx context.Context, teamID string, serviceID string, body PutAPIAccountTeamsTeamIDServicesServiceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDServicesServiceIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDServicesServiceID(ctx, teamID, serviceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDServicesServiceIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsWithResponse request returning *GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsWithResponse(ctx context.Context, teamID string, serviceID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDServicesServiceIDIntegrations(ctx, teamID, serviceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes(rsp)
}

// PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsWithBodyWithResponse request with arbitrary body returning *PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes
func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsWithBodyWithResponse(ctx context.Context, teamID string, serviceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsWithBody(ctx, teamID, serviceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes(rsp)
}

func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsWithResponse(ctx context.Context, teamID string, serviceID string, body PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDServicesServiceIDIntegrations(ctx, teamID, serviceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes(rsp)
}

// DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDWithResponse request returning *DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes
func (c *ClientWithResponses) DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDWithResponse(ctx context.Context, teamID string, serviceID string, integrationID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes, error) {
	rsp, err := c.DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationID(ctx, teamID, serviceID, integrationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDWithResponse request returning *GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDWithResponse(ctx context.Context, teamID string, serviceID string, integrationID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationID(ctx, teamID, serviceID, integrationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes(rsp)
}

// PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDWithBodyWithResponse request with arbitrary body returning *PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes
func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDWithBodyWithResponse(ctx context.Context, teamID string, serviceID string, integrationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDWithBody(ctx, teamID, serviceID, integrationID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes(rsp)
}

func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDWithResponse(ctx context.Context, teamID string, serviceID string, integrationID string, body PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationID(ctx, teamID, serviceID, integrationID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDAlertsWithResponse request returning *GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDAlertsRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDAlertsWithResponse(ctx context.Context, teamID string, serviceID string, integrationID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDAlertsRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDAlerts(ctx, teamID, serviceID, integrationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDAlertsRes(rsp)
}

// GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersWithResponse request returning *GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersWithResponse(ctx context.Context, teamID string, serviceID string, integrationID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformers(ctx, teamID, serviceID, integrationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes(rsp)
}

// PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersWithBodyWithResponse request with arbitrary body returning *PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes
func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersWithBodyWithResponse(ctx context.Context, teamID string, serviceID string, integrationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersWithBody(ctx, teamID, serviceID, integrationID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes(rsp)
}

func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersWithResponse(ctx context.Context, teamID string, serviceID string, integrationID string, body PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformers(ctx, teamID, serviceID, integrationID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes(rsp)
}

// GetAPIAccountTeamsTeamIDSLAWithResponse request returning *GetAPIAccountTeamsTeamIDSLARes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDSLAWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDSLARes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDSLA(ctx, teamID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDSLARes(rsp)
}

// PostAPIAccountTeamsTeamIDSLAWithBodyWithResponse request with arbitrary body returning *PostAPIAccountTeamsTeamIDSLARes
func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDSLAWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDSLARes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDSLAWithBody(ctx, teamID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDSLARes(rsp)
}

func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDSLAWithResponse(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDSLAJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDSLARes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDSLA(ctx, teamID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDSLARes(rsp)
}

// DeleteAPIAccountTeamsTeamIDSLASLAIDWithResponse request returning *DeleteAPIAccountTeamsTeamIDSLASLAIDRes
func (c *ClientWithResponses) DeleteAPIAccountTeamsTeamIDSLASLAIDWithResponse(ctx context.Context, teamID string, slaid string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDSLASLAIDRes, error) {
	rsp, err := c.DeleteAPIAccountTeamsTeamIDSLASLAID(ctx, teamID, slaid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIAccountTeamsTeamIDSLASLAIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDSLASLAIDWithResponse request returning *GetAPIAccountTeamsTeamIDSLASLAIDRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDSLASLAIDWithResponse(ctx context.Context, teamID string, slaid string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDSLASLAIDRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDSLASLAID(ctx, teamID, slaid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDSLASLAIDRes(rsp)
}

// PutAPIAccountTeamsTeamIDSLASLAIDWithBodyWithResponse request with arbitrary body returning *PutAPIAccountTeamsTeamIDSLASLAIDRes
func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDSLASLAIDWithBodyWithResponse(ctx context.Context, teamID string, slaid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDSLASLAIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDSLASLAIDWithBody(ctx, teamID, slaid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDSLASLAIDRes(rsp)
}

func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDSLASLAIDWithResponse(ctx context.Context, teamID string, slaid string, body PutAPIAccountTeamsTeamIDSLASLAIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDSLASLAIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDSLASLAID(ctx, teamID, slaid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDSLASLAIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDTagsWithResponse request returning *GetAPIAccountTeamsTeamIDTagsRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDTagsWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDTagsRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDTags(ctx, teamID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDTagsRes(rsp)
}

// PostAPIAccountTeamsTeamIDTagsWithBodyWithResponse request with arbitrary body returning *PostAPIAccountTeamsTeamIDTagsRes
func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDTagsWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDTagsRes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDTagsWithBody(ctx, teamID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDTagsRes(rsp)
}

func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDTagsWithResponse(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDTagsRes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDTags(ctx, teamID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDTagsRes(rsp)
}

// DeleteAPIAccountTeamsTeamIDTagsTagIDWithResponse request returning *DeleteAPIAccountTeamsTeamIDTagsTagIDRes
func (c *ClientWithResponses) DeleteAPIAccountTeamsTeamIDTagsTagIDWithResponse(ctx context.Context, teamID string, tagID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDTagsTagIDRes, error) {
	rsp, err := c.DeleteAPIAccountTeamsTeamIDTagsTagID(ctx, teamID, tagID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIAccountTeamsTeamIDTagsTagIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDTagsTagIDWithResponse request returning *GetAPIAccountTeamsTeamIDTagsTagIDRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDTagsTagIDWithResponse(ctx context.Context, teamID string, tagID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDTagsTagIDRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDTagsTagID(ctx, teamID, tagID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDTagsTagIDRes(rsp)
}

// PutAPIAccountTeamsTeamIDTagsTagIDWithBodyWithResponse request with arbitrary body returning *PutAPIAccountTeamsTeamIDTagsTagIDRes
func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDTagsTagIDWithBodyWithResponse(ctx context.Context, teamID string, tagID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDTagsTagIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDTagsTagIDWithBody(ctx, teamID, tagID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDTagsTagIDRes(rsp)
}

func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDTagsTagIDWithResponse(ctx context.Context, teamID string, tagID string, body PutAPIAccountTeamsTeamIDTagsTagIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDTagsTagIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDTagsTagID(ctx, teamID, tagID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDTagsTagIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDTaskTemplatesWithResponse request returning *GetAPIAccountTeamsTeamIDTaskTemplatesRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDTaskTemplatesWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDTaskTemplatesRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDTaskTemplates(ctx, teamID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDTaskTemplatesRes(rsp)
}

// PostAPIAccountTeamsTeamIDTaskTemplatesWithBodyWithResponse request with arbitrary body returning *PostAPIAccountTeamsTeamIDTaskTemplatesRes
func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDTaskTemplatesWithBodyWithResponse(ctx context.Context, teamID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDTaskTemplatesRes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDTaskTemplatesWithBody(ctx, teamID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDTaskTemplatesRes(rsp)
}

func (c *ClientWithResponses) PostAPIAccountTeamsTeamIDTaskTemplatesWithResponse(ctx context.Context, teamID string, body PostAPIAccountTeamsTeamIDTaskTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountTeamsTeamIDTaskTemplatesRes, error) {
	rsp, err := c.PostAPIAccountTeamsTeamIDTaskTemplates(ctx, teamID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountTeamsTeamIDTaskTemplatesRes(rsp)
}

// DeleteAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDWithResponse request returning *DeleteAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes
func (c *ClientWithResponses) DeleteAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDWithResponse(ctx context.Context, teamID string, taskTemplateID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes, error) {
	rsp, err := c.DeleteAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateID(ctx, teamID, taskTemplateID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDWithResponse request returning *GetAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDWithResponse(ctx context.Context, teamID string, taskTemplateID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateID(ctx, teamID, taskTemplateID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes(rsp)
}

// PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDWithBodyWithResponse request with arbitrary body returning *PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes
func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDWithBodyWithResponse(ctx context.Context, teamID string, taskTemplateID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDWithBody(ctx, teamID, taskTemplateID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes(rsp)
}

func (c *ClientWithResponses) PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDWithResponse(ctx context.Context, teamID string, taskTemplateID string, body PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes, error) {
	rsp, err := c.PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateID(ctx, teamID, taskTemplateID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes(rsp)
}

// GetAPIAccountUsersUsernameContactsWithResponse request returning *GetAPIAccountUsersUsernameContactsRes
func (c *ClientWithResponses) GetAPIAccountUsersUsernameContactsWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetAPIAccountUsersUsernameContactsRes, error) {
	rsp, err := c.GetAPIAccountUsersUsernameContacts(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountUsersUsernameContactsRes(rsp)
}

// PostAPIAccountUsersUsernameContactsWithBodyWithResponse request with arbitrary body returning *PostAPIAccountUsersUsernameContactsRes
func (c *ClientWithResponses) PostAPIAccountUsersUsernameContactsWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountUsersUsernameContactsRes, error) {
	rsp, err := c.PostAPIAccountUsersUsernameContactsWithBody(ctx, username, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountUsersUsernameContactsRes(rsp)
}

func (c *ClientWithResponses) PostAPIAccountUsersUsernameContactsWithResponse(ctx context.Context, username string, body PostAPIAccountUsersUsernameContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountUsersUsernameContactsRes, error) {
	rsp, err := c.PostAPIAccountUsersUsernameContacts(ctx, username, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountUsersUsernameContactsRes(rsp)
}

// DeleteAPIAccountUsersUsernameContactsContactIDWithResponse request returning *DeleteAPIAccountUsersUsernameContactsContactIDRes
func (c *ClientWithResponses) DeleteAPIAccountUsersUsernameContactsContactIDWithResponse(ctx context.Context, username string, contactID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountUsersUsernameContactsContactIDRes, error) {
	rsp, err := c.DeleteAPIAccountUsersUsernameContactsContactID(ctx, username, contactID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIAccountUsersUsernameContactsContactIDRes(rsp)
}

// GetAPIAccountUsersUsernameContactsContactIDWithResponse request returning *GetAPIAccountUsersUsernameContactsContactIDRes
func (c *ClientWithResponses) GetAPIAccountUsersUsernameContactsContactIDWithResponse(ctx context.Context, username string, contactID string, reqEditors ...RequestEditorFn) (*GetAPIAccountUsersUsernameContactsContactIDRes, error) {
	rsp, err := c.GetAPIAccountUsersUsernameContactsContactID(ctx, username, contactID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountUsersUsernameContactsContactIDRes(rsp)
}

// GetAPIAccountUsersUsernameCustomrolesWithResponse request returning *GetAPIAccountUsersUsernameCustomrolesRes
func (c *ClientWithResponses) GetAPIAccountUsersUsernameCustomrolesWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetAPIAccountUsersUsernameCustomrolesRes, error) {
	rsp, err := c.GetAPIAccountUsersUsernameCustomroles(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountUsersUsernameCustomrolesRes(rsp)
}

// PostAPIAccountUsersUsernameCustomrolesWithBodyWithResponse request with arbitrary body returning *PostAPIAccountUsersUsernameCustomrolesRes
func (c *ClientWithResponses) PostAPIAccountUsersUsernameCustomrolesWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountUsersUsernameCustomrolesRes, error) {
	rsp, err := c.PostAPIAccountUsersUsernameCustomrolesWithBody(ctx, username, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountUsersUsernameCustomrolesRes(rsp)
}

func (c *ClientWithResponses) PostAPIAccountUsersUsernameCustomrolesWithResponse(ctx context.Context, username string, body PostAPIAccountUsersUsernameCustomrolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountUsersUsernameCustomrolesRes, error) {
	rsp, err := c.PostAPIAccountUsersUsernameCustomroles(ctx, username, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountUsersUsernameCustomrolesRes(rsp)
}

// GetAPIAccountUsersUsernameForwardingRulesWithResponse request returning *GetAPIAccountUsersUsernameForwardingRulesRes
func (c *ClientWithResponses) GetAPIAccountUsersUsernameForwardingRulesWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetAPIAccountUsersUsernameForwardingRulesRes, error) {
	rsp, err := c.GetAPIAccountUsersUsernameForwardingRules(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountUsersUsernameForwardingRulesRes(rsp)
}

// PostAPIAccountUsersUsernameForwardingRulesWithBodyWithResponse request with arbitrary body returning *PostAPIAccountUsersUsernameForwardingRulesRes
func (c *ClientWithResponses) PostAPIAccountUsersUsernameForwardingRulesWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountUsersUsernameForwardingRulesRes, error) {
	rsp, err := c.PostAPIAccountUsersUsernameForwardingRulesWithBody(ctx, username, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountUsersUsernameForwardingRulesRes(rsp)
}

func (c *ClientWithResponses) PostAPIAccountUsersUsernameForwardingRulesWithResponse(ctx context.Context, username string, body PostAPIAccountUsersUsernameForwardingRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountUsersUsernameForwardingRulesRes, error) {
	rsp, err := c.PostAPIAccountUsersUsernameForwardingRules(ctx, username, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountUsersUsernameForwardingRulesRes(rsp)
}

// DeleteAPIAccountUsersUsernameForwardingRulesForwardingRuleIDWithResponse request returning *DeleteAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRes
func (c *ClientWithResponses) DeleteAPIAccountUsersUsernameForwardingRulesForwardingRuleIDWithResponse(ctx context.Context, username string, forwardingRuleID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRes, error) {
	rsp, err := c.DeleteAPIAccountUsersUsernameForwardingRulesForwardingRuleID(ctx, username, forwardingRuleID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRes(rsp)
}

// GetAPIAccountUsersUsernameForwardingRulesForwardingRuleIDWithResponse request returning *GetAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRes
func (c *ClientWithResponses) GetAPIAccountUsersUsernameForwardingRulesForwardingRuleIDWithResponse(ctx context.Context, username string, forwardingRuleID string, reqEditors ...RequestEditorFn) (*GetAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRes, error) {
	rsp, err := c.GetAPIAccountUsersUsernameForwardingRulesForwardingRuleID(ctx, username, forwardingRuleID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRes(rsp)
}

// GetAPIAccountUsersUsernameNotificationRulesWithResponse request returning *GetAPIAccountUsersUsernameNotificationRulesRes
func (c *ClientWithResponses) GetAPIAccountUsersUsernameNotificationRulesWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetAPIAccountUsersUsernameNotificationRulesRes, error) {
	rsp, err := c.GetAPIAccountUsersUsernameNotificationRules(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountUsersUsernameNotificationRulesRes(rsp)
}

// PostAPIAccountUsersUsernameNotificationRulesWithBodyWithResponse request with arbitrary body returning *PostAPIAccountUsersUsernameNotificationRulesRes
func (c *ClientWithResponses) PostAPIAccountUsersUsernameNotificationRulesWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIAccountUsersUsernameNotificationRulesRes, error) {
	rsp, err := c.PostAPIAccountUsersUsernameNotificationRulesWithBody(ctx, username, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountUsersUsernameNotificationRulesRes(rsp)
}

func (c *ClientWithResponses) PostAPIAccountUsersUsernameNotificationRulesWithResponse(ctx context.Context, username string, body PostAPIAccountUsersUsernameNotificationRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIAccountUsersUsernameNotificationRulesRes, error) {
	rsp, err := c.PostAPIAccountUsersUsernameNotificationRules(ctx, username, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIAccountUsersUsernameNotificationRulesRes(rsp)
}

// DeleteAPIAccountUsersUsernameNotificationRulesNotificationRuleIDWithResponse request returning *DeleteAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRes
func (c *ClientWithResponses) DeleteAPIAccountUsersUsernameNotificationRulesNotificationRuleIDWithResponse(ctx context.Context, username string, notificationRuleID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRes, error) {
	rsp, err := c.DeleteAPIAccountUsersUsernameNotificationRulesNotificationRuleID(ctx, username, notificationRuleID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRes(rsp)
}

// GetAPIAccountUsersUsernameNotificationRulesNotificationRuleIDWithResponse request returning *GetAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRes
func (c *ClientWithResponses) GetAPIAccountUsersUsernameNotificationRulesNotificationRuleIDWithResponse(ctx context.Context, username string, notificationRuleID string, reqEditors ...RequestEditorFn) (*GetAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRes, error) {
	rsp, err := c.GetAPIAccountUsersUsernameNotificationRulesNotificationRuleID(ctx, username, notificationRuleID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRes(rsp)
}

// GetAPIAlertStatusTraceIDWithResponse request returning *GetAPIAlertStatusTraceIDRes
func (c *ClientWithResponses) GetAPIAlertStatusTraceIDWithResponse(ctx context.Context, traceID string, reqEditors ...RequestEditorFn) (*GetAPIAlertStatusTraceIDRes, error) {
	rsp, err := c.GetAPIAlertStatusTraceID(ctx, traceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAlertStatusTraceIDRes(rsp)
}

// PostAPIEventsIntegrationKeyWithBodyWithResponse request with arbitrary body returning *PostAPIEventsIntegrationKeyRes
func (c *ClientWithResponses) PostAPIEventsIntegrationKeyWithBodyWithResponse(ctx context.Context, integrationKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIEventsIntegrationKeyRes, error) {
	rsp, err := c.PostAPIEventsIntegrationKeyWithBody(ctx, integrationKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIEventsIntegrationKeyRes(rsp)
}

func (c *ClientWithResponses) PostAPIEventsIntegrationKeyWithResponse(ctx context.Context, integrationKey string, body PostAPIEventsIntegrationKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIEventsIntegrationKeyRes, error) {
	rsp, err := c.PostAPIEventsIntegrationKey(ctx, integrationKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIEventsIntegrationKeyRes(rsp)
}

// PostAPIIncidentsWithBodyWithResponse request with arbitrary body returning *PostAPIIncidentsRes
func (c *ClientWithResponses) PostAPIIncidentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIIncidentsRes, error) {
	rsp, err := c.PostAPIIncidentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIIncidentsRes(rsp)
}

func (c *ClientWithResponses) PostAPIIncidentsWithResponse(ctx context.Context, body PostAPIIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIIncidentsRes, error) {
	rsp, err := c.PostAPIIncidents(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIIncidentsRes(rsp)
}

// PostAPIIncidentsFilterWithBodyWithResponse request with arbitrary body returning *PostAPIIncidentsFilterRes
func (c *ClientWithResponses) PostAPIIncidentsFilterWithBodyWithResponse(ctx context.Context, params *PostAPIIncidentsFilterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIIncidentsFilterRes, error) {
	rsp, err := c.PostAPIIncidentsFilterWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIIncidentsFilterRes(rsp)
}

func (c *ClientWithResponses) PostAPIIncidentsFilterWithResponse(ctx context.Context, params *PostAPIIncidentsFilterParams, body PostAPIIncidentsFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIIncidentsFilterRes, error) {
	rsp, err := c.PostAPIIncidentsFilter(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIIncidentsFilterRes(rsp)
}

// GetAPIIncidentsIncidentNumberWithResponse request returning *GetAPIIncidentsIncidentNumberRes
func (c *ClientWithResponses) GetAPIIncidentsIncidentNumberWithResponse(ctx context.Context, incidentNumber string, reqEditors ...RequestEditorFn) (*GetAPIIncidentsIncidentNumberRes, error) {
	rsp, err := c.GetAPIIncidentsIncidentNumber(ctx, incidentNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIIncidentsIncidentNumberRes(rsp)
}

// PutAPIIncidentsIncidentNumberWithBodyWithResponse request with arbitrary body returning *PutAPIIncidentsIncidentNumberRes
func (c *ClientWithResponses) PutAPIIncidentsIncidentNumberWithBodyWithResponse(ctx context.Context, incidentNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIIncidentsIncidentNumberRes, error) {
	rsp, err := c.PutAPIIncidentsIncidentNumberWithBody(ctx, incidentNumber, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIIncidentsIncidentNumberRes(rsp)
}

func (c *ClientWithResponses) PutAPIIncidentsIncidentNumberWithResponse(ctx context.Context, incidentNumber string, body PutAPIIncidentsIncidentNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIIncidentsIncidentNumberRes, error) {
	rsp, err := c.PutAPIIncidentsIncidentNumber(ctx, incidentNumber, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIIncidentsIncidentNumberRes(rsp)
}

// GetAPIIncidentsIncidentNumberAlertsWithResponse request returning *GetAPIIncidentsIncidentNumberAlertsRes
func (c *ClientWithResponses) GetAPIIncidentsIncidentNumberAlertsWithResponse(ctx context.Context, incidentNumber string, reqEditors ...RequestEditorFn) (*GetAPIIncidentsIncidentNumberAlertsRes, error) {
	rsp, err := c.GetAPIIncidentsIncidentNumberAlerts(ctx, incidentNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIIncidentsIncidentNumberAlertsRes(rsp)
}

// GetAPIIncidentsIncidentNumberNoteWithResponse request returning *GetAPIIncidentsIncidentNumberNoteRes
func (c *ClientWithResponses) GetAPIIncidentsIncidentNumberNoteWithResponse(ctx context.Context, incidentNumber string, reqEditors ...RequestEditorFn) (*GetAPIIncidentsIncidentNumberNoteRes, error) {
	rsp, err := c.GetAPIIncidentsIncidentNumberNote(ctx, incidentNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIIncidentsIncidentNumberNoteRes(rsp)
}

// PostAPIIncidentsIncidentNumberNoteWithBodyWithResponse request with arbitrary body returning *PostAPIIncidentsIncidentNumberNoteRes
func (c *ClientWithResponses) PostAPIIncidentsIncidentNumberNoteWithBodyWithResponse(ctx context.Context, incidentNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIIncidentsIncidentNumberNoteRes, error) {
	rsp, err := c.PostAPIIncidentsIncidentNumberNoteWithBody(ctx, incidentNumber, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIIncidentsIncidentNumberNoteRes(rsp)
}

func (c *ClientWithResponses) PostAPIIncidentsIncidentNumberNoteWithResponse(ctx context.Context, incidentNumber string, body PostAPIIncidentsIncidentNumberNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIIncidentsIncidentNumberNoteRes, error) {
	rsp, err := c.PostAPIIncidentsIncidentNumberNote(ctx, incidentNumber, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIIncidentsIncidentNumberNoteRes(rsp)
}

// DeleteAPIIncidentsIncidentNumberNoteNoteUniqueIDWithResponse request returning *DeleteAPIIncidentsIncidentNumberNoteNoteUniqueIDRes
func (c *ClientWithResponses) DeleteAPIIncidentsIncidentNumberNoteNoteUniqueIDWithResponse(ctx context.Context, incidentNumber string, noteUniqueID string, reqEditors ...RequestEditorFn) (*DeleteAPIIncidentsIncidentNumberNoteNoteUniqueIDRes, error) {
	rsp, err := c.DeleteAPIIncidentsIncidentNumberNoteNoteUniqueID(ctx, incidentNumber, noteUniqueID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIIncidentsIncidentNumberNoteNoteUniqueIDRes(rsp)
}

// GetAPIIncidentsIncidentNumberNoteNoteUniqueIDWithResponse request returning *GetAPIIncidentsIncidentNumberNoteNoteUniqueIDRes
func (c *ClientWithResponses) GetAPIIncidentsIncidentNumberNoteNoteUniqueIDWithResponse(ctx context.Context, incidentNumber string, noteUniqueID string, reqEditors ...RequestEditorFn) (*GetAPIIncidentsIncidentNumberNoteNoteUniqueIDRes, error) {
	rsp, err := c.GetAPIIncidentsIncidentNumberNoteNoteUniqueID(ctx, incidentNumber, noteUniqueID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIIncidentsIncidentNumberNoteNoteUniqueIDRes(rsp)
}

// PutAPIIncidentsIncidentNumberNoteNoteUniqueIDWithBodyWithResponse request with arbitrary body returning *PutAPIIncidentsIncidentNumberNoteNoteUniqueIDRes
func (c *ClientWithResponses) PutAPIIncidentsIncidentNumberNoteNoteUniqueIDWithBodyWithResponse(ctx context.Context, incidentNumber string, noteUniqueID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIIncidentsIncidentNumberNoteNoteUniqueIDRes, error) {
	rsp, err := c.PutAPIIncidentsIncidentNumberNoteNoteUniqueIDWithBody(ctx, incidentNumber, noteUniqueID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIIncidentsIncidentNumberNoteNoteUniqueIDRes(rsp)
}

func (c *ClientWithResponses) PutAPIIncidentsIncidentNumberNoteNoteUniqueIDWithResponse(ctx context.Context, incidentNumber string, noteUniqueID string, body PutAPIIncidentsIncidentNumberNoteNoteUniqueIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIIncidentsIncidentNumberNoteNoteUniqueIDRes, error) {
	rsp, err := c.PutAPIIncidentsIncidentNumberNoteNoteUniqueID(ctx, incidentNumber, noteUniqueID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIIncidentsIncidentNumberNoteNoteUniqueIDRes(rsp)
}

// GetAPIIncidentsIncidentNumberRespondersWithResponse request returning *GetAPIIncidentsIncidentNumberRespondersRes
func (c *ClientWithResponses) GetAPIIncidentsIncidentNumberRespondersWithResponse(ctx context.Context, incidentNumber string, reqEditors ...RequestEditorFn) (*GetAPIIncidentsIncidentNumberRespondersRes, error) {
	rsp, err := c.GetAPIIncidentsIncidentNumberResponders(ctx, incidentNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIIncidentsIncidentNumberRespondersRes(rsp)
}

// PostAPIIncidentsIncidentNumberRespondersWithBodyWithResponse request with arbitrary body returning *PostAPIIncidentsIncidentNumberRespondersRes
func (c *ClientWithResponses) PostAPIIncidentsIncidentNumberRespondersWithBodyWithResponse(ctx context.Context, incidentNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIIncidentsIncidentNumberRespondersRes, error) {
	rsp, err := c.PostAPIIncidentsIncidentNumberRespondersWithBody(ctx, incidentNumber, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIIncidentsIncidentNumberRespondersRes(rsp)
}

func (c *ClientWithResponses) PostAPIIncidentsIncidentNumberRespondersWithResponse(ctx context.Context, incidentNumber string, body PostAPIIncidentsIncidentNumberRespondersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIIncidentsIncidentNumberRespondersRes, error) {
	rsp, err := c.PostAPIIncidentsIncidentNumberResponders(ctx, incidentNumber, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIIncidentsIncidentNumberRespondersRes(rsp)
}

// DeleteAPIIncidentsIncidentNumberRespondersUniqueIDWithResponse request returning *DeleteAPIIncidentsIncidentNumberRespondersUniqueIDRes
func (c *ClientWithResponses) DeleteAPIIncidentsIncidentNumberRespondersUniqueIDWithResponse(ctx context.Context, incidentNumber string, uniqueID string, reqEditors ...RequestEditorFn) (*DeleteAPIIncidentsIncidentNumberRespondersUniqueIDRes, error) {
	rsp, err := c.DeleteAPIIncidentsIncidentNumberRespondersUniqueID(ctx, incidentNumber, uniqueID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIIncidentsIncidentNumberRespondersUniqueIDRes(rsp)
}

// GetAPIIncidentsIncidentNumberRespondersUniqueIDWithResponse request returning *GetAPIIncidentsIncidentNumberRespondersUniqueIDRes
func (c *ClientWithResponses) GetAPIIncidentsIncidentNumberRespondersUniqueIDWithResponse(ctx context.Context, incidentNumber string, uniqueID string, reqEditors ...RequestEditorFn) (*GetAPIIncidentsIncidentNumberRespondersUniqueIDRes, error) {
	rsp, err := c.GetAPIIncidentsIncidentNumberRespondersUniqueID(ctx, incidentNumber, uniqueID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIIncidentsIncidentNumberRespondersUniqueIDRes(rsp)
}

// GetAPIIncidentsIncidentNumberTagsWithResponse request returning *GetAPIIncidentsIncidentNumberTagsRes
func (c *ClientWithResponses) GetAPIIncidentsIncidentNumberTagsWithResponse(ctx context.Context, incidentNumber string, reqEditors ...RequestEditorFn) (*GetAPIIncidentsIncidentNumberTagsRes, error) {
	rsp, err := c.GetAPIIncidentsIncidentNumberTags(ctx, incidentNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIIncidentsIncidentNumberTagsRes(rsp)
}

// PostAPIIncidentsIncidentNumberTagsWithBodyWithResponse request with arbitrary body returning *PostAPIIncidentsIncidentNumberTagsRes
func (c *ClientWithResponses) PostAPIIncidentsIncidentNumberTagsWithBodyWithResponse(ctx context.Context, incidentNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIIncidentsIncidentNumberTagsRes, error) {
	rsp, err := c.PostAPIIncidentsIncidentNumberTagsWithBody(ctx, incidentNumber, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIIncidentsIncidentNumberTagsRes(rsp)
}

func (c *ClientWithResponses) PostAPIIncidentsIncidentNumberTagsWithResponse(ctx context.Context, incidentNumber string, body PostAPIIncidentsIncidentNumberTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIIncidentsIncidentNumberTagsRes, error) {
	rsp, err := c.PostAPIIncidentsIncidentNumberTags(ctx, incidentNumber, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIIncidentsIncidentNumberTagsRes(rsp)
}

// DeleteAPIIncidentsIncidentNumberTagsTagUniqueIDWithResponse request returning *DeleteAPIIncidentsIncidentNumberTagsTagUniqueIDRes
func (c *ClientWithResponses) DeleteAPIIncidentsIncidentNumberTagsTagUniqueIDWithResponse(ctx context.Context, incidentNumber string, tagUniqueID string, reqEditors ...RequestEditorFn) (*DeleteAPIIncidentsIncidentNumberTagsTagUniqueIDRes, error) {
	rsp, err := c.DeleteAPIIncidentsIncidentNumberTagsTagUniqueID(ctx, incidentNumber, tagUniqueID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIIncidentsIncidentNumberTagsTagUniqueIDRes(rsp)
}

// GetAPIIncidentsIncidentNumberTagsTagUniqueIDWithResponse request returning *GetAPIIncidentsIncidentNumberTagsTagUniqueIDRes
func (c *ClientWithResponses) GetAPIIncidentsIncidentNumberTagsTagUniqueIDWithResponse(ctx context.Context, incidentNumber string, tagUniqueID string, reqEditors ...RequestEditorFn) (*GetAPIIncidentsIncidentNumberTagsTagUniqueIDRes, error) {
	rsp, err := c.GetAPIIncidentsIncidentNumberTagsTagUniqueID(ctx, incidentNumber, tagUniqueID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIIncidentsIncidentNumberTagsTagUniqueIDRes(rsp)
}

// PatchAPIIncidentsUniqueIDWithBodyWithResponse request with arbitrary body returning *PatchAPIIncidentsUniqueIDRes
func (c *ClientWithResponses) PatchAPIIncidentsUniqueIDWithBodyWithResponse(ctx context.Context, uniqueID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAPIIncidentsUniqueIDRes, error) {
	rsp, err := c.PatchAPIIncidentsUniqueIDWithBody(ctx, uniqueID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAPIIncidentsUniqueIDRes(rsp)
}

func (c *ClientWithResponses) PatchAPIIncidentsUniqueIDWithResponse(ctx context.Context, uniqueID string, body PatchAPIIncidentsUniqueIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAPIIncidentsUniqueIDRes, error) {
	rsp, err := c.PatchAPIIncidentsUniqueID(ctx, uniqueID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAPIIncidentsUniqueIDRes(rsp)
}

// GetAPIV2AccountEventsRouterWithResponse request returning *GetAPIV2AccountEventsRouterRes
func (c *ClientWithResponses) GetAPIV2AccountEventsRouterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV2AccountEventsRouterRes, error) {
	rsp, err := c.GetAPIV2AccountEventsRouter(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV2AccountEventsRouterRes(rsp)
}

// PostAPIV2AccountEventsRouterWithBodyWithResponse request with arbitrary body returning *PostAPIV2AccountEventsRouterRes
func (c *ClientWithResponses) PostAPIV2AccountEventsRouterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV2AccountEventsRouterRes, error) {
	rsp, err := c.PostAPIV2AccountEventsRouterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV2AccountEventsRouterRes(rsp)
}

func (c *ClientWithResponses) PostAPIV2AccountEventsRouterWithResponse(ctx context.Context, body PostAPIV2AccountEventsRouterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV2AccountEventsRouterRes, error) {
	rsp, err := c.PostAPIV2AccountEventsRouter(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV2AccountEventsRouterRes(rsp)
}

// DeleteAPIV2AccountEventsRouterRouterIDWithResponse request returning *DeleteAPIV2AccountEventsRouterRouterIDRes
func (c *ClientWithResponses) DeleteAPIV2AccountEventsRouterRouterIDWithResponse(ctx context.Context, routerID string, reqEditors ...RequestEditorFn) (*DeleteAPIV2AccountEventsRouterRouterIDRes, error) {
	rsp, err := c.DeleteAPIV2AccountEventsRouterRouterID(ctx, routerID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIV2AccountEventsRouterRouterIDRes(rsp)
}

// GetAPIV2AccountEventsRouterRouterIDWithResponse request returning *GetAPIV2AccountEventsRouterRouterIDRes
func (c *ClientWithResponses) GetAPIV2AccountEventsRouterRouterIDWithResponse(ctx context.Context, routerID string, reqEditors ...RequestEditorFn) (*GetAPIV2AccountEventsRouterRouterIDRes, error) {
	rsp, err := c.GetAPIV2AccountEventsRouterRouterID(ctx, routerID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV2AccountEventsRouterRouterIDRes(rsp)
}

// PutAPIV2AccountEventsRouterRouterIDWithBodyWithResponse request with arbitrary body returning *PutAPIV2AccountEventsRouterRouterIDRes
func (c *ClientWithResponses) PutAPIV2AccountEventsRouterRouterIDWithBodyWithResponse(ctx context.Context, routerID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV2AccountEventsRouterRouterIDRes, error) {
	rsp, err := c.PutAPIV2AccountEventsRouterRouterIDWithBody(ctx, routerID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV2AccountEventsRouterRouterIDRes(rsp)
}

func (c *ClientWithResponses) PutAPIV2AccountEventsRouterRouterIDWithResponse(ctx context.Context, routerID string, body PutAPIV2AccountEventsRouterRouterIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV2AccountEventsRouterRouterIDRes, error) {
	rsp, err := c.PutAPIV2AccountEventsRouterRouterID(ctx, routerID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV2AccountEventsRouterRouterIDRes(rsp)
}

// GetAPIV2AccountEventsRouterRouterIDRulesetsWithResponse request returning *GetAPIV2AccountEventsRouterRouterIDRulesetsRes
func (c *ClientWithResponses) GetAPIV2AccountEventsRouterRouterIDRulesetsWithResponse(ctx context.Context, routerID string, reqEditors ...RequestEditorFn) (*GetAPIV2AccountEventsRouterRouterIDRulesetsRes, error) {
	rsp, err := c.GetAPIV2AccountEventsRouterRouterIDRulesets(ctx, routerID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV2AccountEventsRouterRouterIDRulesetsRes(rsp)
}

// PostAPIV2AccountEventsRouterRouterIDRulesetsWithBodyWithResponse request with arbitrary body returning *PostAPIV2AccountEventsRouterRouterIDRulesetsRes
func (c *ClientWithResponses) PostAPIV2AccountEventsRouterRouterIDRulesetsWithBodyWithResponse(ctx context.Context, routerID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV2AccountEventsRouterRouterIDRulesetsRes, error) {
	rsp, err := c.PostAPIV2AccountEventsRouterRouterIDRulesetsWithBody(ctx, routerID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV2AccountEventsRouterRouterIDRulesetsRes(rsp)
}

func (c *ClientWithResponses) PostAPIV2AccountEventsRouterRouterIDRulesetsWithResponse(ctx context.Context, routerID string, body PostAPIV2AccountEventsRouterRouterIDRulesetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV2AccountEventsRouterRouterIDRulesetsRes, error) {
	rsp, err := c.PostAPIV2AccountEventsRouterRouterIDRulesets(ctx, routerID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV2AccountEventsRouterRouterIDRulesetsRes(rsp)
}

// PutAPIV2AccountEventsRouterRouterIDRulesetsWithBodyWithResponse request with arbitrary body returning *PutAPIV2AccountEventsRouterRouterIDRulesetsRes
func (c *ClientWithResponses) PutAPIV2AccountEventsRouterRouterIDRulesetsWithBodyWithResponse(ctx context.Context, routerID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV2AccountEventsRouterRouterIDRulesetsRes, error) {
	rsp, err := c.PutAPIV2AccountEventsRouterRouterIDRulesetsWithBody(ctx, routerID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV2AccountEventsRouterRouterIDRulesetsRes(rsp)
}

func (c *ClientWithResponses) PutAPIV2AccountEventsRouterRouterIDRulesetsWithResponse(ctx context.Context, routerID string, body PutAPIV2AccountEventsRouterRouterIDRulesetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV2AccountEventsRouterRouterIDRulesetsRes, error) {
	rsp, err := c.PutAPIV2AccountEventsRouterRouterIDRulesets(ctx, routerID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV2AccountEventsRouterRouterIDRulesetsRes(rsp)
}

// DeleteAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDWithResponse request returning *DeleteAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes
func (c *ClientWithResponses) DeleteAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDWithResponse(ctx context.Context, routerID string, rulesetID string, reqEditors ...RequestEditorFn) (*DeleteAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes, error) {
	rsp, err := c.DeleteAPIV2AccountEventsRouterRouterIDRulesetsRulesetID(ctx, routerID, rulesetID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes(rsp)
}

// GetAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDWithResponse request returning *GetAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes
func (c *ClientWithResponses) GetAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDWithResponse(ctx context.Context, routerID string, rulesetID string, reqEditors ...RequestEditorFn) (*GetAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes, error) {
	rsp, err := c.GetAPIV2AccountEventsRouterRouterIDRulesetsRulesetID(ctx, routerID, rulesetID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes(rsp)
}

// PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDWithBodyWithResponse request with arbitrary body returning *PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes
func (c *ClientWithResponses) PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDWithBodyWithResponse(ctx context.Context, routerID string, rulesetID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes, error) {
	rsp, err := c.PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDWithBody(ctx, routerID, rulesetID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes(rsp)
}

func (c *ClientWithResponses) PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDWithResponse(ctx context.Context, routerID string, rulesetID string, body PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes, error) {
	rsp, err := c.PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetID(ctx, routerID, rulesetID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes(rsp)
}

// GetAPIV2AccountTeamsTeamIDEscalationPoliciesEpIDOncallWithResponse request returning *GetAPIV2AccountTeamsTeamIDEscalationPoliciesEpIDOncallRes
func (c *ClientWithResponses) GetAPIV2AccountTeamsTeamIDEscalationPoliciesEpIDOncallWithResponse(ctx context.Context, teamID string, epid string, reqEditors ...RequestEditorFn) (*GetAPIV2AccountTeamsTeamIDEscalationPoliciesEpIDOncallRes, error) {
	rsp, err := c.GetAPIV2AccountTeamsTeamIDEscalationPoliciesEpIDOncall(ctx, teamID, epid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV2AccountTeamsTeamIDEscalationPoliciesEpIDOncallRes(rsp)
}

// GetAPIV2AccountTeamsTeamIDOncallWithResponse request returning *GetAPIV2AccountTeamsTeamIDOncallRes
func (c *ClientWithResponses) GetAPIV2AccountTeamsTeamIDOncallWithResponse(ctx context.Context, teamID string, reqEditors ...RequestEditorFn) (*GetAPIV2AccountTeamsTeamIDOncallRes, error) {
	rsp, err := c.GetAPIV2AccountTeamsTeamIDOncall(ctx, teamID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV2AccountTeamsTeamIDOncallRes(rsp)
}

// GetAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesWithResponse request returning *GetAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes
func (c *ClientWithResponses) GetAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesWithResponse(ctx context.Context, teamID string, scheduleID string, reqEditors ...RequestEditorFn) (*GetAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes, error) {
	rsp, err := c.GetAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverrides(ctx, teamID, scheduleID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes(rsp)
}

// PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesWithBodyWithResponse request with arbitrary body returning *PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes
func (c *ClientWithResponses) PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesWithBodyWithResponse(ctx context.Context, teamID string, scheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes, error) {
	rsp, err := c.PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesWithBody(ctx, teamID, scheduleID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes(rsp)
}

func (c *ClientWithResponses) PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesWithResponse(ctx context.Context, teamID string, scheduleID string, body PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes, error) {
	rsp, err := c.PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverrides(ctx, teamID, scheduleID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes(rsp)
}

// GetAPIV2AccountTeamsTeamIDServicesServiceIDOncallWithResponse request returning *GetAPIV2AccountTeamsTeamIDServicesServiceIDOncallRes
func (c *ClientWithResponses) GetAPIV2AccountTeamsTeamIDServicesServiceIDOncallWithResponse(ctx context.Context, teamID string, serviceID string, reqEditors ...RequestEditorFn) (*GetAPIV2AccountTeamsTeamIDServicesServiceIDOncallRes, error) {
	rsp, err := c.GetAPIV2AccountTeamsTeamIDServicesServiceIDOncall(ctx, teamID, serviceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV2AccountTeamsTeamIDServicesServiceIDOncallRes(rsp)
}

// PostIntegrationAccountIDGenericIntegrationKeyWithBodyWithResponse request with arbitrary body returning *PostIntegrationAccountIDGenericIntegrationKeyRes
func (c *ClientWithResponses) PostIntegrationAccountIDGenericIntegrationKeyWithBodyWithResponse(ctx context.Context, accountID string, integrationKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationAccountIDGenericIntegrationKeyRes, error) {
	rsp, err := c.PostIntegrationAccountIDGenericIntegrationKeyWithBody(ctx, accountID, integrationKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationAccountIDGenericIntegrationKeyRes(rsp)
}

func (c *ClientWithResponses) PostIntegrationAccountIDGenericIntegrationKeyWithResponse(ctx context.Context, accountID string, integrationKey string, body PostIntegrationAccountIDGenericIntegrationKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationAccountIDGenericIntegrationKeyRes, error) {
	rsp, err := c.PostIntegrationAccountIDGenericIntegrationKey(ctx, accountID, integrationKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationAccountIDGenericIntegrationKeyRes(rsp)
}

// DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDWithResponse request returning *DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes
func (c *ClientWithResponses) DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDWithResponse(ctx context.Context, teamID string, serviceID string, integrationID string, transformersID string, reqEditors ...RequestEditorFn) (*DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes, error) {
	rsp, err := c.DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersID(ctx, teamID, serviceID, integrationID, transformersID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes(rsp)
}

// GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDWithResponse request returning *GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes
func (c *ClientWithResponses) GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDWithResponse(ctx context.Context, teamID string, serviceID string, integrationID string, transformersID string, reqEditors ...RequestEditorFn) (*GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes, error) {
	rsp, err := c.GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersID(ctx, teamID, serviceID, integrationID, transformersID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes(rsp)
}

// PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDWithBodyWithResponse request with arbitrary body returning *PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes
func (c *ClientWithResponses) PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDWithBodyWithResponse(ctx context.Context, teamID string, serviceID string, integrationID string, transformersID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes, error) {
	rsp, err := c.PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDWithBody(ctx, teamID, serviceID, integrationID, transformersID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes(rsp)
}

func (c *ClientWithResponses) PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDWithResponse(ctx context.Context, teamID string, serviceID string, integrationID string, transformersID string, body PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes, error) {
	rsp, err := c.PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersID(ctx, teamID, serviceID, integrationID, transformersID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes(rsp)
}

// ParsePostAPIAccountAPIInviteRes parses an HTTP response from a PostAPIAccountAPIInviteWithResponse call
func ParsePostAPIAccountAPIInviteRes(rsp *http.Response) (*PostAPIAccountAPIInviteRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIAccountAPIInviteRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TeamMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest TeamMember
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseGetAPIAccountCustomrolesRes parses an HTTP response from a GetAPIAccountCustomrolesWithResponse call
func ParseGetAPIAccountCustomrolesRes(rsp *http.Response) (*GetAPIAccountCustomrolesRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountCustomrolesRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountCustomRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest AccountCustomRole
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIAccountCustomrolesRes parses an HTTP response from a PostAPIAccountCustomrolesWithResponse call
func ParsePostAPIAccountCustomrolesRes(rsp *http.Response) (*PostAPIAccountCustomrolesRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIAccountCustomrolesRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AccountCustomRolePostAndPutResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest AccountCustomRolePostAndPutResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseDeleteAPIAccountCustomrolesCustomRoleIDRes parses an HTTP response from a DeleteAPIAccountCustomrolesCustomRoleIDWithResponse call
func ParseDeleteAPIAccountCustomrolesCustomRoleIDRes(rsp *http.Response) (*DeleteAPIAccountCustomrolesCustomRoleIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIAccountCustomrolesCustomRoleIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIAccountCustomrolesCustomRoleIDRes parses an HTTP response from a GetAPIAccountCustomrolesCustomRoleIDWithResponse call
func ParseGetAPIAccountCustomrolesCustomRoleIDRes(rsp *http.Response) (*GetAPIAccountCustomrolesCustomRoleIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountCustomrolesCustomRoleIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountCustomRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest AccountCustomRole
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePutAPIAccountCustomrolesCustomRoleIDRes parses an HTTP response from a PutAPIAccountCustomrolesCustomRoleIDWithResponse call
func ParsePutAPIAccountCustomrolesCustomRoleIDRes(rsp *http.Response) (*PutAPIAccountCustomrolesCustomRoleIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIAccountCustomrolesCustomRoleIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountCustomRolePostAndPutResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest AccountCustomRolePostAndPutResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIAccountDeleteuserRes parses an HTTP response from a PostAPIAccountDeleteuserWithResponse call
func ParsePostAPIAccountDeleteuserRes(rsp *http.Response) (*PostAPIAccountDeleteuserRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIAccountDeleteuserRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIAccountMembersRes parses an HTTP response from a GetAPIAccountMembersWithResponse call
func ParseGetAPIAccountMembersRes(rsp *http.Response) (*GetAPIAccountMembersRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountMembersRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest AccountMember
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIAccountMembersUsernameRes parses an HTTP response from a GetAPIAccountMembersUsernameWithResponse call
func ParseGetAPIAccountMembersUsernameRes(rsp *http.Response) (*GetAPIAccountMembersUsernameRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountMembersUsernameRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest AccountMember
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePutAPIAccountMembersUsernameRes parses an HTTP response from a PutAPIAccountMembersUsernameWithResponse call
func ParsePutAPIAccountMembersUsernameRes(rsp *http.Response) (*PutAPIAccountMembersUsernameRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIAccountMembersUsernameRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest AccountMember
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIAccountRegenerateIntegrationKeyRes parses an HTTP response from a PostAPIAccountRegenerateIntegrationKeyWithResponse call
func ParsePostAPIAccountRegenerateIntegrationKeyRes(rsp *http.Response) (*PostAPIAccountRegenerateIntegrationKeyRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIAccountRegenerateIntegrationKeyRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest Integration
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIAccountTeamsRes parses an HTTP response from a GetAPIAccountTeamsWithResponse call
func ParseGetAPIAccountTeamsRes(rsp *http.Response) (*GetAPIAccountTeamsRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest Team
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIAccountTeamsRes parses an HTTP response from a PostAPIAccountTeamsWithResponse call
func ParsePostAPIAccountTeamsRes(rsp *http.Response) (*PostAPIAccountTeamsRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIAccountTeamsRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest Team
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseDeleteAPIAccountTeamsTeamIDRes parses an HTTP response from a DeleteAPIAccountTeamsTeamIDWithResponse call
func ParseDeleteAPIAccountTeamsTeamIDRes(rsp *http.Response) (*DeleteAPIAccountTeamsTeamIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIAccountTeamsTeamIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDRes parses an HTTP response from a GetAPIAccountTeamsTeamIDWithResponse call
func ParseGetAPIAccountTeamsTeamIDRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest Team
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePutAPIAccountTeamsTeamIDRes parses an HTTP response from a PutAPIAccountTeamsTeamIDWithResponse call
func ParsePutAPIAccountTeamsTeamIDRes(rsp *http.Response) (*PutAPIAccountTeamsTeamIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIAccountTeamsTeamIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest Team
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDEscalationPoliciesRes parses an HTTP response from a GetAPIAccountTeamsTeamIDEscalationPoliciesWithResponse call
func ParseGetAPIAccountTeamsTeamIDEscalationPoliciesRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDEscalationPoliciesRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDEscalationPoliciesRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest EP
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIAccountTeamsTeamIDEscalationPoliciesRes parses an HTTP response from a PostAPIAccountTeamsTeamIDEscalationPoliciesWithResponse call
func ParsePostAPIAccountTeamsTeamIDEscalationPoliciesRes(rsp *http.Response) (*PostAPIAccountTeamsTeamIDEscalationPoliciesRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIAccountTeamsTeamIDEscalationPoliciesRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest EP
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseDeleteAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes parses an HTTP response from a DeleteAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDWithResponse call
func ParseDeleteAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes(rsp *http.Response) (*DeleteAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes parses an HTTP response from a GetAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDWithResponse call
func ParseGetAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest EP
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes parses an HTTP response from a PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDWithResponse call
func ParsePutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes(rsp *http.Response) (*PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIAccountTeamsTeamIDEscalationPoliciesEscalationPolicyIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest EP
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDMaintenanceRes parses an HTTP response from a GetAPIAccountTeamsTeamIDMaintenanceWithResponse call
func ParseGetAPIAccountTeamsTeamIDMaintenanceRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDMaintenanceRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDMaintenanceRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TMM
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest TMM
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIAccountTeamsTeamIDMaintenanceRes parses an HTTP response from a PostAPIAccountTeamsTeamIDMaintenanceWithResponse call
func ParsePostAPIAccountTeamsTeamIDMaintenanceRes(rsp *http.Response) (*PostAPIAccountTeamsTeamIDMaintenanceRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIAccountTeamsTeamIDMaintenanceRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TMM
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest TMM
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseDeleteAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes parses an HTTP response from a DeleteAPIAccountTeamsTeamIDMaintenanceMaintenanceIDWithResponse call
func ParseDeleteAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes(rsp *http.Response) (*DeleteAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes parses an HTTP response from a GetAPIAccountTeamsTeamIDMaintenanceMaintenanceIDWithResponse call
func ParseGetAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TMM
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest TMM
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes parses an HTTP response from a PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDWithResponse call
func ParsePutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes(rsp *http.Response) (*PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIAccountTeamsTeamIDMaintenanceMaintenanceIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TMM
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest TMM
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDMembersRes parses an HTTP response from a GetAPIAccountTeamsTeamIDMembersWithResponse call
func ParseGetAPIAccountTeamsTeamIDMembersRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDMembersRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDMembersRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest TeamMember
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIAccountTeamsTeamIDMembersRes parses an HTTP response from a PostAPIAccountTeamsTeamIDMembersWithResponse call
func ParsePostAPIAccountTeamsTeamIDMembersRes(rsp *http.Response) (*PostAPIAccountTeamsTeamIDMembersRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIAccountTeamsTeamIDMembersRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TeamMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest TeamMember
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseDeleteAPIAccountTeamsTeamIDMembersMemberIDRes parses an HTTP response from a DeleteAPIAccountTeamsTeamIDMembersMemberIDWithResponse call
func ParseDeleteAPIAccountTeamsTeamIDMembersMemberIDRes(rsp *http.Response) (*DeleteAPIAccountTeamsTeamIDMembersMemberIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIAccountTeamsTeamIDMembersMemberIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDMembersMemberIDRes parses an HTTP response from a GetAPIAccountTeamsTeamIDMembersMemberIDWithResponse call
func ParseGetAPIAccountTeamsTeamIDMembersMemberIDRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDMembersMemberIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDMembersMemberIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest TeamMember
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePutAPIAccountTeamsTeamIDMembersMemberIDRes parses an HTTP response from a PutAPIAccountTeamsTeamIDMembersMemberIDWithResponse call
func ParsePutAPIAccountTeamsTeamIDMembersMemberIDRes(rsp *http.Response) (*PutAPIAccountTeamsTeamIDMembersMemberIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIAccountTeamsTeamIDMembersMemberIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest TeamMember
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDOncallRes parses an HTTP response from a GetAPIAccountTeamsTeamIDOncallWithResponse call
func ParseGetAPIAccountTeamsTeamIDOncallRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDOncallRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDOncallRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EscalationPolicyOnCallV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest EscalationPolicyOnCallV1
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDPermissionsRes parses an HTTP response from a GetAPIAccountTeamsTeamIDPermissionsWithResponse call
func ParseGetAPIAccountTeamsTeamIDPermissionsRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDPermissionsRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDPermissionsRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamPermission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest TeamPermission
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePutAPIAccountTeamsTeamIDPermissionsRes parses an HTTP response from a PutAPIAccountTeamsTeamIDPermissionsWithResponse call
func ParsePutAPIAccountTeamsTeamIDPermissionsRes(rsp *http.Response) (*PutAPIAccountTeamsTeamIDPermissionsRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIAccountTeamsTeamIDPermissionsRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamPermission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest TeamPermission
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDPostmortemRes parses an HTTP response from a GetAPIAccountTeamsTeamIDPostmortemWithResponse call
func ParseGetAPIAccountTeamsTeamIDPostmortemRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDPostmortemRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDPostmortemRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostmortemGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest PostmortemGet
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIAccountTeamsTeamIDPostmortemRes parses an HTTP response from a PostAPIAccountTeamsTeamIDPostmortemWithResponse call
func ParsePostAPIAccountTeamsTeamIDPostmortemRes(rsp *http.Response) (*PostAPIAccountTeamsTeamIDPostmortemRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIAccountTeamsTeamIDPostmortemRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostmortemPostPut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest PostmortemPostPut
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseDeleteAPIAccountTeamsTeamIDPostmortemPostmortemIDRes parses an HTTP response from a DeleteAPIAccountTeamsTeamIDPostmortemPostmortemIDWithResponse call
func ParseDeleteAPIAccountTeamsTeamIDPostmortemPostmortemIDRes(rsp *http.Response) (*DeleteAPIAccountTeamsTeamIDPostmortemPostmortemIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIAccountTeamsTeamIDPostmortemPostmortemIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDPostmortemPostmortemIDRes parses an HTTP response from a GetAPIAccountTeamsTeamIDPostmortemPostmortemIDWithResponse call
func ParseGetAPIAccountTeamsTeamIDPostmortemPostmortemIDRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDPostmortemPostmortemIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDPostmortemPostmortemIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostmortemGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest PostmortemGet
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePutAPIAccountTeamsTeamIDPostmortemPostmortemIDRes parses an HTTP response from a PutAPIAccountTeamsTeamIDPostmortemPostmortemIDWithResponse call
func ParsePutAPIAccountTeamsTeamIDPostmortemPostmortemIDRes(rsp *http.Response) (*PutAPIAccountTeamsTeamIDPostmortemPostmortemIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIAccountTeamsTeamIDPostmortemPostmortemIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostmortemPostPut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest PostmortemPostPut
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDPriorityRes parses an HTTP response from a GetAPIAccountTeamsTeamIDPriorityWithResponse call
func ParseGetAPIAccountTeamsTeamIDPriorityRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDPriorityRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDPriorityRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PriorityGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest PriorityGet
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIAccountTeamsTeamIDPriorityRes parses an HTTP response from a PostAPIAccountTeamsTeamIDPriorityWithResponse call
func ParsePostAPIAccountTeamsTeamIDPriorityRes(rsp *http.Response) (*PostAPIAccountTeamsTeamIDPriorityRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIAccountTeamsTeamIDPriorityRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PriorityPostPut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest PriorityPostPut
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseDeleteAPIAccountTeamsTeamIDPriorityPriorityIDRes parses an HTTP response from a DeleteAPIAccountTeamsTeamIDPriorityPriorityIDWithResponse call
func ParseDeleteAPIAccountTeamsTeamIDPriorityPriorityIDRes(rsp *http.Response) (*DeleteAPIAccountTeamsTeamIDPriorityPriorityIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIAccountTeamsTeamIDPriorityPriorityIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDPriorityPriorityIDRes parses an HTTP response from a GetAPIAccountTeamsTeamIDPriorityPriorityIDWithResponse call
func ParseGetAPIAccountTeamsTeamIDPriorityPriorityIDRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDPriorityPriorityIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDPriorityPriorityIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PriorityGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest PriorityGet
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePutAPIAccountTeamsTeamIDPriorityPriorityIDRes parses an HTTP response from a PutAPIAccountTeamsTeamIDPriorityPriorityIDWithResponse call
func ParsePutAPIAccountTeamsTeamIDPriorityPriorityIDRes(rsp *http.Response) (*PutAPIAccountTeamsTeamIDPriorityPriorityIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIAccountTeamsTeamIDPriorityPriorityIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PriorityPostPut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest PriorityPostPut
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDRolesRes parses an HTTP response from a GetAPIAccountTeamsTeamIDRolesWithResponse call
func ParseGetAPIAccountTeamsTeamIDRolesRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDRolesRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDRolesRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentRoleGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest IncidentRoleGet
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIAccountTeamsTeamIDRolesRes parses an HTTP response from a PostAPIAccountTeamsTeamIDRolesWithResponse call
func ParsePostAPIAccountTeamsTeamIDRolesRes(rsp *http.Response) (*PostAPIAccountTeamsTeamIDRolesRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIAccountTeamsTeamIDRolesRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IncidentRolePostPut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest IncidentRolePostPut
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseDeleteAPIAccountTeamsTeamIDRolesIncidentRoleIDRes parses an HTTP response from a DeleteAPIAccountTeamsTeamIDRolesIncidentRoleIDWithResponse call
func ParseDeleteAPIAccountTeamsTeamIDRolesIncidentRoleIDRes(rsp *http.Response) (*DeleteAPIAccountTeamsTeamIDRolesIncidentRoleIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIAccountTeamsTeamIDRolesIncidentRoleIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDRolesIncidentRoleIDRes parses an HTTP response from a GetAPIAccountTeamsTeamIDRolesIncidentRoleIDWithResponse call
func ParseGetAPIAccountTeamsTeamIDRolesIncidentRoleIDRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDRolesIncidentRoleIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDRolesIncidentRoleIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentRoleGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest IncidentRoleGet
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePutAPIAccountTeamsTeamIDRolesIncidentRoleIDRes parses an HTTP response from a PutAPIAccountTeamsTeamIDRolesIncidentRoleIDWithResponse call
func ParsePutAPIAccountTeamsTeamIDRolesIncidentRoleIDRes(rsp *http.Response) (*PutAPIAccountTeamsTeamIDRolesIncidentRoleIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIAccountTeamsTeamIDRolesIncidentRoleIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentRolePostPut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest IncidentRolePostPut
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDSchedulesRes parses an HTTP response from a GetAPIAccountTeamsTeamIDSchedulesWithResponse call
func ParseGetAPIAccountTeamsTeamIDSchedulesRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDSchedulesRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDSchedulesRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Schedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest Schedule
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIAccountTeamsTeamIDSchedulesRes parses an HTTP response from a PostAPIAccountTeamsTeamIDSchedulesWithResponse call
func ParsePostAPIAccountTeamsTeamIDSchedulesRes(rsp *http.Response) (*PostAPIAccountTeamsTeamIDSchedulesRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIAccountTeamsTeamIDSchedulesRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Schedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest Schedule
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseDeleteAPIAccountTeamsTeamIDSchedulesScheduleIDRes parses an HTTP response from a DeleteAPIAccountTeamsTeamIDSchedulesScheduleIDWithResponse call
func ParseDeleteAPIAccountTeamsTeamIDSchedulesScheduleIDRes(rsp *http.Response) (*DeleteAPIAccountTeamsTeamIDSchedulesScheduleIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIAccountTeamsTeamIDSchedulesScheduleIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDSchedulesScheduleIDRes parses an HTTP response from a GetAPIAccountTeamsTeamIDSchedulesScheduleIDWithResponse call
func ParseGetAPIAccountTeamsTeamIDSchedulesScheduleIDRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDSchedulesScheduleIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDSchedulesScheduleIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Schedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest Schedule
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePutAPIAccountTeamsTeamIDSchedulesScheduleIDRes parses an HTTP response from a PutAPIAccountTeamsTeamIDSchedulesScheduleIDWithResponse call
func ParsePutAPIAccountTeamsTeamIDSchedulesScheduleIDRes(rsp *http.Response) (*PutAPIAccountTeamsTeamIDSchedulesScheduleIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIAccountTeamsTeamIDSchedulesScheduleIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Schedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest Schedule
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDServicesRes parses an HTTP response from a GetAPIAccountTeamsTeamIDServicesWithResponse call
func ParseGetAPIAccountTeamsTeamIDServicesRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDServicesRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDServicesRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest ServiceGet
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIAccountTeamsTeamIDServicesRes parses an HTTP response from a PostAPIAccountTeamsTeamIDServicesWithResponse call
func ParsePostAPIAccountTeamsTeamIDServicesRes(rsp *http.Response) (*PostAPIAccountTeamsTeamIDServicesRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIAccountTeamsTeamIDServicesRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ServicePostPut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest ServicePostPut
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseDeleteAPIAccountTeamsTeamIDServicesServiceIDRes parses an HTTP response from a DeleteAPIAccountTeamsTeamIDServicesServiceIDWithResponse call
func ParseDeleteAPIAccountTeamsTeamIDServicesServiceIDRes(rsp *http.Response) (*DeleteAPIAccountTeamsTeamIDServicesServiceIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIAccountTeamsTeamIDServicesServiceIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDServicesServiceIDRes parses an HTTP response from a GetAPIAccountTeamsTeamIDServicesServiceIDWithResponse call
func ParseGetAPIAccountTeamsTeamIDServicesServiceIDRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDServicesServiceIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDServicesServiceIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest ServiceGet
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePutAPIAccountTeamsTeamIDServicesServiceIDRes parses an HTTP response from a PutAPIAccountTeamsTeamIDServicesServiceIDWithResponse call
func ParsePutAPIAccountTeamsTeamIDServicesServiceIDRes(rsp *http.Response) (*PutAPIAccountTeamsTeamIDServicesServiceIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIAccountTeamsTeamIDServicesServiceIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicePostPut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest ServicePostPut
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes parses an HTTP response from a GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsWithResponse call
func ParseGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest Integration
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes parses an HTTP response from a PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsWithResponse call
func ParsePostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes(rsp *http.Response) (*PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest Integration
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseDeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes parses an HTTP response from a DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDWithResponse call
func ParseDeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes(rsp *http.Response) (*DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes parses an HTTP response from a GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDWithResponse call
func ParseGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest Integration
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes parses an HTTP response from a PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDWithResponse call
func ParsePutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes(rsp *http.Response) (*PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest Integration
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDAlertsRes parses an HTTP response from a GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDAlertsWithResponse call
func ParseGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDAlertsRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDAlertsRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDAlertsRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationAlert
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest IntegrationAlert
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes parses an HTTP response from a GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersWithResponse call
func ParseGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertTransformer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest AlertTransformer
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes parses an HTTP response from a PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersWithResponse call
func ParsePostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes(rsp *http.Response) (*PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AlertTransformer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest AlertTransformer
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDSLARes parses an HTTP response from a GetAPIAccountTeamsTeamIDSLAWithResponse call
func ParseGetAPIAccountTeamsTeamIDSLARes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDSLARes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDSLARes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SLAGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest SLAGet
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIAccountTeamsTeamIDSLARes parses an HTTP response from a PostAPIAccountTeamsTeamIDSLAWithResponse call
func ParsePostAPIAccountTeamsTeamIDSLARes(rsp *http.Response) (*PostAPIAccountTeamsTeamIDSLARes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIAccountTeamsTeamIDSLARes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SLAPostPut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest SLAPostPut
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseDeleteAPIAccountTeamsTeamIDSLASLAIDRes parses an HTTP response from a DeleteAPIAccountTeamsTeamIDSLASLAIDWithResponse call
func ParseDeleteAPIAccountTeamsTeamIDSLASLAIDRes(rsp *http.Response) (*DeleteAPIAccountTeamsTeamIDSLASLAIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIAccountTeamsTeamIDSLASLAIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDSLASLAIDRes parses an HTTP response from a GetAPIAccountTeamsTeamIDSLASLAIDWithResponse call
func ParseGetAPIAccountTeamsTeamIDSLASLAIDRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDSLASLAIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDSLASLAIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SLAGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest SLAGet
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePutAPIAccountTeamsTeamIDSLASLAIDRes parses an HTTP response from a PutAPIAccountTeamsTeamIDSLASLAIDWithResponse call
func ParsePutAPIAccountTeamsTeamIDSLASLAIDRes(rsp *http.Response) (*PutAPIAccountTeamsTeamIDSLASLAIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIAccountTeamsTeamIDSLASLAIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SLAPostPut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest SLAPostPut
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDTagsRes parses an HTTP response from a GetAPIAccountTeamsTeamIDTagsWithResponse call
func ParseGetAPIAccountTeamsTeamIDTagsRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDTagsRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDTagsRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest TagGet
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIAccountTeamsTeamIDTagsRes parses an HTTP response from a PostAPIAccountTeamsTeamIDTagsWithResponse call
func ParsePostAPIAccountTeamsTeamIDTagsRes(rsp *http.Response) (*PostAPIAccountTeamsTeamIDTagsRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIAccountTeamsTeamIDTagsRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TagPostPut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest TagPostPut
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseDeleteAPIAccountTeamsTeamIDTagsTagIDRes parses an HTTP response from a DeleteAPIAccountTeamsTeamIDTagsTagIDWithResponse call
func ParseDeleteAPIAccountTeamsTeamIDTagsTagIDRes(rsp *http.Response) (*DeleteAPIAccountTeamsTeamIDTagsTagIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIAccountTeamsTeamIDTagsTagIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDTagsTagIDRes parses an HTTP response from a GetAPIAccountTeamsTeamIDTagsTagIDWithResponse call
func ParseGetAPIAccountTeamsTeamIDTagsTagIDRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDTagsTagIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDTagsTagIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest TagGet
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePutAPIAccountTeamsTeamIDTagsTagIDRes parses an HTTP response from a PutAPIAccountTeamsTeamIDTagsTagIDWithResponse call
func ParsePutAPIAccountTeamsTeamIDTagsTagIDRes(rsp *http.Response) (*PutAPIAccountTeamsTeamIDTagsTagIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIAccountTeamsTeamIDTagsTagIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagPostPut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest TagPostPut
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDTaskTemplatesRes parses an HTTP response from a GetAPIAccountTeamsTeamIDTaskTemplatesWithResponse call
func ParseGetAPIAccountTeamsTeamIDTaskTemplatesRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDTaskTemplatesRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDTaskTemplatesRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskTemplateGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest TaskTemplateGet
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIAccountTeamsTeamIDTaskTemplatesRes parses an HTTP response from a PostAPIAccountTeamsTeamIDTaskTemplatesWithResponse call
func ParsePostAPIAccountTeamsTeamIDTaskTemplatesRes(rsp *http.Response) (*PostAPIAccountTeamsTeamIDTaskTemplatesRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIAccountTeamsTeamIDTaskTemplatesRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TaskTemplatePostPut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest TaskTemplatePostPut
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseDeleteAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes parses an HTTP response from a DeleteAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDWithResponse call
func ParseDeleteAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes(rsp *http.Response) (*DeleteAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes parses an HTTP response from a GetAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDWithResponse call
func ParseGetAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskTemplateGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest TaskTemplateGet
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes parses an HTTP response from a PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDWithResponse call
func ParsePutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes(rsp *http.Response) (*PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIAccountTeamsTeamIDTaskTemplatesTaskTemplateIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskTemplatePostPut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest TaskTemplatePostPut
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIAccountUsersUsernameContactsRes parses an HTTP response from a GetAPIAccountUsersUsernameContactsWithResponse call
func ParseGetAPIAccountUsersUsernameContactsRes(rsp *http.Response) (*GetAPIAccountUsersUsernameContactsRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountUsersUsernameContactsRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserContactMethod
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest UserContactMethod
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIAccountUsersUsernameContactsRes parses an HTTP response from a PostAPIAccountUsersUsernameContactsWithResponse call
func ParsePostAPIAccountUsersUsernameContactsRes(rsp *http.Response) (*PostAPIAccountUsersUsernameContactsRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIAccountUsersUsernameContactsRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserContactMethod
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest UserContactMethod
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseDeleteAPIAccountUsersUsernameContactsContactIDRes parses an HTTP response from a DeleteAPIAccountUsersUsernameContactsContactIDWithResponse call
func ParseDeleteAPIAccountUsersUsernameContactsContactIDRes(rsp *http.Response) (*DeleteAPIAccountUsersUsernameContactsContactIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIAccountUsersUsernameContactsContactIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIAccountUsersUsernameContactsContactIDRes parses an HTTP response from a GetAPIAccountUsersUsernameContactsContactIDWithResponse call
func ParseGetAPIAccountUsersUsernameContactsContactIDRes(rsp *http.Response) (*GetAPIAccountUsersUsernameContactsContactIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountUsersUsernameContactsContactIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserContactMethod
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest UserContactMethod
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIAccountUsersUsernameCustomrolesRes parses an HTTP response from a GetAPIAccountUsersUsernameCustomrolesWithResponse call
func ParseGetAPIAccountUsersUsernameCustomrolesRes(rsp *http.Response) (*GetAPIAccountUsersUsernameCustomrolesRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountUsersUsernameCustomrolesRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserCustomRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest UserCustomRole
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIAccountUsersUsernameCustomrolesRes parses an HTTP response from a PostAPIAccountUsersUsernameCustomrolesWithResponse call
func ParsePostAPIAccountUsersUsernameCustomrolesRes(rsp *http.Response) (*PostAPIAccountUsersUsernameCustomrolesRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIAccountUsersUsernameCustomrolesRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserCustomRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest UserCustomRole
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseGetAPIAccountUsersUsernameForwardingRulesRes parses an HTTP response from a GetAPIAccountUsersUsernameForwardingRulesWithResponse call
func ParseGetAPIAccountUsersUsernameForwardingRulesRes(rsp *http.Response) (*GetAPIAccountUsersUsernameForwardingRulesRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountUsersUsernameForwardingRulesRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserForwardingRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest UserForwardingRule
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIAccountUsersUsernameForwardingRulesRes parses an HTTP response from a PostAPIAccountUsersUsernameForwardingRulesWithResponse call
func ParsePostAPIAccountUsersUsernameForwardingRulesRes(rsp *http.Response) (*PostAPIAccountUsersUsernameForwardingRulesRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIAccountUsersUsernameForwardingRulesRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserForwardingRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest UserForwardingRule
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseDeleteAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRes parses an HTTP response from a DeleteAPIAccountUsersUsernameForwardingRulesForwardingRuleIDWithResponse call
func ParseDeleteAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRes(rsp *http.Response) (*DeleteAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRes parses an HTTP response from a GetAPIAccountUsersUsernameForwardingRulesForwardingRuleIDWithResponse call
func ParseGetAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRes(rsp *http.Response) (*GetAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountUsersUsernameForwardingRulesForwardingRuleIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserForwardingRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest UserForwardingRule
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIAccountUsersUsernameNotificationRulesRes parses an HTTP response from a GetAPIAccountUsersUsernameNotificationRulesWithResponse call
func ParseGetAPIAccountUsersUsernameNotificationRulesRes(rsp *http.Response) (*GetAPIAccountUsersUsernameNotificationRulesRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountUsersUsernameNotificationRulesRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserNotificationRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest UserNotificationRule
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIAccountUsersUsernameNotificationRulesRes parses an HTTP response from a PostAPIAccountUsersUsernameNotificationRulesWithResponse call
func ParsePostAPIAccountUsersUsernameNotificationRulesRes(rsp *http.Response) (*PostAPIAccountUsersUsernameNotificationRulesRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIAccountUsersUsernameNotificationRulesRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserNotificationRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest UserNotificationRule
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseDeleteAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRes parses an HTTP response from a DeleteAPIAccountUsersUsernameNotificationRulesNotificationRuleIDWithResponse call
func ParseDeleteAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRes(rsp *http.Response) (*DeleteAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRes parses an HTTP response from a GetAPIAccountUsersUsernameNotificationRulesNotificationRuleIDWithResponse call
func ParseGetAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRes(rsp *http.Response) (*GetAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountUsersUsernameNotificationRulesNotificationRuleIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserNotificationRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest UserNotificationRule
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIAlertStatusTraceIDRes parses an HTTP response from a GetAPIAlertStatusTraceIDWithResponse call
func ParseGetAPIAlertStatusTraceIDRes(rsp *http.Response) (*GetAPIAlertStatusTraceIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAlertStatusTraceIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest AlertStatus
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIEventsIntegrationKeyRes parses an HTTP response from a PostAPIEventsIntegrationKeyWithResponse call
func ParsePostAPIEventsIntegrationKeyRes(rsp *http.Response) (*PostAPIEventsIntegrationKeyRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIEventsIntegrationKeyRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest Event
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParsePostAPIIncidentsRes parses an HTTP response from a PostAPIIncidentsWithResponse call
func ParsePostAPIIncidentsRes(rsp *http.Response) (*PostAPIIncidentsRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIIncidentsRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Incident
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest Incident
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParsePostAPIIncidentsFilterRes parses an HTTP response from a PostAPIIncidentsFilterWithResponse call
func ParsePostAPIIncidentsFilterRes(rsp *http.Response) (*PostAPIIncidentsFilterRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIIncidentsFilterRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentFilter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest IncidentFilter
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIIncidentsIncidentNumberRes parses an HTTP response from a GetAPIIncidentsIncidentNumberWithResponse call
func ParseGetAPIIncidentsIncidentNumberRes(rsp *http.Response) (*GetAPIIncidentsIncidentNumberRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIIncidentsIncidentNumberRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Incident
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest Incident
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePutAPIIncidentsIncidentNumberRes parses an HTTP response from a PutAPIIncidentsIncidentNumberWithResponse call
func ParsePutAPIIncidentsIncidentNumberRes(rsp *http.Response) (*PutAPIIncidentsIncidentNumberRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIIncidentsIncidentNumberRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Incident
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest Incident
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIIncidentsIncidentNumberAlertsRes parses an HTTP response from a GetAPIIncidentsIncidentNumberAlertsWithResponse call
func ParseGetAPIIncidentsIncidentNumberAlertsRes(rsp *http.Response) (*GetAPIIncidentsIncidentNumberAlertsRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIIncidentsIncidentNumberAlertsRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentAlert
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest IncidentAlert
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIIncidentsIncidentNumberNoteRes parses an HTTP response from a GetAPIIncidentsIncidentNumberNoteWithResponse call
func ParseGetAPIIncidentsIncidentNumberNoteRes(rsp *http.Response) (*GetAPIIncidentsIncidentNumberNoteRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIIncidentsIncidentNumberNoteRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentNote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest IncidentNote
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIIncidentsIncidentNumberNoteRes parses an HTTP response from a PostAPIIncidentsIncidentNumberNoteWithResponse call
func ParsePostAPIIncidentsIncidentNumberNoteRes(rsp *http.Response) (*PostAPIIncidentsIncidentNumberNoteRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIIncidentsIncidentNumberNoteRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IncidentNote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest IncidentNote
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseDeleteAPIIncidentsIncidentNumberNoteNoteUniqueIDRes parses an HTTP response from a DeleteAPIIncidentsIncidentNumberNoteNoteUniqueIDWithResponse call
func ParseDeleteAPIIncidentsIncidentNumberNoteNoteUniqueIDRes(rsp *http.Response) (*DeleteAPIIncidentsIncidentNumberNoteNoteUniqueIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIIncidentsIncidentNumberNoteNoteUniqueIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIIncidentsIncidentNumberNoteNoteUniqueIDRes parses an HTTP response from a GetAPIIncidentsIncidentNumberNoteNoteUniqueIDWithResponse call
func ParseGetAPIIncidentsIncidentNumberNoteNoteUniqueIDRes(rsp *http.Response) (*GetAPIIncidentsIncidentNumberNoteNoteUniqueIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIIncidentsIncidentNumberNoteNoteUniqueIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentNote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest IncidentNote
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePutAPIIncidentsIncidentNumberNoteNoteUniqueIDRes parses an HTTP response from a PutAPIIncidentsIncidentNumberNoteNoteUniqueIDWithResponse call
func ParsePutAPIIncidentsIncidentNumberNoteNoteUniqueIDRes(rsp *http.Response) (*PutAPIIncidentsIncidentNumberNoteNoteUniqueIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIIncidentsIncidentNumberNoteNoteUniqueIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentNote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest IncidentNote
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIIncidentsIncidentNumberRespondersRes parses an HTTP response from a GetAPIIncidentsIncidentNumberRespondersWithResponse call
func ParseGetAPIIncidentsIncidentNumberRespondersRes(rsp *http.Response) (*GetAPIIncidentsIncidentNumberRespondersRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIIncidentsIncidentNumberRespondersRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IncidentResponderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAPIIncidentsIncidentNumberRespondersRes parses an HTTP response from a PostAPIIncidentsIncidentNumberRespondersWithResponse call
func ParsePostAPIIncidentsIncidentNumberRespondersRes(rsp *http.Response) (*PostAPIIncidentsIncidentNumberRespondersRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIIncidentsIncidentNumberRespondersRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IncidentResponderPayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest IncidentResponderPayload
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseDeleteAPIIncidentsIncidentNumberRespondersUniqueIDRes parses an HTTP response from a DeleteAPIIncidentsIncidentNumberRespondersUniqueIDWithResponse call
func ParseDeleteAPIIncidentsIncidentNumberRespondersUniqueIDRes(rsp *http.Response) (*DeleteAPIIncidentsIncidentNumberRespondersUniqueIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIIncidentsIncidentNumberRespondersUniqueIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIIncidentsIncidentNumberRespondersUniqueIDRes parses an HTTP response from a GetAPIIncidentsIncidentNumberRespondersUniqueIDWithResponse call
func ParseGetAPIIncidentsIncidentNumberRespondersUniqueIDRes(rsp *http.Response) (*GetAPIIncidentsIncidentNumberRespondersUniqueIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIIncidentsIncidentNumberRespondersUniqueIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest interface{}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIIncidentsIncidentNumberTagsRes parses an HTTP response from a GetAPIIncidentsIncidentNumberTagsWithResponse call
func ParseGetAPIIncidentsIncidentNumberTagsRes(rsp *http.Response) (*GetAPIIncidentsIncidentNumberTagsRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIIncidentsIncidentNumberTagsRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentTag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest IncidentTag
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIIncidentsIncidentNumberTagsRes parses an HTTP response from a PostAPIIncidentsIncidentNumberTagsWithResponse call
func ParsePostAPIIncidentsIncidentNumberTagsRes(rsp *http.Response) (*PostAPIIncidentsIncidentNumberTagsRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIIncidentsIncidentNumberTagsRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IncidentTag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest IncidentTag
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseDeleteAPIIncidentsIncidentNumberTagsTagUniqueIDRes parses an HTTP response from a DeleteAPIIncidentsIncidentNumberTagsTagUniqueIDWithResponse call
func ParseDeleteAPIIncidentsIncidentNumberTagsTagUniqueIDRes(rsp *http.Response) (*DeleteAPIIncidentsIncidentNumberTagsTagUniqueIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIIncidentsIncidentNumberTagsTagUniqueIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIIncidentsIncidentNumberTagsTagUniqueIDRes parses an HTTP response from a GetAPIIncidentsIncidentNumberTagsTagUniqueIDWithResponse call
func ParseGetAPIIncidentsIncidentNumberTagsTagUniqueIDRes(rsp *http.Response) (*GetAPIIncidentsIncidentNumberTagsTagUniqueIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIIncidentsIncidentNumberTagsTagUniqueIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentTag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest IncidentTag
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePatchAPIIncidentsUniqueIDRes parses an HTTP response from a PatchAPIIncidentsUniqueIDWithResponse call
func ParsePatchAPIIncidentsUniqueIDRes(rsp *http.Response) (*PatchAPIIncidentsUniqueIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchAPIIncidentsUniqueIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Incident
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest Incident
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIV2AccountEventsRouterRes parses an HTTP response from a GetAPIV2AccountEventsRouterWithResponse call
func ParseGetAPIV2AccountEventsRouterRes(rsp *http.Response) (*GetAPIV2AccountEventsRouterRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV2AccountEventsRouterRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalRouter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest GlobalRouter
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIV2AccountEventsRouterRes parses an HTTP response from a PostAPIV2AccountEventsRouterWithResponse call
func ParsePostAPIV2AccountEventsRouterRes(rsp *http.Response) (*PostAPIV2AccountEventsRouterRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV2AccountEventsRouterRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GlobalRouter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest GlobalRouter
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseDeleteAPIV2AccountEventsRouterRouterIDRes parses an HTTP response from a DeleteAPIV2AccountEventsRouterRouterIDWithResponse call
func ParseDeleteAPIV2AccountEventsRouterRouterIDRes(rsp *http.Response) (*DeleteAPIV2AccountEventsRouterRouterIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIV2AccountEventsRouterRouterIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIV2AccountEventsRouterRouterIDRes parses an HTTP response from a GetAPIV2AccountEventsRouterRouterIDWithResponse call
func ParseGetAPIV2AccountEventsRouterRouterIDRes(rsp *http.Response) (*GetAPIV2AccountEventsRouterRouterIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV2AccountEventsRouterRouterIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalRouter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest GlobalRouter
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePutAPIV2AccountEventsRouterRouterIDRes parses an HTTP response from a PutAPIV2AccountEventsRouterRouterIDWithResponse call
func ParsePutAPIV2AccountEventsRouterRouterIDRes(rsp *http.Response) (*PutAPIV2AccountEventsRouterRouterIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIV2AccountEventsRouterRouterIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalRouter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest GlobalRouter
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIV2AccountEventsRouterRouterIDRulesetsRes parses an HTTP response from a GetAPIV2AccountEventsRouterRouterIDRulesetsWithResponse call
func ParseGetAPIV2AccountEventsRouterRouterIDRulesetsRes(rsp *http.Response) (*GetAPIV2AccountEventsRouterRouterIDRulesetsRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV2AccountEventsRouterRouterIDRulesetsRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalRouterRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest GlobalRouterRule
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostAPIV2AccountEventsRouterRouterIDRulesetsRes parses an HTTP response from a PostAPIV2AccountEventsRouterRouterIDRulesetsWithResponse call
func ParsePostAPIV2AccountEventsRouterRouterIDRulesetsRes(rsp *http.Response) (*PostAPIV2AccountEventsRouterRouterIDRulesetsRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV2AccountEventsRouterRouterIDRulesetsRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GlobalRouterRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest GlobalRouterRule
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParsePutAPIV2AccountEventsRouterRouterIDRulesetsRes parses an HTTP response from a PutAPIV2AccountEventsRouterRouterIDRulesetsWithResponse call
func ParsePutAPIV2AccountEventsRouterRouterIDRulesetsRes(rsp *http.Response) (*PutAPIV2AccountEventsRouterRouterIDRulesetsRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIV2AccountEventsRouterRouterIDRulesetsRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalRouterRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest GlobalRouterRule
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseDeleteAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes parses an HTTP response from a DeleteAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDWithResponse call
func ParseDeleteAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes(rsp *http.Response) (*DeleteAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes parses an HTTP response from a GetAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDWithResponse call
func ParseGetAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes(rsp *http.Response) (*GetAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalRouterRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest GlobalRouterRule
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes parses an HTTP response from a PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDWithResponse call
func ParsePutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes(rsp *http.Response) (*PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIV2AccountEventsRouterRouterIDRulesetsRulesetIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalRouterRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest GlobalRouterRule
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIV2AccountTeamsTeamIDEscalationPoliciesEpIDOncallRes parses an HTTP response from a GetAPIV2AccountTeamsTeamIDEscalationPoliciesEpIDOncallWithResponse call
func ParseGetAPIV2AccountTeamsTeamIDEscalationPoliciesEpIDOncallRes(rsp *http.Response) (*GetAPIV2AccountTeamsTeamIDEscalationPoliciesEpIDOncallRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV2AccountTeamsTeamIDEscalationPoliciesEpIDOncallRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EscalationPolicyOnCallV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest EscalationPolicyOnCallV2
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIV2AccountTeamsTeamIDOncallRes parses an HTTP response from a GetAPIV2AccountTeamsTeamIDOncallWithResponse call
func ParseGetAPIV2AccountTeamsTeamIDOncallRes(rsp *http.Response) (*GetAPIV2AccountTeamsTeamIDOncallRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV2AccountTeamsTeamIDOncallRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EscalationPolicyOnCallV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest EscalationPolicyOnCallV2
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes parses an HTTP response from a GetAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesWithResponse call
func ParseGetAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes(rsp *http.Response) (*GetAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduleOverrideList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes parses an HTTP response from a PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesWithResponse call
func ParsePostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes(rsp *http.Response) (*PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV2AccountTeamsTeamIDSchedulesScheduleIDOverridesRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ScheduleOverride
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest ScheduleOverride
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	}

	return response, nil
}

// ParseGetAPIV2AccountTeamsTeamIDServicesServiceIDOncallRes parses an HTTP response from a GetAPIV2AccountTeamsTeamIDServicesServiceIDOncallWithResponse call
func ParseGetAPIV2AccountTeamsTeamIDServicesServiceIDOncallRes(rsp *http.Response) (*GetAPIV2AccountTeamsTeamIDServicesServiceIDOncallRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV2AccountTeamsTeamIDServicesServiceIDOncallRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EscalationPolicyOnCallV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest EscalationPolicyOnCallV2
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationAccountIDGenericIntegrationKeyRes parses an HTTP response from a PostIntegrationAccountIDGenericIntegrationKeyWithResponse call
func ParsePostIntegrationAccountIDGenericIntegrationKeyRes(rsp *http.Response) (*PostIntegrationAccountIDGenericIntegrationKeyRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationAccountIDGenericIntegrationKeyRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventV3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest EventV3
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseDeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes parses an HTTP response from a DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDWithResponse call
func ParseDeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes(rsp *http.Response) (*DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes parses an HTTP response from a GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDWithResponse call
func ParseGetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes(rsp *http.Response) (*GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertTransformer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest AlertTransformer
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes parses an HTTP response from a PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDWithResponse call
func ParsePatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes(rsp *http.Response) (*PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchAPIAccountTeamsTeamIDServicesServiceIDIntegrationsIntegrationIDTransformersTransformersIDRes{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertTransformer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest AlertTransformer
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}
